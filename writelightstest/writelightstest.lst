
writelightstest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	68 2f 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	68 2f 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	68 2f 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	68 2f 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	68 2f 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	68 2f 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	68 2f 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <__CONFIG1-0x156e0>:
 11e:	68 2f 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <__CONFIG2-0x1569e>:
 15e:	68 2f 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <__CONFIG3-0x1569a>:
 160:	68 2f 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	68 2f 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	68 2f 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	68 2f 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	68 2f 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	68 2f 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	68 2f 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	68 2f 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	68 2f 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	68 2f 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	68 2f 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	68 2f 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	68 2f 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	68 2f 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	68 2f 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	68 2f 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	68 2f 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	68 2f 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	68 2f 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	68 2f 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	68 2f 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	68 2f 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	68 2f 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	68 2f 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	68 2f 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	68 2f 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	68 2f 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	68 2f 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	68 2f 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	68 2f 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	68 2f 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	68 2f 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	68 2f 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	68 2f 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	68 2f 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	68 2f 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	68 2f 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	68 2f 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	68 2f 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	68 2f 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	68 2f 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	68 2f 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	68 2f 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	68 2f 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	68 2f 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	68 2f 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	68 2f 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	68 2f 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	68 2f 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	68 2f 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	68 2f 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	68 2f 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	68 2f 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	68 2f 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	68 2f 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	68 2f 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	68 2f 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	68 2f 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	68 2f 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	68 2f 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	68 2f 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f c2 20    	mov.w     #0xc20, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	91 00 07    	rcall     0x1248 <__crt_start_mode> <__crt_start_mode_normal> <L0>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	a0 ef 22    	mov.w     #0x2efa, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	76 2a 02    	call      0x2a76 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	20 06 20    	mov.w     #0x62, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	c2 20 04    	goto      0x20c2 <___digitalRead>
    1216:	00 00 00 
    1218:	7e 20 04    	goto      0x207e <___digitalWrite>
    121a:	00 00 00 
    121c:	e4 20 04    	goto      0x20e4 <___analogRead>
    121e:	00 00 00 
    1220:	6e 25 04    	goto      0x256e <___pwmWrite>
    1222:	00 00 00 
    1224:	40 25 04    	goto      0x2540 <___pwmRead>
    1226:	00 00 00 
    1228:	d8 25 04    	goto      0x25d8 <___servoWrite>
    122a:	00 00 00 
    122c:	a6 25 04    	goto      0x25a6 <___servoRead>
    122e:	00 00 00 

00001230 <_time>:
    1230:	00 01 78    	mov.w     w0, w2
    1232:	10 01 e2    	cp0.w     0x110
    1234:	03 00 35    	bra       LT, 0x123c <.L2>
    1236:	10 61 a8    	bset.b    0x110, #0x3
    1238:	00 00 28    	mov.w     #0x8000, w0
    123a:	10 21 b7    	ior.w     0x110

0000123c <.L2>:
    123c:	30 08 80    	mov.w     0x106, w0
    123e:	41 08 80    	mov.w     0x108, w1
    1240:	02 00 e0    	cp0.w     w2
    1242:	01 00 32    	bra       Z, 0x1246 <.L3>
    1244:	00 89 be    	mov.d     w0, [w2]

00001246 <.L3>:
    1246:	00 00 06    	return    

00001248 <__crt_start_mode>:
    1248:	00 00 05    	retlw.w   #0x0, w0

0000124a <___subsf3>:
    124a:	03 f0 a2    	btg.w     w3, #0xf

0000124c <___addsf3>:
    124c:	88 9f be    	mov.d     w8, [w15++]
    124e:	8a 9f be    	mov.d     w10, [w15++]
    1250:	8c 1f 78    	mov.w     w12, [w15++]
    1252:	f7 00 07    	rcall     0x1442 <__funpack2>
    1254:	fe 00 33    	bra       N, 0x1452 <__fPropagateNaN>
    1256:	64 50 e1    	cp.w      w10, #0x4
    1258:	4f 00 32    	bra       Z, 0x12f8 <aisinfinite>

0000125a <checkspecialb>:
    125a:	64 20 e1    	cp.w      w4, #0x4
    125c:	52 00 32    	bra       Z, 0x1302 <return2>
    125e:	03 82 6c    	xor.w     w9, w3, w4
    1260:	07 00 3b    	bra       NN, 0x1270 <getsign>
    1262:	09 05 d0    	sl.w      w9, w10
    1264:	03 06 d0    	sl.w      w3, w12
    1266:	82 0f 54    	sub.w     w8, w2, [w15]
    1268:	0c 06 5d    	subb.w    w10, w12, w12
    126a:	02 00 39    	bra       NC, 0x1270 <getsign>
    126c:	02 00 32    	bra       Z, 0x1272 <gotsign>
    126e:	89 01 78    	mov.w     w9, w3

00001270 <getsign>:
    1270:	03 06 78    	mov.w     w3, w12

00001272 <gotsign>:
    1272:	85 82 55    	sub.w     w11, w5, w5
    1274:	04 00 3d    	bra       GE, 0x127e <expcanonical>
    1276:	00 03 fd    	exch      w0, w6
    1278:	81 03 fd    	exch      w1, w7
    127a:	85 02 ea    	neg.w     w5, w5
    127c:	8b 85 42    	add.w     w5, w11, w11

0000127e <expcanonical>:
    127e:	84 0f 72    	ior.w     w4, w4, [w15]
    1280:	02 00 3b    	bra       NN, 0x1286 <nonegate>
    1282:	60 00 10    	subr.w    w0, #0x0, w0
    1284:	e0 80 18    	subbr.w   w1, #0x0, w1

00001286 <nonegate>:
    1286:	60 11 b8    	mul.uu    w2, #0x0, w2
    1288:	00 05 eb    	clr.w     w10
    128a:	7a 28 e1    	cp.w      w5, #0x1a
    128c:	0a 00 39    	bra       NC, 0x12a2 <aligniter>
    128e:	06 00 78    	mov.w     w6, w0
    1290:	c7 5d dd    	sl.w      w11, #0x7, w11
    1292:	f7 07 b2    	and.w     #0x7f, w7
    1294:	87 80 75    	ior.w     w11, w7, w1
    1296:	2d 00 37    	bra       0x12f2 <signoff>

00001298 <align>:
    1298:	82 81 71    	ior.w     w3, w2, w3
    129a:	0a 01 78    	mov.w     w10, w2
    129c:	61 05 60    	and.w     w0, #0x1, w10
    129e:	81 80 d1    	asr.w     w1, w1
    12a0:	00 80 d3    	rrc.w     w0, w0

000012a2 <aligniter>:
    12a2:	85 02 e9    	dec.w     w5, w5
    12a4:	f9 ff 3b    	bra       NN, 0x1298 <align>

000012a6 <aligned>:
    12a6:	06 04 40    	add.w     w0, w6, w8
    12a8:	87 84 48    	addc.w    w1, w7, w9
    12aa:	02 00 3b    	bra       NN, 0x12b0 <normalizesum>
    12ac:	60 04 14    	subr.w    w8, #0x0, w8
    12ae:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012b0 <normalizesum>:
    12b0:	09 88 a3    	btst.z    w9, #0x8
    12b2:	07 00 32    	bra       Z, 0x12c2 <checknormal>
    12b4:	8a 81 71    	ior.w     w3, w10, w3
    12b6:	82 81 71    	ior.w     w3, w2, w3
    12b8:	61 01 64    	and.w     w8, #0x1, w2
    12ba:	89 04 d1    	lsr.w     w9, w9
    12bc:	08 84 d3    	rrc.w     w8, w8
    12be:	8b 05 e8    	inc.w     w11, w11
    12c0:	17 00 37    	bra       0x12f0 <round>

000012c2 <checknormal>:
    12c2:	09 78 a3    	btst.z    w9, #0x7
    12c4:	13 00 3a    	bra       NZ, 0x12ec <discardguard>

000012c6 <underflow>:
    12c6:	0b 00 e0    	cp0.w     w11
    12c8:	13 00 34    	bra       LE, 0x12f0 <round>
    12ca:	8b 05 e9    	dec.w     w11, w11
    12cc:	08 04 44    	add.w     w8, w8, w8
    12ce:	89 84 4c    	addc.w    w9, w9, w9
    12d0:	0a 44 74    	ior.b     w8, w10, w8
    12d2:	09 78 a3    	btst.z    w9, #0x7
    12d4:	0d 00 3a    	bra       NZ, 0x12f0 <round>

000012d6 <normalizeloop>:
    12d6:	0b 00 e0    	cp0.w     w11
    12d8:	07 00 34    	bra       LE, 0x12e8 <normalizeexit>
    12da:	8b 05 e9    	dec.w     w11, w11
    12dc:	08 04 44    	add.w     w8, w8, w8
    12de:	89 84 4c    	addc.w    w9, w9, w9
    12e0:	01 00 3a    	bra       NZ, 0x12e4 <normalizetest>
    12e2:	0b 00 20    	mov.w     #0x0, w11

000012e4 <normalizetest>:
    12e4:	09 78 a3    	btst.z    w9, #0x7
    12e6:	f7 ff 32    	bra       Z, 0x12d6 <normalizeloop>

000012e8 <normalizeexit>:
    12e8:	00 01 eb    	clr.w     w2
    12ea:	02 00 37    	bra       0x12f0 <round>

000012ec <discardguard>:
    12ec:	82 81 71    	ior.w     w3, w2, w3
    12ee:	0a 01 78    	mov.w     w10, w2

000012f0 <round>:
    12f0:	6d 00 07    	rcall     0x13cc <__fpack>

000012f2 <signoff>:
    12f2:	0c f0 a7    	btsc.w    w12, #0xf
    12f4:	01 f0 a0    	bset.w    w1, #0xf
    12f6:	b6 00 37    	bra       0x1464 <__fbopExit>

000012f8 <aisinfinite>:
    12f8:	64 20 e1    	cp.w      w4, #0x4
    12fa:	02 00 3a    	bra       NZ, 0x1300 <return8>
    12fc:	83 8f 6c    	xor.w     w9, w3, [w15]
    12fe:	b6 00 33    	bra       N, 0x146c <__fbopReturnNaN>

00001300 <return8>:
    1300:	08 01 be    	mov.d     w8, w2

00001302 <return2>:
    1302:	02 00 be    	mov.d     w2, w0
    1304:	af 00 37    	bra       0x1464 <__fbopExit>

00001306 <___divsf3>:
    1306:	88 9f be    	mov.d     w8, [w15++]
    1308:	8a 9f be    	mov.d     w10, [w15++]
    130a:	8c 1f 78    	mov.w     w12, [w15++]
    130c:	9a 00 07    	rcall     0x1442 <__funpack2>
    130e:	a1 00 33    	bra       N, 0x1452 <__fPropagateNaN>
    1310:	03 86 6c    	xor.w     w9, w3, w12
    1312:	64 50 e1    	cp.w      w10, #0x4
    1314:	2e 00 32    	bra       Z, 0x1372 <aisinfinite>
    1316:	64 20 e1    	cp.w      w4, #0x4
    1318:	33 00 32    	bra       Z, 0x1380 <returnZero>
    131a:	61 50 e1    	cp.w      w10, #0x1
    131c:	2f 00 32    	bra       Z, 0x137c <aiszero>
    131e:	61 20 e1    	cp.w      w4, #0x1
    1320:	31 00 32    	bra       Z, 0x1384 <returnInf>

00001322 <finitenonzero>:
    1322:	85 85 55    	sub.w     w11, w5, w11
    1324:	eb 07 b0    	add.w     #0x7e, w11
    1326:	09 00 20    	mov.w     #0x0, w9
    1328:	08 04 20    	mov.w     #0x40, w8
    132a:	05 00 37    	bra       0x1336 <diventry>

0000132c <divnext>:
    132c:	08 04 44    	add.w     w8, w8, w8
    132e:	89 84 4c    	addc.w    w9, w9, w9
    1330:	0a 00 31    	bra       C, 0x1346 <divdone> <formsticky>

00001332 <divloop>:
    1332:	06 03 43    	add.w     w6, w6, w6
    1334:	87 83 4b    	addc.w    w7, w7, w7

00001336 <diventry>:
    1336:	00 01 53    	sub.w     w6, w0, w2
    1338:	81 81 5b    	subb.w    w7, w1, w3
    133a:	f8 ff 33    	bra       N, 0x132c <divnext>
    133c:	02 03 be    	mov.d     w2, w6
    133e:	08 00 a0    	bset.w    w8, #0x0
    1340:	08 04 44    	add.w     w8, w8, w8
    1342:	89 84 4c    	addc.w    w9, w9, w9
    1344:	f6 ff 39    	bra       NC, 0x1332 <divloop>

00001346 <divdone>:
    1346:	c6 39 dd    	sl.w      w7, #0x6, w3
    1348:	83 01 73    	ior.w     w6, w3, w3
    134a:	01 00 32    	bra       Z, 0x134e <stickyok>
    134c:	13 00 20    	mov.w     #0x1, w3

0000134e <stickyok>:
    134e:	89 04 d1    	lsr.w     w9, w9
    1350:	08 84 d3    	rrc.w     w8, w8
    1352:	09 98 a3    	btst.z    w9, #0x9
    1354:	05 00 32    	bra       Z, 0x1360 <guardused>
    1356:	08 00 a7    	btsc.w    w8, #0x0
    1358:	03 00 a0    	bset.w    w3, #0x0
    135a:	89 04 d1    	lsr.w     w9, w9
    135c:	08 84 d3    	rrc.w     w8, w8
    135e:	8b 05 e8    	inc.w     w11, w11

00001360 <guardused>:
    1360:	89 04 d1    	lsr.w     w9, w9
    1362:	08 84 d3    	rrc.w     w8, w8
    1364:	00 01 eb    	clr.w     w2
    1366:	02 81 d2    	rlc.w     w2, w2
    1368:	31 00 07    	rcall     0x13cc <__fpack>

0000136a <return0>:
    136a:	01 f0 a1    	bclr.w    w1, #0xf
    136c:	0c f0 a7    	btsc.w    w12, #0xf
    136e:	01 f0 a0    	bset.w    w1, #0xf
    1370:	79 00 37    	bra       0x1464 <__fbopExit>

00001372 <aisinfinite>:
    1372:	64 20 e1    	cp.w      w4, #0x4
    1374:	7b 00 32    	bra       Z, 0x146c <__fbopReturnNaN>

00001376 <return8>:
    1376:	08 01 be    	mov.d     w8, w2

00001378 <return2>:
    1378:	02 00 be    	mov.d     w2, w0
    137a:	f7 ff 37    	bra       0x136a <return0>

0000137c <aiszero>:
    137c:	61 20 e1    	cp.w      w4, #0x1
    137e:	76 00 32    	bra       Z, 0x146c <__fbopReturnNaN>

00001380 <returnZero>:
    1380:	60 00 b8    	mul.uu    w0, #0x0, w0
    1382:	f3 ff 37    	bra       0x136a <return0>

00001384 <returnInf>:
    1384:	00 00 20    	mov.w     #0x0, w0
    1386:	01 f8 27    	mov.w     #0x7f80, w1
    1388:	f0 ff 37    	bra       0x136a <return0>

0000138a <___eqsf2>:
    138a:	14 00 20    	mov.w     #0x1, w4
    138c:	b6 00 37    	bra       0x14fa <__fcompare>

0000138e <___gesf2>:
    138e:	f4 ff 2f    	mov.w     #0xffff, w4
    1390:	b4 00 37    	bra       0x14fa <__fcompare>

00001392 <___fixunssfsi>:
    1392:	00 01 be    	mov.d     w0, w2
    1394:	41 00 07    	rcall     0x1418 <__funpack>
    1396:	04 70 a7    	btsc.w    w4, #0x7
    1398:	03 f0 a1    	bclr.w    w3, #0xf
    139a:	03 f8 a3    	btst.z    w3, #0xf
    139c:	13 00 3a    	bra       NZ, 0x13c4 <returnzero>
    139e:	65 09 b1    	sub.w     #0x96, w5
    13a0:	10 00 32    	bra       Z, 0x13c2 <exit>
    13a2:	09 00 35    	bra       LT, 0x13b6 <shiftright>
    13a4:	69 28 e1    	cp.w      w5, #0x9
    13a6:	02 00 35    	bra       LT, 0x13ac <shiftleft>
    13a8:	01 00 28    	mov.w     #0x8000, w1
    13aa:	00 00 05    	retlw.w   #0x0, w0

000013ac <shiftleft>:
    13ac:	00 00 40    	add.w     w0, w0, w0
    13ae:	81 80 48    	addc.w    w1, w1, w1
    13b0:	85 02 e9    	dec.w     w5, w5
    13b2:	fc ff 3a    	bra       NZ, 0x13ac <shiftleft>
    13b4:	00 00 06    	return    

000013b6 <shiftright>:
    13b6:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13b8:	05 00 35    	bra       LT, 0x13c4 <returnzero>

000013ba <shiftrightloop>:
    13ba:	81 00 d1    	lsr.w     w1, w1
    13bc:	00 80 d3    	rrc.w     w0, w0
    13be:	85 02 e8    	inc.w     w5, w5
    13c0:	fc ff 3a    	bra       NZ, 0x13ba <shiftrightloop>

000013c2 <exit>:
    13c2:	00 00 06    	return    

000013c4 <returnzero>:
    13c4:	80 00 eb    	clr.w     w1
    13c6:	00 00 05    	retlw.w   #0x0, w0

000013c8 <___floatunsisf>:
    13c8:	60 11 b8    	mul.uu    w2, #0x0, w2
    13ca:	b2 00 37    	bra       0x1530 <___floatundisf>

000013cc <__fpack>:
    13cc:	81 00 20    	mov.w     #0x8, w1
    13ce:	61 80 55    	sub.w     w11, #0x1, w0
    13d0:	0b 00 3d    	bra       GE, 0x13e8 <notsubnormal>
    13d2:	0b 00 20    	mov.w     #0x0, w11
    13d4:	61 fe 2f    	mov.w     #0xffe6, w1
    13d6:	01 00 e1    	cp.w      w0, w1
    13d8:	1d 00 34    	bra       LE, 0x1414 <zerosig>

000013da <subnormal>:
    13da:	82 81 71    	ior.w     w3, w2, w3
    13dc:	61 01 64    	and.w     w8, #0x1, w2
    13de:	89 04 d1    	lsr.w     w9, w9
    13e0:	08 84 d3    	rrc.w     w8, w8
    13e2:	00 00 e8    	inc.w     w0, w0
    13e4:	fa ff 3a    	bra       NZ, 0x13da <subnormal>
    13e6:	71 00 20    	mov.w     #0x7, w1

000013e8 <notsubnormal>:
    13e8:	61 00 64    	and.w     w8, #0x1, w0
    13ea:	03 00 70    	ior.w     w0, w3, w0
    13ec:	02 00 60    	and.w     w0, w2, w0
    13ee:	09 00 32    	bra       Z, 0x1402 <packupandgo>
    13f0:	61 04 44    	add.w     w8, #0x1, w8
    13f2:	e0 84 4c    	addc.w    w9, #0x0, w9
    13f4:	09 88 a5    	btst.z    w9, w1
    13f6:	05 00 32    	bra       Z, 0x1402 <packupandgo>
    13f8:	8b 05 e8    	inc.w     w11, w11
    13fa:	68 08 e1    	cp.w      w1, #0x8
    13fc:	02 00 3a    	bra       NZ, 0x1402 <packupandgo>
    13fe:	89 04 d1    	lsr.w     w9, w9
    1400:	08 84 d3    	rrc.w     w8, w8

00001402 <packupandgo>:
    1402:	f2 0f 20    	mov.w     #0xff, w2
    1404:	02 58 e1    	cp.w      w11, w2
    1406:	05 00 3d    	bra       GE, 0x1412 <overflow>
    1408:	c7 5d dd    	sl.w      w11, #0x7, w11
    140a:	f9 07 b2    	and.w     #0x7f, w9
    140c:	89 80 75    	ior.w     w11, w9, w1
    140e:	08 00 78    	mov.w     w8, w0
    1410:	00 00 06    	return    

00001412 <overflow>:
    1412:	0b f8 27    	mov.w     #0x7f80, w11

00001414 <zerosig>:
    1414:	8b 00 78    	mov.w     w11, w1
    1416:	00 00 05    	retlw.w   #0x0, w0

00001418 <__funpack>:
    1418:	c7 0a de    	lsr.w     w1, #0x7, w5
    141a:	f1 07 b2    	and.w     #0x7f, w1
    141c:	f5 0f b2    	and.w     #0xff, w5
    141e:	08 00 32    	bra       Z, 0x1430 <zeroorsub>
    1420:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1422:	02 00 32    	bra       Z, 0x1428 <nanorinf>

00001424 <finitereturn>:
    1424:	01 70 a0    	bset.w    w1, #0x7
    1426:	24 00 05    	retlw.w   #0x2, w4

00001428 <nanorinf>:
    1428:	81 0f 70    	ior.w     w0, w1, [w15]
    142a:	01 00 32    	bra       Z, 0x142e <infinite>
    142c:	04 08 05    	retlw.w   #0x80, w4

0000142e <infinite>:
    142e:	44 00 05    	retlw.w   #0x4, w4

00001430 <zeroorsub>:
    1430:	81 0f 70    	ior.w     w0, w1, [w15]
    1432:	02 00 3a    	bra       NZ, 0x1438 <subnormal>
    1434:	14 00 05    	retlw.w   #0x1, w4

00001436 <normalize>:
    1436:	85 02 e9    	dec.w     w5, w5

00001438 <subnormal>:
    1438:	00 00 40    	add.w     w0, w0, w0
    143a:	81 c0 48    	addc.b    w1, w1, w1
    143c:	fc ff 3b    	bra       NN, 0x1436 <normalize>
    143e:	01 70 a0    	bset.w    w1, #0x7
    1440:	24 00 05    	retlw.w   #0x2, w4

00001442 <__funpack2>:
    1442:	00 04 be    	mov.d     w0, w8
    1444:	e9 ff 07    	rcall     0x1418 <__funpack>
    1446:	00 03 be    	mov.d     w0, w6
    1448:	04 05 be    	mov.d     w4, w10
    144a:	02 00 be    	mov.d     w2, w0
    144c:	e5 ff 07    	rcall     0x1418 <__funpack>
    144e:	84 4f 75    	ior.b     w10, w4, [w15]
    1450:	00 00 06    	return    

00001452 <__fPropagateNaN>:
    1452:	02 00 be    	mov.d     w2, w0
    1454:	64 50 e1    	cp.w      w10, #0x4
    1456:	05 00 36    	bra       LEU, 0x1462 <return0>
    1458:	64 20 e1    	cp.w      w4, #0x4
    145a:	02 00 36    	bra       LEU, 0x1460 <return8>
    145c:	09 68 a3    	btst.z    w9, #0x6
    145e:	01 00 3a    	bra       NZ, 0x1462 <return0>

00001460 <return8>:
    1460:	08 00 be    	mov.d     w8, w0

00001462 <return0>:
    1462:	01 60 a0    	bset.w    w1, #0x6

00001464 <__fbopExit>:
    1464:	4f 06 78    	mov.w     [--w15], w12
    1466:	4f 05 be    	mov.d     [--w15], w10
    1468:	4f 04 be    	mov.d     [--w15], w8
    146a:	00 00 06    	return    

0000146c <__fbopReturnNaN>:
    146c:	f0 ff 2f    	mov.w     #0xffff, w0
    146e:	f1 ff 27    	mov.w     #0x7fff, w1
    1470:	f9 ff 37    	bra       0x1464 <__fbopExit>

00001472 <___mulsf3>:
    1472:	88 9f be    	mov.d     w8, [w15++]
    1474:	8a 9f be    	mov.d     w10, [w15++]
    1476:	8c 1f 78    	mov.w     w12, [w15++]
    1478:	e4 ff 07    	rcall     0x1442 <__funpack2>
    147a:	eb ff 33    	bra       N, 0x1452 <__fPropagateNaN>
    147c:	03 86 6c    	xor.w     w9, w3, w12
    147e:	64 50 e1    	cp.w      w10, #0x4
    1480:	24 00 32    	bra       Z, 0x14ca <aisinfinite>
    1482:	64 20 e1    	cp.w      w4, #0x4
    1484:	27 00 32    	bra       Z, 0x14d4 <bisinfinite>
    1486:	61 50 e1    	cp.w      w10, #0x1
    1488:	22 00 32    	bra       Z, 0x14ce <return8>
    148a:	61 20 e1    	cp.w      w4, #0x1
    148c:	21 00 32    	bra       Z, 0x14d0 <return2>
    148e:	8b 85 42    	add.w     w5, w11, w11
    1490:	eb 07 b1    	sub.w     #0x7e, w11
    1492:	01 34 b8    	mul.uu    w6, w1, w8
    1494:	00 3a b8    	mul.uu    w7, w0, w4
    1496:	08 04 42    	add.w     w4, w8, w8
    1498:	89 84 4a    	addc.w    w5, w9, w9
    149a:	01 3a b8    	mul.uu    w7, w1, w4
    149c:	00 30 b8    	mul.uu    w6, w0, w0
    149e:	88 80 40    	add.w     w1, w8, w1
    14a0:	09 01 4a    	addc.w    w4, w9, w2
    14a2:	04 00 33    	bra       N, 0x14ac <formsticky>
    14a4:	00 00 40    	add.w     w0, w0, w0
    14a6:	81 80 48    	addc.w    w1, w1, w1
    14a8:	02 01 49    	addc.w    w2, w2, w2
    14aa:	8b 05 e9    	dec.w     w11, w11

000014ac <formsticky>:
    14ac:	c9 09 dd    	sl.w      w1, #0x9, w3
    14ae:	83 01 70    	ior.w     w0, w3, w3
    14b0:	01 00 32    	bra       Z, 0x14b4 <formRandSig>
    14b2:	13 00 20    	mov.w     #0x1, w3

000014b4 <formRandSig>:
    14b4:	c8 14 de    	lsr.w     w2, #0x8, w9
    14b6:	48 14 dd    	sl.w      w2, #0x8, w8
    14b8:	47 09 de    	lsr.w     w1, #0x7, w2
    14ba:	12 00 b2    	and.w     #0x1, w2
    14bc:	c8 08 de    	lsr.w     w1, #0x8, w1
    14be:	08 84 70    	ior.w     w1, w8, w8
    14c0:	85 ff 07    	rcall     0x13cc <__fpack>

000014c2 <return0>:
    14c2:	01 f0 a1    	bclr.w    w1, #0xf
    14c4:	0c f0 a7    	btsc.w    w12, #0xf
    14c6:	01 f0 a0    	bset.w    w1, #0xf
    14c8:	cd ff 37    	bra       0x1464 <__fbopExit>

000014ca <aisinfinite>:
    14ca:	61 20 e1    	cp.w      w4, #0x1
    14cc:	cf ff 32    	bra       Z, 0x146c <__fbopReturnNaN>

000014ce <return8>:
    14ce:	08 01 be    	mov.d     w8, w2

000014d0 <return2>:
    14d0:	02 00 be    	mov.d     w2, w0
    14d2:	f7 ff 37    	bra       0x14c2 <return0>

000014d4 <bisinfinite>:
    14d4:	61 50 e1    	cp.w      w10, #0x1
    14d6:	fc ff 3a    	bra       NZ, 0x14d0 <return2>
    14d8:	c9 ff 37    	bra       0x146c <__fbopReturnNaN>

000014da <___udivsi3>:
    14da:	60 22 b8    	mul.uu    w4, #0x0, w4
    14dc:	06 02 20    	mov.w     #0x20, w6

000014de <nextbit>:
    14de:	00 00 d0    	sl.w      w0, w0
    14e0:	81 80 d2    	rlc.w     w1, w1
    14e2:	04 82 d2    	rlc.w     w4, w4
    14e4:	85 82 d2    	rlc.w     w5, w5
    14e6:	00 00 a0    	bset.w    w0, #0x0
    14e8:	02 02 52    	sub.w     w4, w2, w4
    14ea:	83 82 5a    	subb.w    w5, w3, w5
    14ec:	03 00 31    	bra       C, 0x14f4 <iterate>
    14ee:	02 02 42    	add.w     w4, w2, w4
    14f0:	83 82 4a    	addc.w    w5, w3, w5
    14f2:	00 00 a1    	bclr.w    w0, #0x0

000014f4 <iterate>:
    14f4:	06 03 e9    	dec.w     w6, w6
    14f6:	f3 ff 3a    	bra       NZ, 0x14de <nextbit>
    14f8:	00 00 06    	return    

000014fa <__fcompare>:
    14fa:	88 9f be    	mov.d     w8, [w15++]
    14fc:	8a 9f be    	mov.d     w10, [w15++]
    14fe:	84 1f 78    	mov.w     w4, [w15++]
    1500:	a0 ff 07    	rcall     0x1442 <__funpack2>
    1502:	4f 00 78    	mov.w     [--w15], w0
    1504:	11 00 33    	bra       N, 0x1528 <exit>
    1506:	f0 ff 2f    	mov.w     #0xffff, w0
    1508:	83 8f 6c    	xor.w     w9, w3, [w15]
    150a:	06 00 3b    	bra       NN, 0x1518 <comparemag>
    150c:	04 05 65    	and.w     w10, w4, w10
    150e:	0a 00 a7    	btsc.w    w10, #0x0
    1510:	08 00 37    	bra       0x1522 <returnEqual>
    1512:	09 f0 a6    	btss.w    w9, #0xf
    1514:	10 00 20    	mov.w     #0x1, w0
    1516:	08 00 37    	bra       0x1528 <exit>

00001518 <comparemag>:
    1518:	82 0f 54    	sub.w     w8, w2, [w15]
    151a:	83 8f 5c    	subb.w    w9, w3, [w15]
    151c:	03 00 39    	bra       NC, 0x1524 <adjust>
    151e:	10 00 20    	mov.w     #0x1, w0
    1520:	01 00 3e    	bra       GTU, 0x1524 <adjust>

00001522 <returnEqual>:
    1522:	00 00 20    	mov.w     #0x0, w0

00001524 <adjust>:
    1524:	09 f0 a7    	btsc.w    w9, #0xf
    1526:	00 00 ea    	neg.w     w0, w0

00001528 <exit>:
    1528:	4f 05 be    	mov.d     [--w15], w10
    152a:	4f 04 be    	mov.d     [--w15], w8
    152c:	00 00 e0    	cp0.w     w0
    152e:	00 00 06    	return    

00001530 <___floatundisf>:
    1530:	88 9f be    	mov.d     w8, [w15++]
    1532:	8a 9f be    	mov.d     w10, [w15++]
    1534:	00 82 70    	ior.w     w1, w0, w4
    1536:	04 02 71    	ior.w     w2, w4, w4
    1538:	04 82 71    	ior.w     w3, w4, w4
    153a:	26 00 32    	bra       Z, 0x1588 <return0>
    153c:	00 04 be    	mov.d     w0, w8
    153e:	02 00 be    	mov.d     w2, w0
    1540:	60 11 b8    	mul.uu    w2, #0x0, w2
    1542:	6b 09 20    	mov.w     #0x96, w11
    1544:	95 02 20    	mov.w     #0x29, w5
    1546:	01 82 cf    	ff1l      w1, w4
    1548:	0a 00 39    	bra       NC, 0x155e <fixshift>
    154a:	05 41 b1    	sub.b     #0x10, w5
    154c:	00 82 cf    	ff1l      w0, w4
    154e:	07 00 39    	bra       NC, 0x155e <fixshift>
    1550:	05 41 b1    	sub.b     #0x10, w5
    1552:	09 82 cf    	ff1l      w9, w4
    1554:	04 00 39    	bra       NC, 0x155e <fixshift>
    1556:	05 41 b1    	sub.b     #0x10, w5
    1558:	08 82 cf    	ff1l      w8, w4
    155a:	01 00 39    	bra       NC, 0x155e <fixshift>
    155c:	05 41 b1    	sub.b     #0x10, w5

0000155e <fixshift>:
    155e:	05 42 52    	sub.b     w4, w5, w4
    1560:	12 00 32    	bra       Z, 0x1586 <round>
    1562:	0a 00 3b    	bra       NN, 0x1578 <shiftleft>

00001564 <shiftright>:
    1564:	82 81 71    	ior.w     w3, w2, w3
    1566:	61 01 64    	and.w     w8, #0x1, w2
    1568:	81 00 d1    	lsr.w     w1, w1
    156a:	00 80 d3    	rrc.w     w0, w0
    156c:	89 84 d3    	rrc.w     w9, w9
    156e:	08 84 d3    	rrc.w     w8, w8
    1570:	8b 05 e8    	inc.w     w11, w11
    1572:	04 42 e8    	inc.b     w4, w4
    1574:	f7 ff 3a    	bra       NZ, 0x1564 <shiftright>
    1576:	07 00 37    	bra       0x1586 <round>

00001578 <shiftleft>:
    1578:	08 04 44    	add.w     w8, w8, w8
    157a:	89 84 4c    	addc.w    w9, w9, w9
    157c:	00 00 48    	addc.w    w0, w0, w0
    157e:	81 80 48    	addc.w    w1, w1, w1
    1580:	8b 05 e9    	dec.w     w11, w11
    1582:	04 42 e9    	dec.b     w4, w4
    1584:	f9 ff 3a    	bra       NZ, 0x1578 <shiftleft>

00001586 <round>:
    1586:	22 ff 07    	rcall     0x13cc <__fpack>

00001588 <return0>:
    1588:	4f 05 be    	mov.d     [--w15], w10
    158a:	4f 04 be    	mov.d     [--w15], w8
    158c:	00 00 06    	return    

0000158e <_rand>:
    158e:	88 9f be    	mov.d     w8, [w15++]
    1590:	a0 56 80    	mov.w     0xad4, w0
    1592:	00 00 e0    	cp0.w     w0
    1594:	01 00 32    	bra       Z, 0x1598 <.L2>
    1596:	00 00 01    	call      w0

00001598 <.L2>:
    1598:	b0 56 80    	mov.w     0xad6, w0
    159a:	00 00 e0    	cp0.w     w0
    159c:	01 00 32    	bra       Z, 0x15a0 <.L3>
    159e:	00 00 01    	call      w0

000015a0 <.L3>:
    15a0:	20 ad 20    	mov.w     #0xad2, w0
    15a2:	10 04 e0    	cp0.b     [w0]
    15a4:	22 00 3a    	bra       NZ, 0x15ea <.L4>
    15a6:	e0 60 80    	mov.w     0xc1c, w0
    15a8:	f1 60 80    	mov.w     0xc1e, w1
    15aa:	88 00 20    	mov.w     #0x8, w8

000015ac <.L5>:
    15ac:	d2 60 26    	mov.w     #0x660d, w2
    15ae:	93 01 20    	mov.w     #0x19, w3
    15b0:	46 00 07    	rcall     0x163e <___mulp32eds3> <___mulp32peds3> <___mulsi3> <L0>
    15b2:	f2 35 2f    	mov.w     #0xf35f, w2
    15b4:	e3 c6 23    	mov.w     #0x3c6e, w3
    15b6:	00 00 41    	add.w     w2, w0, w0
    15b8:	81 80 49    	addc.w    w3, w1, w1
    15ba:	08 04 e9    	dec.w     w8, w8
    15bc:	f7 ff 3a    	bra       NZ, 0x15ac <.L5>
    15be:	88 ad 20    	mov.w     #0xad8, w8
    15c0:	09 08 20    	mov.w     #0x80, w9
    15c2:	88 84 44    	add.w     w9, w8, w9

000015c4 <.L6>:
    15c4:	d2 60 26    	mov.w     #0x660d, w2
    15c6:	93 01 20    	mov.w     #0x19, w3
    15c8:	3a 00 07    	rcall     0x163e <___mulp32eds3> <___mulp32peds3> <___mulsi3> <L0>
    15ca:	f2 35 2f    	mov.w     #0xf35f, w2
    15cc:	e3 c6 23    	mov.w     #0x3c6e, w3
    15ce:	00 00 41    	add.w     w2, w0, w0
    15d0:	81 80 49    	addc.w    w3, w1, w1
    15d2:	00 ac be    	mov.d     w0, [++w8]
    15d4:	89 0f 54    	sub.w     w8, w9, [w15]
    15d6:	f6 ff 3a    	bra       NZ, 0x15c4 <.L6>
    15d8:	e0 60 88    	mov.w     w0, 0xc1c
    15da:	f1 60 88    	mov.w     w1, 0xc1e
    15dc:	c0 5a 80    	mov.w     0xb58, w0
    15de:	d1 5a 80    	mov.w     0xb5a, w1
    15e0:	c0 56 88    	mov.w     w0, 0xad8
    15e2:	d1 56 88    	mov.w     w1, 0xada
    15e4:	11 c0 b3    	mov.b     #0x1, w1
    15e6:	20 ad 20    	mov.w     #0xad2, w0
    15e8:	01 48 78    	mov.b     w1, [w0]

000015ea <.L4>:
    15ea:	d2 60 26    	mov.w     #0x660d, w2
    15ec:	93 01 20    	mov.w     #0x19, w3
    15ee:	e0 60 80    	mov.w     0xc1c, w0
    15f0:	f1 60 80    	mov.w     0xc1e, w1
    15f2:	25 00 07    	rcall     0x163e <___mulp32eds3> <___mulp32peds3> <___mulsi3> <L0>
    15f4:	f2 35 2f    	mov.w     #0xf35f, w2
    15f6:	e3 c6 23    	mov.w     #0x3c6e, w3
    15f8:	00 02 41    	add.w     w2, w0, w4
    15fa:	81 82 49    	addc.w    w3, w1, w5
    15fc:	e4 60 88    	mov.w     w4, 0xc1c
    15fe:	f5 60 88    	mov.w     w5, 0xc1e
    1600:	80 ad 20    	mov.w     #0xad8, w0
    1602:	10 00 78    	mov.w     [w0], w0
    1604:	7f 01 60    	and.w     w0, #0x1f, w2
    1606:	42 11 dd    	sl.w      w2, #0x2, w2
    1608:	c0 ad 20    	mov.w     #0xadc, w0
    160a:	02 01 40    	add.w     w0, w2, w2
    160c:	12 00 be    	mov.d     [w2], w0
    160e:	c0 56 88    	mov.w     w0, 0xad8
    1610:	d1 56 88    	mov.w     w1, 0xada
    1612:	04 89 be    	mov.d     w4, [w2]
    1614:	01 00 78    	mov.w     w1, w0
    1616:	00 f0 a1    	bclr.w    w0, #0xf
    1618:	4f 04 be    	mov.d     [--w15], w8
    161a:	00 00 06    	return    

0000161c <_srand>:
    161c:	88 9f be    	mov.d     w8, [w15++]
    161e:	00 04 78    	mov.w     w0, w8
    1620:	a0 56 80    	mov.w     0xad4, w0
    1622:	00 00 e0    	cp0.w     w0
    1624:	01 00 32    	bra       Z, 0x1628 <.L2>
    1626:	00 00 01    	call      w0

00001628 <.L2>:
    1628:	20 ad 20    	mov.w     #0xad2, w0
    162a:	00 48 eb    	clr.b     [w0]
    162c:	b0 56 80    	mov.w     0xad6, w0
    162e:	00 00 e0    	cp0.w     w0
    1630:	01 00 32    	bra       Z, 0x1634 <.L3>
    1632:	00 00 01    	call      w0

00001634 <.L3>:
    1634:	80 04 eb    	clr.w     w9
    1636:	e8 60 88    	mov.w     w8, 0xc1c
    1638:	f9 60 88    	mov.w     w9, 0xc1e
    163a:	4f 04 be    	mov.d     [--w15], w8
    163c:	00 00 06    	return    

0000163e <___mulp32eds3>:
    163e:	02 0a b9    	mul.su    w1, w2, w4
    1640:	00 1b b9    	mul.su    w3, w0, w6
    1642:	02 00 b8    	mul.uu    w0, w2, w0
    1644:	81 00 42    	add.w     w4, w1, w1
    1646:	81 00 43    	add.w     w6, w1, w1
    1648:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	68 2f 04    	goto      0x2f68 <L0>
    1006:	00 00 00 
    1008:	68 2f 04    	goto      0x2f68 <L0>
    100a:	00 00 00 
    100c:	68 2f 04    	goto      0x2f68 <L0>
    100e:	00 00 00 
    1010:	68 2f 04    	goto      0x2f68 <L0>
    1012:	00 00 00 
    1014:	68 2f 04    	goto      0x2f68 <L0>
    1016:	00 00 00 
    1018:	68 2f 04    	goto      0x2f68 <L0>
    101a:	00 00 00 
    101c:	68 2f 04    	goto      0x2f68 <L0>
    101e:	00 00 00 
    1020:	68 2f 04    	goto      0x2f68 <L0>
    1022:	00 00 00 
    1024:	fe 16 04    	goto      0x16fe <__T1Interrupt>
    1026:	00 00 00 
    1028:	68 2f 04    	goto      0x2f68 <L0>
    102a:	00 00 00 
    102c:	68 2f 04    	goto      0x2f68 <L0>
    102e:	00 00 00 
    1030:	2c 17 04    	goto      0x172c <__T2Interrupt>
    1032:	00 00 00 
    1034:	5a 17 04    	goto      0x175a <__T3Interrupt>
    1036:	00 00 00 
    1038:	68 2f 04    	goto      0x2f68 <L0>
    103a:	00 00 00 
    103c:	68 2f 04    	goto      0x2f68 <L0>
    103e:	00 00 00 
    1040:	68 2f 04    	goto      0x2f68 <L0>
    1042:	00 00 00 
    1044:	68 2f 04    	goto      0x2f68 <L0>
    1046:	00 00 00 
    1048:	68 2f 04    	goto      0x2f68 <L0>
    104a:	00 00 00 
    104c:	68 2f 04    	goto      0x2f68 <L0>
    104e:	00 00 00 
    1050:	68 2f 04    	goto      0x2f68 <L0>
    1052:	00 00 00 
    1054:	68 2f 04    	goto      0x2f68 <L0>
    1056:	00 00 00 
    1058:	68 2f 04    	goto      0x2f68 <L0>
    105a:	00 00 00 
    105c:	68 2f 04    	goto      0x2f68 <L0>
    105e:	00 00 00 
    1060:	68 2f 04    	goto      0x2f68 <L0>
    1062:	00 00 00 
    1064:	68 2f 04    	goto      0x2f68 <L0>
    1066:	00 00 00 
    1068:	68 2f 04    	goto      0x2f68 <L0>
    106a:	00 00 00 
    106c:	68 2f 04    	goto      0x2f68 <L0>
    106e:	00 00 00 
    1070:	88 17 04    	goto      0x1788 <__T4Interrupt>
    1072:	00 00 00 
    1074:	b6 17 04    	goto      0x17b6 <__T5Interrupt>
    1076:	00 00 00 
    1078:	68 2f 04    	goto      0x2f68 <L0>
    107a:	00 00 00 
    107c:	68 2f 04    	goto      0x2f68 <L0>
    107e:	00 00 00 
    1080:	68 2f 04    	goto      0x2f68 <L0>
    1082:	00 00 00 
    1084:	68 2f 04    	goto      0x2f68 <L0>
    1086:	00 00 00 
    1088:	68 2f 04    	goto      0x2f68 <L0>
    108a:	00 00 00 
    108c:	68 2f 04    	goto      0x2f68 <L0>
    108e:	00 00 00 
    1090:	68 2f 04    	goto      0x2f68 <L0>
    1092:	00 00 00 
    1094:	68 2f 04    	goto      0x2f68 <L0>
    1096:	00 00 00 
    1098:	68 2f 04    	goto      0x2f68 <L0>
    109a:	00 00 00 
    109c:	68 2f 04    	goto      0x2f68 <L0>
    109e:	00 00 00 
    10a0:	68 2f 04    	goto      0x2f68 <L0>
    10a2:	00 00 00 
    10a4:	68 2f 04    	goto      0x2f68 <L0>
    10a6:	00 00 00 
    10a8:	68 2f 04    	goto      0x2f68 <L0>
    10aa:	00 00 00 
    10ac:	68 2f 04    	goto      0x2f68 <L0>
    10ae:	00 00 00 
    10b0:	68 2f 04    	goto      0x2f68 <L0>
    10b2:	00 00 00 
    10b4:	68 2f 04    	goto      0x2f68 <L0>
    10b6:	00 00 00 
    10b8:	68 2f 04    	goto      0x2f68 <L0>
    10ba:	00 00 00 
    10bc:	68 2f 04    	goto      0x2f68 <L0>
    10be:	00 00 00 
    10c0:	68 2f 04    	goto      0x2f68 <L0>
    10c2:	00 00 00 
    10c4:	68 2f 04    	goto      0x2f68 <L0>
    10c6:	00 00 00 
    10c8:	68 2f 04    	goto      0x2f68 <L0>
    10ca:	00 00 00 
    10cc:	68 2f 04    	goto      0x2f68 <L0>
    10ce:	00 00 00 
    10d0:	68 2f 04    	goto      0x2f68 <L0>
    10d2:	00 00 00 
    10d4:	68 2f 04    	goto      0x2f68 <L0>
    10d6:	00 00 00 
    10d8:	68 2f 04    	goto      0x2f68 <L0>
    10da:	00 00 00 
    10dc:	68 2f 04    	goto      0x2f68 <L0>
    10de:	00 00 00 
    10e0:	68 2f 04    	goto      0x2f68 <L0>
    10e2:	00 00 00 
    10e4:	68 2f 04    	goto      0x2f68 <L0>
    10e6:	00 00 00 
    10e8:	68 2f 04    	goto      0x2f68 <L0>
    10ea:	00 00 00 
    10ec:	68 2f 04    	goto      0x2f68 <L0>
    10ee:	00 00 00 
    10f0:	68 2f 04    	goto      0x2f68 <L0>
    10f2:	00 00 00 
    10f4:	68 2f 04    	goto      0x2f68 <L0>
    10f6:	00 00 00 
    10f8:	68 2f 04    	goto      0x2f68 <L0>
    10fa:	00 00 00 
    10fc:	68 2f 04    	goto      0x2f68 <L0>
    10fe:	00 00 00 
    1100:	68 2f 04    	goto      0x2f68 <L0>
    1102:	00 00 00 
    1104:	68 2f 04    	goto      0x2f68 <L0>
    1106:	00 00 00 
    1108:	68 2f 04    	goto      0x2f68 <L0>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	68 2f 04    	goto      0x2f68 <L0>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000964a <_Device>:
    964a:	12 01       	.word 0x112
    964c:	00 02       	.word 0x200
    964e:	00 00       	.word 0
    9650:	00 40       	.word 0x4000
    9652:	66 66       	.word 0x6666
    9654:	03 00       	.word 0x3
    9656:	00 00       	.word 0
    9658:	01 02       	.word 0x201
    965a:	00 01       	.word 0x100

0000965c <_Configuration1>:
    965c:	09 02       	.word 0x209
    965e:	12 00       	.word 0x12
    9660:	01 01       	.word 0x101
    9662:	00 a0       	.word 0xa000
    9664:	32 09       	.word 0x932
    9666:	04 00       	.word 0x4
    9668:	00 00       	.word 0
    966a:	ff 00       	.word 0xff
    966c:	ff 00       	.word 0xff

0000966e <_String0>:
    966e:	04 03       	.word 0x304
    9670:	09 04       	.word 0x409

00009672 <_String1>:
    9672:	1a 03       	.word 0x31a
    9674:	4f 00       	.word 0x4f
    9676:	6c 00       	.word 0x6c
    9678:	69 00       	.word 0x69
    967a:	6e 00       	.word 0x6e
    967c:	20 00       	.word 0x20
    967e:	43 00       	.word 0x43
    9680:	6f 00       	.word 0x6f
    9682:	6c 00       	.word 0x6c
    9684:	6c 00       	.word 0x6c
    9686:	65 00       	.word 0x65
    9688:	67 00       	.word 0x67
    968a:	65 00       	.word 0x65

0000968c <_String2>:
    968c:	20 03       	.word 0x320
    968e:	50 00       	.word 0x50
    9690:	49 00       	.word 0x49
    9692:	43 00       	.word 0x43
    9694:	32 00       	.word 0x32
    9696:	34 00       	.word 0x34
    9698:	46 00       	.word 0x46
    969a:	4a 00       	.word 0x4a
    969c:	31 00       	.word 0x31
    969e:	32 00       	.word 0x32
    96a0:	38 00       	.word 0x38
    96a2:	47 00       	.word 0x47
    96a4:	42 00       	.word 0x42
    96a6:	32 00       	.word 0x32
    96a8:	30 00       	.word 0x30
    96aa:	36 00       	.word 0x36
Disassembly of section .text:

000016ac <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    16ac:	02 00 fa    	lnk       #0x2
    16ae:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    16b0:	1e 00 78    	mov.w     [w14], w0
    16b2:	01 02 07    	rcall     0x1ab6 <_timer_lower> <L0> <.LFB16> <.LFE15>
    if (self->every) {
    16b4:	1e 00 78    	mov.w     [w14], w0
    16b6:	10 08 90    	mov.w     [w0+18], w0
    16b8:	00 00 e0    	cp0.w     w0
    16ba:	05 00 32    	bra       Z, 0x16c6 <.L2>
        self->every(self);
    16bc:	1e 00 78    	mov.w     [w14], w0
    16be:	90 08 90    	mov.w     [w0+18], w1
    16c0:	1e 00 78    	mov.w     [w14], w0
    16c2:	01 00 01    	call      w1
    16c4:	1a 00 37    	bra       0x16fa <.L1>

000016c6 <.L2>:
    } else if (self->after) {
    16c6:	1e 00 78    	mov.w     [w14], w0
    16c8:	20 08 90    	mov.w     [w0+20], w0
    16ca:	00 00 e0    	cp0.w     w0
    16cc:	14 00 32    	bra       Z, 0x16f6 <.L4>
        if (self->aftercount) {
    16ce:	1e 00 78    	mov.w     [w14], w0
    16d0:	00 08 90    	mov.w     [w0+16], w0
    16d2:	00 00 e0    	cp0.w     w0
    16d4:	0a 00 32    	bra       Z, 0x16ea <.L5>
            self->after(self);
    16d6:	1e 00 78    	mov.w     [w14], w0
    16d8:	a0 08 90    	mov.w     [w0+20], w1
    16da:	1e 00 78    	mov.w     [w14], w0
    16dc:	01 00 01    	call      w1
            self->aftercount--;
    16de:	1e 00 78    	mov.w     [w14], w0
    16e0:	00 08 90    	mov.w     [w0+16], w0
    16e2:	80 00 e9    	dec.w     w0, w1
    16e4:	1e 00 78    	mov.w     [w14], w0
    16e6:	01 08 98    	mov.w     w1, [w0+16]
    16e8:	08 00 37    	bra       0x16fa <.L1>

000016ea <.L5>:
        } else {
            timer_disableInterrupt(self);
    16ea:	1e 00 78    	mov.w     [w14], w0
    16ec:	0c 02 07    	rcall     0x1b06 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
            self->after = NULL;
    16ee:	1e 00 78    	mov.w     [w14], w0
    16f0:	80 00 eb    	clr.w     w1
    16f2:	21 08 98    	mov.w     w1, [w0+20]
    16f4:	02 00 37    	bra       0x16fa <.L1>

000016f6 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    16f6:	1e 00 78    	mov.w     [w14], w0
    16f8:	06 02 07    	rcall     0x1b06 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>

000016fa <.L1>:
    }
}
    16fa:	00 80 fa    	ulnk      
    16fc:	00 00 06    	return    

000016fe <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    16fe:	36 00 f8    	push      0x36
    1700:	80 9f be    	mov.d     w0, [w15++]
    1702:	82 9f be    	mov.d     w2, [w15++]
    1704:	84 9f be    	mov.d     w4, [w15++]
    1706:	86 9f be    	mov.d     w6, [w15++]
    1708:	32 00 f8    	push      0x32
    170a:	34 00 f8    	push      0x34
    170c:	10 00 20    	mov.w     #0x1, w0
    170e:	a0 01 88    	mov.w     w0, 0x34
    1710:	00 20 20    	mov.w     #0x200, w0
    1712:	90 01 88    	mov.w     w0, 0x32
    1714:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer1);
    1716:	c0 b5 20    	mov.w     #0xb5c, w0
    1718:	c9 ff 07    	rcall     0x16ac <_timer_serviceInterrupt> <.L0> <.LFB0> <.Ltext0>
}
    171a:	00 80 fa    	ulnk      
    171c:	34 00 f9    	pop       0x34
    171e:	32 00 f9    	pop       0x32
    1720:	4f 03 be    	mov.d     [--w15], w6
    1722:	4f 02 be    	mov.d     [--w15], w4
    1724:	4f 01 be    	mov.d     [--w15], w2
    1726:	4f 00 be    	mov.d     [--w15], w0
    1728:	36 00 f9    	pop       0x36
    172a:	00 40 06    	retfie    

0000172c <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    172c:	36 00 f8    	push      0x36
    172e:	80 9f be    	mov.d     w0, [w15++]
    1730:	82 9f be    	mov.d     w2, [w15++]
    1732:	84 9f be    	mov.d     w4, [w15++]
    1734:	86 9f be    	mov.d     w6, [w15++]
    1736:	32 00 f8    	push      0x32
    1738:	34 00 f8    	push      0x34
    173a:	10 00 20    	mov.w     #0x1, w0
    173c:	a0 01 88    	mov.w     w0, 0x34
    173e:	00 20 20    	mov.w     #0x200, w0
    1740:	90 01 88    	mov.w     w0, 0x32
    1742:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer2);
    1744:	20 b7 20    	mov.w     #0xb72, w0
    1746:	b2 ff 07    	rcall     0x16ac <_timer_serviceInterrupt> <.L0> <.LFB0> <.Ltext0>
}
    1748:	00 80 fa    	ulnk      
    174a:	34 00 f9    	pop       0x34
    174c:	32 00 f9    	pop       0x32
    174e:	4f 03 be    	mov.d     [--w15], w6
    1750:	4f 02 be    	mov.d     [--w15], w4
    1752:	4f 01 be    	mov.d     [--w15], w2
    1754:	4f 00 be    	mov.d     [--w15], w0
    1756:	36 00 f9    	pop       0x36
    1758:	00 40 06    	retfie    

0000175a <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    175a:	36 00 f8    	push      0x36
    175c:	80 9f be    	mov.d     w0, [w15++]
    175e:	82 9f be    	mov.d     w2, [w15++]
    1760:	84 9f be    	mov.d     w4, [w15++]
    1762:	86 9f be    	mov.d     w6, [w15++]
    1764:	32 00 f8    	push      0x32
    1766:	34 00 f8    	push      0x34
    1768:	10 00 20    	mov.w     #0x1, w0
    176a:	a0 01 88    	mov.w     w0, 0x34
    176c:	00 20 20    	mov.w     #0x200, w0
    176e:	90 01 88    	mov.w     w0, 0x32
    1770:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer3);
    1772:	80 b8 20    	mov.w     #0xb88, w0
    1774:	9b ff 07    	rcall     0x16ac <_timer_serviceInterrupt> <.L0> <.LFB0> <.Ltext0>
}
    1776:	00 80 fa    	ulnk      
    1778:	34 00 f9    	pop       0x34
    177a:	32 00 f9    	pop       0x32
    177c:	4f 03 be    	mov.d     [--w15], w6
    177e:	4f 02 be    	mov.d     [--w15], w4
    1780:	4f 01 be    	mov.d     [--w15], w2
    1782:	4f 00 be    	mov.d     [--w15], w0
    1784:	36 00 f9    	pop       0x36
    1786:	00 40 06    	retfie    

00001788 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    1788:	36 00 f8    	push      0x36
    178a:	80 9f be    	mov.d     w0, [w15++]
    178c:	82 9f be    	mov.d     w2, [w15++]
    178e:	84 9f be    	mov.d     w4, [w15++]
    1790:	86 9f be    	mov.d     w6, [w15++]
    1792:	32 00 f8    	push      0x32
    1794:	34 00 f8    	push      0x34
    1796:	10 00 20    	mov.w     #0x1, w0
    1798:	a0 01 88    	mov.w     w0, 0x34
    179a:	00 20 20    	mov.w     #0x200, w0
    179c:	90 01 88    	mov.w     w0, 0x32
    179e:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer4);
    17a0:	e0 b9 20    	mov.w     #0xb9e, w0
    17a2:	84 ff 07    	rcall     0x16ac <_timer_serviceInterrupt> <.L0> <.LFB0> <.Ltext0>
}
    17a4:	00 80 fa    	ulnk      
    17a6:	34 00 f9    	pop       0x34
    17a8:	32 00 f9    	pop       0x32
    17aa:	4f 03 be    	mov.d     [--w15], w6
    17ac:	4f 02 be    	mov.d     [--w15], w4
    17ae:	4f 01 be    	mov.d     [--w15], w2
    17b0:	4f 00 be    	mov.d     [--w15], w0
    17b2:	36 00 f9    	pop       0x36
    17b4:	00 40 06    	retfie    

000017b6 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    17b6:	36 00 f8    	push      0x36
    17b8:	80 9f be    	mov.d     w0, [w15++]
    17ba:	82 9f be    	mov.d     w2, [w15++]
    17bc:	84 9f be    	mov.d     w4, [w15++]
    17be:	86 9f be    	mov.d     w6, [w15++]
    17c0:	32 00 f8    	push      0x32
    17c2:	34 00 f8    	push      0x34
    17c4:	10 00 20    	mov.w     #0x1, w0
    17c6:	a0 01 88    	mov.w     w0, 0x34
    17c8:	00 20 20    	mov.w     #0x200, w0
    17ca:	90 01 88    	mov.w     w0, 0x32
    17cc:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer5);
    17ce:	40 bb 20    	mov.w     #0xbb4, w0
    17d0:	6d ff 07    	rcall     0x16ac <_timer_serviceInterrupt> <.L0> <.LFB0> <.Ltext0>
}
    17d2:	00 80 fa    	ulnk      
    17d4:	34 00 f9    	pop       0x34
    17d6:	32 00 f9    	pop       0x32
    17d8:	4f 03 be    	mov.d     [--w15], w6
    17da:	4f 02 be    	mov.d     [--w15], w4
    17dc:	4f 01 be    	mov.d     [--w15], w2
    17de:	4f 00 be    	mov.d     [--w15], w0
    17e0:	36 00 f9    	pop       0x36
    17e2:	00 40 06    	retfie    

000017e4 <_init_timer>:

void init_timer(void) {
    17e4:	00 00 fa    	lnk       #0x0
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    17e6:	b0 00 20    	mov.w     #0xb, w0
    17e8:	80 1f 78    	mov.w     w0, [w15++]
    17ea:	47 00 20    	mov.w     #0x4, w7
    17ec:	36 c0 b3    	mov.b     #0x3, w6
    17ee:	45 09 20    	mov.w     #0x94, w5
    17f0:	44 08 20    	mov.w     #0x84, w4
    17f2:	03 10 20    	mov.w     #0x100, w3
    17f4:	22 10 20    	mov.w     #0x102, w2
    17f6:	41 10 20    	mov.w     #0x104, w1
    17f8:	c0 b5 20    	mov.w     #0xb5c, w0
    17fa:	33 00 07    	rcall     0x1862 <_timer_init> <L0> <.LFB7> <.LFE6>
    17fc:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    17fe:	c0 00 20    	mov.w     #0xc, w0
    1800:	80 1f 78    	mov.w     w0, [w15++]
    1802:	80 03 eb    	clr.w     w7
    1804:	76 c0 b3    	mov.b     #0x7, w6
    1806:	45 09 20    	mov.w     #0x94, w5
    1808:	44 08 20    	mov.w     #0x84, w4
    180a:	63 10 20    	mov.w     #0x106, w3
    180c:	c2 10 20    	mov.w     #0x10c, w2
    180e:	01 11 20    	mov.w     #0x110, w1
    1810:	20 b7 20    	mov.w     #0xb72, w0
    1812:	27 00 07    	rcall     0x1862 <_timer_init> <L0> <.LFB7> <.LFE6>
    1814:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    1816:	d0 00 20    	mov.w     #0xd, w0
    1818:	80 1f 78    	mov.w     w0, [w15++]
    181a:	17 00 20    	mov.w     #0x1, w7
    181c:	86 c0 b3    	mov.b     #0x8, w6
    181e:	45 09 20    	mov.w     #0x94, w5
    1820:	44 08 20    	mov.w     #0x84, w4
    1822:	a3 10 20    	mov.w     #0x10a, w3
    1824:	e2 10 20    	mov.w     #0x10e, w2
    1826:	21 11 20    	mov.w     #0x112, w1
    1828:	80 b8 20    	mov.w     #0xb88, w0
    182a:	1b 00 07    	rcall     0x1862 <_timer_init> <L0> <.LFB7> <.LFE6>
    182c:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    182e:	e0 00 20    	mov.w     #0xe, w0
    1830:	80 1f 78    	mov.w     w0, [w15++]
    1832:	27 00 20    	mov.w     #0x2, w7
    1834:	b6 c0 b3    	mov.b     #0xb, w6
    1836:	65 09 20    	mov.w     #0x96, w5
    1838:	64 08 20    	mov.w     #0x86, w4
    183a:	43 11 20    	mov.w     #0x114, w3
    183c:	a2 11 20    	mov.w     #0x11a, w2
    183e:	e1 11 20    	mov.w     #0x11e, w1
    1840:	e0 b9 20    	mov.w     #0xb9e, w0
    1842:	0f 00 07    	rcall     0x1862 <_timer_init> <L0> <.LFB7> <.LFE6>
    1844:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    1846:	f0 00 20    	mov.w     #0xf, w0
    1848:	80 1f 78    	mov.w     w0, [w15++]
    184a:	37 00 20    	mov.w     #0x3, w7
    184c:	c6 c0 b3    	mov.b     #0xc, w6
    184e:	65 09 20    	mov.w     #0x96, w5
    1850:	64 08 20    	mov.w     #0x86, w4
    1852:	83 11 20    	mov.w     #0x118, w3
    1854:	c2 11 20    	mov.w     #0x11c, w2
    1856:	01 12 20    	mov.w     #0x120, w1
    1858:	40 bb 20    	mov.w     #0xbb4, w0
    185a:	03 00 07    	rcall     0x1862 <_timer_init> <L0> <.LFB7> <.LFE6>
    185c:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    185e:	00 80 fa    	ulnk      
    1860:	00 00 06    	return    

00001862 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    1862:	10 00 fa    	lnk       #0x10
    1864:	00 0f 78    	mov.w     w0, [w14]
    1866:	11 07 98    	mov.w     w1, [w14+2]
    1868:	22 07 98    	mov.w     w2, [w14+4]
    186a:	33 07 98    	mov.w     w3, [w14+6]
    186c:	44 07 98    	mov.w     w4, [w14+8]
    186e:	55 07 98    	mov.w     w5, [w14+10]
    1870:	46 4f 98    	mov.b     w6, [w14+12]
    1872:	77 07 98    	mov.w     w7, [w14+14]
    self->TxCON = TxCON;
    1874:	1e 00 78    	mov.w     [w14], w0
    1876:	9e 00 90    	mov.w     [w14+2], w1
    1878:	01 08 78    	mov.w     w1, [w0]
    self->PRx = PRx;
    187a:	1e 00 78    	mov.w     [w14], w0
    187c:	ae 00 90    	mov.w     [w14+4], w1
    187e:	11 00 98    	mov.w     w1, [w0+2]
    self->TMRx = TMRx;
    1880:	1e 00 78    	mov.w     [w14], w0
    1882:	be 00 90    	mov.w     [w14+6], w1
    1884:	21 00 98    	mov.w     w1, [w0+4]
    self->IFSy = IFSy;
    1886:	1e 00 78    	mov.w     [w14], w0
    1888:	ce 00 90    	mov.w     [w14+8], w1
    188a:	31 00 98    	mov.w     w1, [w0+6]
    self->IECy = IECy;
    188c:	1e 00 78    	mov.w     [w14], w0
    188e:	de 00 90    	mov.w     [w14+10], w1
    1890:	41 00 98    	mov.w     w1, [w0+8]
    self->flagbit = flagbit;
    1892:	1e 00 78    	mov.w     [w14], w0
    1894:	ce 48 90    	mov.b     [w14+12], w1
    1896:	21 48 98    	mov.b     w1, [w0+10]
    self->octselnum = octselnum;
    1898:	1e 00 78    	mov.w     [w14], w0
    189a:	fe 00 90    	mov.w     [w14+14], w1
    189c:	61 00 98    	mov.w     w1, [w0+12]
    self->ocsyncselnum = ocsyncselnum;
    189e:	1e 00 78    	mov.w     [w14], w0
    18a0:	ce b8 97    	mov.w     [w14-8], w1
    18a2:	71 00 98    	mov.w     w1, [w0+14]
    self->aftercount = 0;
    18a4:	1e 00 78    	mov.w     [w14], w0
    18a6:	80 00 eb    	clr.w     w1
    18a8:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    18aa:	1e 00 78    	mov.w     [w14], w0
    18ac:	80 00 eb    	clr.w     w1
    18ae:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    18b0:	1e 00 78    	mov.w     [w14], w0
    18b2:	80 00 eb    	clr.w     w1
    18b4:	21 08 98    	mov.w     w1, [w0+20]
}
    18b6:	00 80 fa    	ulnk      
    18b8:	00 00 06    	return    

000018ba <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    18ba:	06 00 fa    	lnk       #0x6
    18bc:	88 1f 78    	mov.w     w8, [w15++]
    18be:	00 0f 78    	mov.w     w0, [w14]
    18c0:	12 07 98    	mov.w     w2, [w14+2]
    18c2:	23 07 98    	mov.w     w3, [w14+4]
    if (period>(256.*65536.*TCY)) {
    18c4:	18 c0 b3    	mov.b     #0x1, w8
    18c6:	d2 7b 23    	mov.w     #0x37bd, w2
    18c8:	63 f8 23    	mov.w     #0x3f86, w3
    18ca:	1e 00 90    	mov.w     [w14+2], w0
    18cc:	ae 00 90    	mov.w     [w14+4], w1
    18ce:	5f fd 07    	rcall     0x138e <___gesf2> <___gtsf2>
    18d0:	00 00 e0    	cp0.w     w0
    18d2:	01 00 3c    	bra       GT, 0x18d6 <.L14>
    18d4:	00 44 eb    	clr.b     w8

000018d6 <.L14>:
    18d6:	08 04 e0    	cp0.b     w8
    18d8:	69 00 3a    	bra       NZ, 0x19ac <.L23>
        return;
    } else if (period>(64.*65536.*TCY)) {
    18da:	18 c0 b3    	mov.b     #0x1, w8
    18dc:	d2 7b 23    	mov.w     #0x37bd, w2
    18de:	63 e8 23    	mov.w     #0x3e86, w3
    18e0:	1e 00 90    	mov.w     [w14+2], w0
    18e2:	ae 00 90    	mov.w     [w14+4], w1
    18e4:	54 fd 07    	rcall     0x138e <___gesf2> <___gtsf2>
    18e6:	00 00 e0    	cp0.w     w0
    18e8:	01 00 3c    	bra       GT, 0x18ec <.L17>
    18ea:	00 44 eb    	clr.b     w8

000018ec <.L17>:
    18ec:	08 04 e0    	cp0.b     w8
    18ee:	12 00 32    	bra       Z, 0x1914 <.L18>
        timer_stop(self);
    18f0:	1e 00 78    	mov.w     [w14], w0
    18f2:	c4 00 07    	rcall     0x1a7c <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0030);
    18f4:	1e 00 78    	mov.w     [w14], w0
    18f6:	10 00 78    	mov.w     [w0], w0
    18f8:	01 03 20    	mov.w     #0x30, w1
    18fa:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    18fc:	1e 00 78    	mov.w     [w14], w0
    18fe:	10 04 90    	mov.w     [w0+2], w8
    1900:	02 40 22    	mov.w     #0x2400, w2
    1902:	43 77 24    	mov.w     #0x4774, w3
    1904:	1e 00 90    	mov.w     [w14+2], w0
    1906:	ae 00 90    	mov.w     [w14+4], w1
    1908:	b4 fd 07    	rcall     0x1472 <___mulsf3>
    190a:	43 fd 07    	rcall     0x1392 <___fixunssfsi>
    190c:	00 00 78    	mov.w     w0, w0
    190e:	00 00 e9    	dec.w     w0, w0
    1910:	00 0c 78    	mov.w     w0, [w8]
    1912:	4d 00 37    	bra       0x19ae <.L13>

00001914 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    1914:	18 c0 b3    	mov.b     #0x1, w8
    1916:	d2 7b 23    	mov.w     #0x37bd, w2
    1918:	63 d0 23    	mov.w     #0x3d06, w3
    191a:	1e 00 90    	mov.w     [w14+2], w0
    191c:	ae 00 90    	mov.w     [w14+4], w1
    191e:	37 fd 07    	rcall     0x138e <___gesf2> <___gtsf2>
    1920:	00 00 e0    	cp0.w     w0
    1922:	01 00 3c    	bra       GT, 0x1926 <.L19>
    1924:	00 44 eb    	clr.b     w8

00001926 <.L19>:
    1926:	08 04 e0    	cp0.b     w8
    1928:	12 00 32    	bra       Z, 0x194e <.L20>
        timer_stop(self);
    192a:	1e 00 78    	mov.w     [w14], w0
    192c:	a7 00 07    	rcall     0x1a7c <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0020);
    192e:	1e 00 78    	mov.w     [w14], w0
    1930:	10 00 78    	mov.w     [w0], w0
    1932:	01 02 20    	mov.w     #0x20, w1
    1934:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    1936:	1e 00 78    	mov.w     [w14], w0
    1938:	10 04 90    	mov.w     [w0+2], w8
    193a:	02 40 22    	mov.w     #0x2400, w2
    193c:	43 87 24    	mov.w     #0x4874, w3
    193e:	1e 00 90    	mov.w     [w14+2], w0
    1940:	ae 00 90    	mov.w     [w14+4], w1
    1942:	97 fd 07    	rcall     0x1472 <___mulsf3>
    1944:	26 fd 07    	rcall     0x1392 <___fixunssfsi>
    1946:	00 00 78    	mov.w     w0, w0
    1948:	00 00 e9    	dec.w     w0, w0
    194a:	00 0c 78    	mov.w     w0, [w8]
    194c:	30 00 37    	bra       0x19ae <.L13>

0000194e <.L20>:
    } else if (period>(65536.*TCY)) {
    194e:	18 c0 b3    	mov.b     #0x1, w8
    1950:	d2 7b 23    	mov.w     #0x37bd, w2
    1952:	63 b8 23    	mov.w     #0x3b86, w3
    1954:	1e 00 90    	mov.w     [w14+2], w0
    1956:	ae 00 90    	mov.w     [w14+4], w1
    1958:	1a fd 07    	rcall     0x138e <___gesf2> <___gtsf2>
    195a:	00 00 e0    	cp0.w     w0
    195c:	01 00 3c    	bra       GT, 0x1960 <.L21>
    195e:	00 44 eb    	clr.b     w8

00001960 <.L21>:
    1960:	08 04 e0    	cp0.b     w8
    1962:	12 00 32    	bra       Z, 0x1988 <.L22>
        timer_stop(self);
    1964:	1e 00 78    	mov.w     [w14], w0
    1966:	8a 00 07    	rcall     0x1a7c <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0010);
    1968:	1e 00 78    	mov.w     [w14], w0
    196a:	10 00 78    	mov.w     [w0], w0
    196c:	01 01 20    	mov.w     #0x10, w1
    196e:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    1970:	1e 00 78    	mov.w     [w14], w0
    1972:	10 04 90    	mov.w     [w0+2], w8
    1974:	02 40 22    	mov.w     #0x2400, w2
    1976:	43 9f 24    	mov.w     #0x49f4, w3
    1978:	1e 00 90    	mov.w     [w14+2], w0
    197a:	ae 00 90    	mov.w     [w14+4], w1
    197c:	7a fd 07    	rcall     0x1472 <___mulsf3>
    197e:	09 fd 07    	rcall     0x1392 <___fixunssfsi>
    1980:	00 00 78    	mov.w     w0, w0
    1982:	00 00 e9    	dec.w     w0, w0
    1984:	00 0c 78    	mov.w     w0, [w8]
    1986:	13 00 37    	bra       0x19ae <.L13>

00001988 <.L22>:
    } else {
        timer_stop(self);
    1988:	1e 00 78    	mov.w     [w14], w0
    198a:	78 00 07    	rcall     0x1a7c <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0000);
    198c:	1e 00 78    	mov.w     [w14], w0
    198e:	10 00 78    	mov.w     [w0], w0
    1990:	80 00 eb    	clr.w     w1
    1992:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    1994:	1e 00 78    	mov.w     [w14], w0
    1996:	10 04 90    	mov.w     [w0+2], w8
    1998:	02 40 22    	mov.w     #0x2400, w2
    199a:	43 b7 24    	mov.w     #0x4b74, w3
    199c:	1e 00 90    	mov.w     [w14+2], w0
    199e:	ae 00 90    	mov.w     [w14+4], w1
    19a0:	68 fd 07    	rcall     0x1472 <___mulsf3>
    19a2:	f7 fc 07    	rcall     0x1392 <___fixunssfsi>
    19a4:	00 00 78    	mov.w     w0, w0
    19a6:	00 00 e9    	dec.w     w0, w0
    19a8:	00 0c 78    	mov.w     w0, [w8]
    19aa:	01 00 37    	bra       0x19ae <.L13>

000019ac <.L23>:
    19ac:	00 00 00    	nop       

000019ae <.L13>:
    }
}
    19ae:	4f 04 78    	mov.w     [--w15], w8
    19b0:	00 80 fa    	ulnk      
    19b2:	00 00 06    	return    

000019b4 <_timer_period>:

float timer_period(_TIMER *self) {
    19b4:	04 00 fa    	lnk       #0x4
    19b6:	88 9f be    	mov.d     w8, [w15++]
    19b8:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    19ba:	1e 00 90    	mov.w     [w14+2], w0
    19bc:	10 00 78    	mov.w     [w0], w0
    19be:	90 00 78    	mov.w     [w0], w1
    19c0:	00 03 20    	mov.w     #0x30, w0
    19c2:	00 80 60    	and.w     w1, w0, w0
    19c4:	44 00 de    	lsr.w     w0, #0x4, w0
    19c6:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    19c8:	1e 00 78    	mov.w     [w14], w0
    19ca:	c2 00 dd    	sl.w      w0, #0x2, w1
    19cc:	c0 c0 20    	mov.w     #0xc0c, w0
    19ce:	00 80 40    	add.w     w1, w0, w0
    19d0:	10 04 be    	mov.d     [w0], w8
    19d2:	1e 00 90    	mov.w     [w14+2], w0
    19d4:	10 00 90    	mov.w     [w0+2], w0
    19d6:	10 00 78    	mov.w     [w0], w0
    19d8:	80 00 eb    	clr.w     w1
    19da:	f6 fc 07    	rcall     0x13c8 <___floatunsisf>
    19dc:	02 00 20    	mov.w     #0x0, w2
    19de:	03 f8 23    	mov.w     #0x3f80, w3
    19e0:	35 fc 07    	rcall     0x124c <___addsf3>
    19e2:	00 01 be    	mov.d     w0, w2
    19e4:	08 00 be    	mov.d     w8, w0
    19e6:	45 fd 07    	rcall     0x1472 <___mulsf3>
}
    19e8:	4f 04 be    	mov.d     [--w15], w8
    19ea:	00 80 fa    	ulnk      
    19ec:	00 00 06    	return    

000019ee <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    19ee:	06 00 fa    	lnk       #0x6
    19f0:	00 0f 78    	mov.w     w0, [w14]
    19f2:	12 07 98    	mov.w     w2, [w14+2]
    19f4:	23 07 98    	mov.w     w3, [w14+4]
    timer_setPeriod(self, 1./freq);
    19f6:	1e 01 90    	mov.w     [w14+2], w2
    19f8:	ae 01 90    	mov.w     [w14+4], w3
    19fa:	00 00 20    	mov.w     #0x0, w0
    19fc:	01 f8 23    	mov.w     #0x3f80, w1
    19fe:	83 fc 07    	rcall     0x1306 <___divsf3>
    1a00:	00 01 be    	mov.d     w0, w2
    1a02:	1e 00 78    	mov.w     [w14], w0
    1a04:	5a ff 07    	rcall     0x18ba <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
}
    1a06:	00 80 fa    	ulnk      
    1a08:	00 00 06    	return    

00001a0a <_timer_freq>:

float timer_freq(_TIMER *self) {
    1a0a:	02 00 fa    	lnk       #0x2
    1a0c:	00 0f 78    	mov.w     w0, [w14]
    return 1./timer_period(self);
    1a0e:	1e 00 78    	mov.w     [w14], w0
    1a10:	d1 ff 07    	rcall     0x19b4 <_timer_period> <L0> <.LFB9> <.LFE8>
    1a12:	00 01 be    	mov.d     w0, w2
    1a14:	00 00 20    	mov.w     #0x0, w0
    1a16:	01 f8 23    	mov.w     #0x3f80, w1
    1a18:	76 fc 07    	rcall     0x1306 <___divsf3>
}
    1a1a:	00 80 fa    	ulnk      
    1a1c:	00 00 06    	return    

00001a1e <_timer_time>:

float timer_time(_TIMER *self) {
    1a1e:	04 00 fa    	lnk       #0x4
    1a20:	88 9f be    	mov.d     w8, [w15++]
    1a22:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    1a24:	1e 00 90    	mov.w     [w14+2], w0
    1a26:	10 00 78    	mov.w     [w0], w0
    1a28:	90 00 78    	mov.w     [w0], w1
    1a2a:	00 03 20    	mov.w     #0x30, w0
    1a2c:	00 80 60    	and.w     w1, w0, w0
    1a2e:	44 00 de    	lsr.w     w0, #0x4, w0
    1a30:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    1a32:	1e 00 78    	mov.w     [w14], w0
    1a34:	c2 00 dd    	sl.w      w0, #0x2, w1
    1a36:	c0 c0 20    	mov.w     #0xc0c, w0
    1a38:	00 80 40    	add.w     w1, w0, w0
    1a3a:	10 04 be    	mov.d     [w0], w8
    1a3c:	1e 00 90    	mov.w     [w14+2], w0
    1a3e:	10 00 90    	mov.w     [w0+2], w0
    1a40:	10 00 78    	mov.w     [w0], w0
    1a42:	80 00 eb    	clr.w     w1
    1a44:	c1 fc 07    	rcall     0x13c8 <___floatunsisf>
    1a46:	02 00 20    	mov.w     #0x0, w2
    1a48:	03 f8 23    	mov.w     #0x3f80, w3
    1a4a:	00 fc 07    	rcall     0x124c <___addsf3>
    1a4c:	00 01 be    	mov.d     w0, w2
    1a4e:	08 00 be    	mov.d     w8, w0
    1a50:	10 fd 07    	rcall     0x1472 <___mulsf3>
}
    1a52:	4f 04 be    	mov.d     [--w15], w8
    1a54:	00 80 fa    	ulnk      
    1a56:	00 00 06    	return    

00001a58 <_timer_start>:

void timer_start(_TIMER *self) {
    1a58:	02 00 fa    	lnk       #0x2
    1a5a:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    1a5c:	1e 00 78    	mov.w     [w14], w0
    1a5e:	2b 00 07    	rcall     0x1ab6 <_timer_lower> <L0> <.LFB16> <.LFE15>
    poke(self->TMRx, 0);
    1a60:	1e 00 78    	mov.w     [w14], w0
    1a62:	20 00 90    	mov.w     [w0+4], w0
    1a64:	80 00 eb    	clr.w     w1
    1a66:	01 08 78    	mov.w     w1, [w0]
    bitset(self->TxCON, 15);
    1a68:	1e 00 78    	mov.w     [w14], w0
    1a6a:	10 00 78    	mov.w     [w0], w0
    1a6c:	9e 00 78    	mov.w     [w14], w1
    1a6e:	91 00 78    	mov.w     [w1], w1
    1a70:	11 01 78    	mov.w     [w1], w2
    1a72:	01 00 28    	mov.w     #0x8000, w1
    1a74:	82 80 70    	ior.w     w1, w2, w1
    1a76:	01 08 78    	mov.w     w1, [w0]
}
    1a78:	00 80 fa    	ulnk      
    1a7a:	00 00 06    	return    

00001a7c <_timer_stop>:

void timer_stop(_TIMER *self) {
    1a7c:	02 00 fa    	lnk       #0x2
    1a7e:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->TxCON, 15);
    1a80:	1e 00 78    	mov.w     [w14], w0
    1a82:	10 00 78    	mov.w     [w0], w0
    1a84:	9e 00 78    	mov.w     [w14], w1
    1a86:	91 00 78    	mov.w     [w1], w1
    1a88:	11 01 78    	mov.w     [w1], w2
    1a8a:	f1 ff 27    	mov.w     #0x7fff, w1
    1a8c:	81 00 61    	and.w     w2, w1, w1
    1a8e:	01 08 78    	mov.w     w1, [w0]
}
    1a90:	00 80 fa    	ulnk      
    1a92:	00 00 06    	return    

00001a94 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    1a94:	02 00 fa    	lnk       #0x2
    1a96:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->IFSy, self->flagbit);
    1a98:	1e 00 78    	mov.w     [w14], w0
    1a9a:	30 00 90    	mov.w     [w0+6], w0
    1a9c:	90 00 78    	mov.w     [w0], w1
    1a9e:	1e 00 78    	mov.w     [w14], w0
    1aa0:	20 48 90    	mov.b     [w0+10], w0
    1aa2:	00 80 fb    	ze        w0, w0
    1aa4:	12 00 20    	mov.w     #0x1, w2
    1aa6:	00 10 dd    	sl.w      w2, w0, w0
    1aa8:	00 80 60    	and.w     w1, w0, w0
    1aaa:	00 f0 a7    	btsc.w    w0, #0xf
    1aac:	00 00 ea    	neg.w     w0, w0
    1aae:	00 00 ea    	neg.w     w0, w0
    1ab0:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    1ab2:	00 80 fa    	ulnk      
    1ab4:	00 00 06    	return    

00001ab6 <_timer_lower>:

void timer_lower(_TIMER *self) {
    1ab6:	02 00 fa    	lnk       #0x2
    1ab8:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IFSy, self->flagbit);
    1aba:	1e 00 78    	mov.w     [w14], w0
    1abc:	30 00 90    	mov.w     [w0+6], w0
    1abe:	9e 00 78    	mov.w     [w14], w1
    1ac0:	b1 00 90    	mov.w     [w1+6], w1
    1ac2:	11 01 78    	mov.w     [w1], w2
    1ac4:	9e 00 78    	mov.w     [w14], w1
    1ac6:	a1 48 90    	mov.b     [w1+10], w1
    1ac8:	81 80 fb    	ze        w1, w1
    1aca:	13 00 20    	mov.w     #0x1, w3
    1acc:	81 18 dd    	sl.w      w3, w1, w1
    1ace:	81 80 ea    	com.w     w1, w1
    1ad0:	81 00 61    	and.w     w2, w1, w1
    1ad2:	01 08 78    	mov.w     w1, [w0]
}
    1ad4:	00 80 fa    	ulnk      
    1ad6:	00 00 06    	return    

00001ad8 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    1ad8:	02 00 fa    	lnk       #0x2
    1ada:	00 0f 78    	mov.w     w0, [w14]
    return peek(self->TMRx);
    1adc:	1e 00 78    	mov.w     [w14], w0
    1ade:	20 00 90    	mov.w     [w0+4], w0
    1ae0:	10 00 78    	mov.w     [w0], w0
}
    1ae2:	00 80 fa    	ulnk      
    1ae4:	00 00 06    	return    

00001ae6 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    1ae6:	02 00 fa    	lnk       #0x2
    1ae8:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->IECy, self->flagbit);
    1aea:	1e 00 78    	mov.w     [w14], w0
    1aec:	40 00 90    	mov.w     [w0+8], w0
    1aee:	9e 00 78    	mov.w     [w14], w1
    1af0:	c1 00 90    	mov.w     [w1+8], w1
    1af2:	11 01 78    	mov.w     [w1], w2
    1af4:	9e 00 78    	mov.w     [w14], w1
    1af6:	a1 48 90    	mov.b     [w1+10], w1
    1af8:	81 80 fb    	ze        w1, w1
    1afa:	13 00 20    	mov.w     #0x1, w3
    1afc:	81 18 dd    	sl.w      w3, w1, w1
    1afe:	82 80 70    	ior.w     w1, w2, w1
    1b00:	01 08 78    	mov.w     w1, [w0]
}
    1b02:	00 80 fa    	ulnk      
    1b04:	00 00 06    	return    

00001b06 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    1b06:	02 00 fa    	lnk       #0x2
    1b08:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IECy, self->flagbit);
    1b0a:	1e 00 78    	mov.w     [w14], w0
    1b0c:	40 00 90    	mov.w     [w0+8], w0
    1b0e:	9e 00 78    	mov.w     [w14], w1
    1b10:	c1 00 90    	mov.w     [w1+8], w1
    1b12:	11 01 78    	mov.w     [w1], w2
    1b14:	9e 00 78    	mov.w     [w14], w1
    1b16:	a1 48 90    	mov.b     [w1+10], w1
    1b18:	81 80 fb    	ze        w1, w1
    1b1a:	13 00 20    	mov.w     #0x1, w3
    1b1c:	81 18 dd    	sl.w      w3, w1, w1
    1b1e:	81 80 ea    	com.w     w1, w1
    1b20:	81 00 61    	and.w     w2, w1, w1
    1b22:	01 08 78    	mov.w     w1, [w0]
}
    1b24:	00 80 fa    	ulnk      
    1b26:	00 00 06    	return    

00001b28 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    1b28:	08 00 fa    	lnk       #0x8
    1b2a:	00 0f 78    	mov.w     w0, [w14]
    1b2c:	12 07 98    	mov.w     w2, [w14+2]
    1b2e:	23 07 98    	mov.w     w3, [w14+4]
    1b30:	31 07 98    	mov.w     w1, [w14+6]
    timer_disableInterrupt(self);
    1b32:	1e 00 78    	mov.w     [w14], w0
    1b34:	e8 ff 07    	rcall     0x1b06 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, interval);
    1b36:	1e 01 90    	mov.w     [w14+2], w2
    1b38:	ae 01 90    	mov.w     [w14+4], w3
    1b3a:	1e 00 78    	mov.w     [w14], w0
    1b3c:	be fe 07    	rcall     0x18ba <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = 0;
    1b3e:	1e 00 78    	mov.w     [w14], w0
    1b40:	80 00 eb    	clr.w     w1
    1b42:	01 08 98    	mov.w     w1, [w0+16]
    self->every = callback;
    1b44:	1e 00 78    	mov.w     [w14], w0
    1b46:	be 00 90    	mov.w     [w14+6], w1
    1b48:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    1b4a:	1e 00 78    	mov.w     [w14], w0
    1b4c:	80 00 eb    	clr.w     w1
    1b4e:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    1b50:	1e 00 78    	mov.w     [w14], w0
    1b52:	c9 ff 07    	rcall     0x1ae6 <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    1b54:	1e 00 78    	mov.w     [w14], w0
    1b56:	80 ff 07    	rcall     0x1a58 <_timer_start> <L0> <.LFB13> <.LFE12>
}
    1b58:	00 80 fa    	ulnk      
    1b5a:	00 00 06    	return    

00001b5c <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    1b5c:	0a 00 fa    	lnk       #0xa
    1b5e:	00 0f 78    	mov.w     w0, [w14]
    1b60:	12 07 98    	mov.w     w2, [w14+2]
    1b62:	23 07 98    	mov.w     w3, [w14+4]
    1b64:	31 07 98    	mov.w     w1, [w14+6]
    1b66:	44 07 98    	mov.w     w4, [w14+8]
    timer_disableInterrupt(self);
    1b68:	1e 00 78    	mov.w     [w14], w0
    1b6a:	cd ff 07    	rcall     0x1b06 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, delay);
    1b6c:	1e 01 90    	mov.w     [w14+2], w2
    1b6e:	ae 01 90    	mov.w     [w14+4], w3
    1b70:	1e 00 78    	mov.w     [w14], w0
    1b72:	a3 fe 07    	rcall     0x18ba <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = num_times;
    1b74:	1e 00 78    	mov.w     [w14], w0
    1b76:	be 00 90    	mov.w     [w14+6], w1
    1b78:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    1b7a:	1e 00 78    	mov.w     [w14], w0
    1b7c:	80 00 eb    	clr.w     w1
    1b7e:	11 08 98    	mov.w     w1, [w0+18]
    self->after = callback;
    1b80:	1e 00 78    	mov.w     [w14], w0
    1b82:	ce 00 90    	mov.w     [w14+8], w1
    1b84:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    1b86:	1e 00 78    	mov.w     [w14], w0
    1b88:	ae ff 07    	rcall     0x1ae6 <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    1b8a:	1e 00 78    	mov.w     [w14], w0
    1b8c:	65 ff 07    	rcall     0x1a58 <_timer_start> <L0> <.LFB13> <.LFE12>
}
    1b8e:	00 80 fa    	ulnk      
    1b90:	00 00 06    	return    

00001b92 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    1b92:	02 00 fa    	lnk       #0x2
    1b94:	00 0f 78    	mov.w     w0, [w14]
    timer_disableInterrupt(self);
    1b96:	1e 00 78    	mov.w     [w14], w0
    1b98:	b6 ff 07    	rcall     0x1b06 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_lower(self);
    1b9a:	1e 00 78    	mov.w     [w14], w0
    1b9c:	8c ff 07    	rcall     0x1ab6 <_timer_lower> <L0> <.LFB16> <.LFE15>
    timer_stop(self);
    1b9e:	1e 00 78    	mov.w     [w14], w0
    1ba0:	6d ff 07    	rcall     0x1a7c <_timer_stop> <L0> <.LFB14> <.LFE13>
    self->aftercount = 0;
    1ba2:	1e 00 78    	mov.w     [w14], w0
    1ba4:	80 00 eb    	clr.w     w1
    1ba6:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    1ba8:	1e 00 78    	mov.w     [w14], w0
    1baa:	80 00 eb    	clr.w     w1
    1bac:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    1bae:	1e 00 78    	mov.w     [w14], w0
    1bb0:	80 00 eb    	clr.w     w1
    1bb2:	21 08 98    	mov.w     w1, [w0+20]
}
    1bb4:	00 80 fa    	ulnk      
    1bb6:	00 00 06    	return    

00001bb8 <_init_spi>:
    1bb8:	00 00 fa    	lnk       #0x0
    1bba:	80 00 20    	mov.w     #0x8, w0
    1bbc:	80 1f 78    	mov.w     w0, [w15++]
    1bbe:	77 00 20    	mov.w     #0x7, w7
    1bc0:	00 43 eb    	clr.b     w6
    1bc2:	85 6a 20    	mov.w     #0x6a8, w5
    1bc4:	84 24 20    	mov.w     #0x248, w4
    1bc6:	43 24 20    	mov.w     #0x244, w3
    1bc8:	22 24 20    	mov.w     #0x242, w2
    1bca:	01 24 20    	mov.w     #0x240, w1
    1bcc:	a0 bc 20    	mov.w     #0xbca, w0
    1bce:	1b 00 07    	rcall     0x1c06 <_spi_init> <L0> <.LFB1> <.LFE0>
    1bd0:	8f 87 e9    	dec2.w    w15, w15
    1bd2:	b0 00 20    	mov.w     #0xb, w0
    1bd4:	80 1f 78    	mov.w     w0, [w15++]
    1bd6:	a7 00 20    	mov.w     #0xa, w7
    1bd8:	00 43 eb    	clr.b     w6
    1bda:	c5 6a 20    	mov.w     #0x6ac, w5
    1bdc:	84 26 20    	mov.w     #0x268, w4
    1bde:	43 26 20    	mov.w     #0x264, w3
    1be0:	22 26 20    	mov.w     #0x262, w2
    1be2:	01 26 20    	mov.w     #0x260, w1
    1be4:	00 be 20    	mov.w     #0xbe0, w0
    1be6:	0f 00 07    	rcall     0x1c06 <_spi_init> <L0> <.LFB1> <.LFE0>
    1be8:	8f 87 e9    	dec2.w    w15, w15
    1bea:	10 02 20    	mov.w     #0x21, w0
    1bec:	80 1f 78    	mov.w     w0, [w15++]
    1bee:	07 02 20    	mov.w     #0x20, w7
    1bf0:	00 43 eb    	clr.b     w6
    1bf2:	85 6b 20    	mov.w     #0x6b8, w5
    1bf4:	84 28 20    	mov.w     #0x288, w4
    1bf6:	43 28 20    	mov.w     #0x284, w3
    1bf8:	22 28 20    	mov.w     #0x282, w2
    1bfa:	01 28 20    	mov.w     #0x280, w1
    1bfc:	60 bf 20    	mov.w     #0xbf6, w0
    1bfe:	03 00 07    	rcall     0x1c06 <_spi_init> <L0> <.LFB1> <.LFE0>
    1c00:	8f 87 e9    	dec2.w    w15, w15
    1c02:	00 80 fa    	ulnk      
    1c04:	00 00 06    	return    

00001c06 <_spi_init>:
    1c06:	10 00 fa    	lnk       #0x10
    1c08:	00 0f 78    	mov.w     w0, [w14]
    1c0a:	11 07 98    	mov.w     w1, [w14+2]
    1c0c:	22 07 98    	mov.w     w2, [w14+4]
    1c0e:	33 07 98    	mov.w     w3, [w14+6]
    1c10:	44 07 98    	mov.w     w4, [w14+8]
    1c12:	55 07 98    	mov.w     w5, [w14+10]
    1c14:	46 4f 98    	mov.b     w6, [w14+12]
    1c16:	77 07 98    	mov.w     w7, [w14+14]
    1c18:	1e 00 78    	mov.w     [w14], w0
    1c1a:	9e 00 90    	mov.w     [w14+2], w1
    1c1c:	01 08 78    	mov.w     w1, [w0]
    1c1e:	1e 00 78    	mov.w     [w14], w0
    1c20:	ae 00 90    	mov.w     [w14+4], w1
    1c22:	11 00 98    	mov.w     w1, [w0+2]
    1c24:	1e 00 78    	mov.w     [w14], w0
    1c26:	be 00 90    	mov.w     [w14+6], w1
    1c28:	21 00 98    	mov.w     w1, [w0+4]
    1c2a:	1e 00 78    	mov.w     [w14], w0
    1c2c:	ce 00 90    	mov.w     [w14+8], w1
    1c2e:	31 00 98    	mov.w     w1, [w0+6]
    1c30:	1e 00 78    	mov.w     [w14], w0
    1c32:	de 00 90    	mov.w     [w14+10], w1
    1c34:	41 00 98    	mov.w     w1, [w0+8]
    1c36:	1e 00 78    	mov.w     [w14], w0
    1c38:	ce 48 90    	mov.b     [w14+12], w1
    1c3a:	21 48 98    	mov.b     w1, [w0+10]
    1c3c:	1e 00 78    	mov.w     [w14], w0
    1c3e:	fe 00 90    	mov.w     [w14+14], w1
    1c40:	61 00 98    	mov.w     w1, [w0+12]
    1c42:	1e 00 78    	mov.w     [w14], w0
    1c44:	ce b8 97    	mov.w     [w14-8], w1
    1c46:	71 00 98    	mov.w     w1, [w0+14]
    1c48:	1e 00 78    	mov.w     [w14], w0
    1c4a:	80 00 eb    	clr.w     w1
    1c4c:	01 08 98    	mov.w     w1, [w0+16]
    1c4e:	1e 00 78    	mov.w     [w14], w0
    1c50:	80 00 eb    	clr.w     w1
    1c52:	11 08 98    	mov.w     w1, [w0+18]
    1c54:	1e 00 78    	mov.w     [w14], w0
    1c56:	80 00 eb    	clr.w     w1
    1c58:	21 08 98    	mov.w     w1, [w0+20]
    1c5a:	00 80 fa    	ulnk      
    1c5c:	00 00 06    	return    

00001c5e <_spi_open>:
    1c5e:	1a 00 fa    	lnk       #0x1a
    1c60:	88 1f 78    	mov.w     w8, [w15++]
    1c62:	60 07 98    	mov.w     w0, [w14+12]
    1c64:	71 07 98    	mov.w     w1, [w14+14]
    1c66:	02 0f 98    	mov.w     w2, [w14+16]
    1c68:	13 0f 98    	mov.w     w3, [w14+18]
    1c6a:	24 0f 98    	mov.w     w4, [w14+20]
    1c6c:	35 0f 98    	mov.w     w5, [w14+22]
    1c6e:	06 5f 98    	mov.b     w6, [w14+24]
    1c70:	00 10 20    	mov.w     #0x100, w0
    1c72:	20 07 98    	mov.w     w0, [w14+4]
    1c74:	00 00 eb    	clr.w     w0
    1c76:	30 07 98    	mov.w     w0, [w14+6]
    1c78:	00 14 20    	mov.w     #0x140, w0
    1c7a:	40 07 98    	mov.w     w0, [w14+8]
    1c7c:	00 04 20    	mov.w     #0x40, w0
    1c7e:	50 07 98    	mov.w     w0, [w14+10]
    1c80:	7e 00 90    	mov.w     [w14+14], w0
    1c82:	60 00 90    	mov.w     [w0+12], w0
    1c84:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c86:	36 01 32    	bra       Z, 0x1ef4 <.L21>
    1c88:	0e 08 90    	mov.w     [w14+16], w0
    1c8a:	60 00 90    	mov.w     [w0+12], w0
    1c8c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c8e:	34 01 32    	bra       Z, 0x1ef8 <.L22>
    1c90:	1e 08 90    	mov.w     [w14+18], w0
    1c92:	60 00 90    	mov.w     [w0+12], w0
    1c94:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c96:	32 01 32    	bra       Z, 0x1efc <.L23>
    1c98:	7e 00 90    	mov.w     [w14+14], w0
    1c9a:	00 08 90    	mov.w     [w0+16], w0
    1c9c:	00 00 e0    	cp0.w     w0
    1c9e:	97 00 3a    	bra       NZ, 0x1dce <.L7>
    1ca0:	0e 08 90    	mov.w     [w14+16], w0
    1ca2:	00 08 90    	mov.w     [w0+16], w0
    1ca4:	00 00 e0    	cp0.w     w0
    1ca6:	93 00 3a    	bra       NZ, 0x1dce <.L7>
    1ca8:	1e 08 90    	mov.w     [w14+18], w0
    1caa:	00 08 90    	mov.w     [w0+16], w0
    1cac:	00 00 e0    	cp0.w     w0
    1cae:	8f 00 3a    	bra       NZ, 0x1dce <.L7>
    1cb0:	7e 00 90    	mov.w     [w14+14], w0
    1cb2:	66 03 07    	rcall     0x2380 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    1cb4:	0e 08 90    	mov.w     [w14+16], w0
    1cb6:	8b 03 07    	rcall     0x23ce <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    1cb8:	0e 08 90    	mov.w     [w14+16], w0
    1cba:	e6 03 07    	rcall     0x2488 <_pin_set> <L0> <.LFB8> <.LFE7>
    1cbc:	1e 08 90    	mov.w     [w14+18], w0
    1cbe:	87 03 07    	rcall     0x23ce <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    1cc0:	1e 08 90    	mov.w     [w14+18], w0
    1cc2:	f7 03 07    	rcall     0x24b2 <_pin_clear> <L0> <.LFB9> <.LFE8>
    1cc4:	6e 00 90    	mov.w     [w14+12], w0
    1cc6:	fe 00 90    	mov.w     [w14+14], w1
    1cc8:	01 08 98    	mov.w     w1, [w0+16]
    1cca:	7e 00 90    	mov.w     [w14+14], w0
    1ccc:	ee 00 90    	mov.w     [w14+12], w1
    1cce:	01 08 98    	mov.w     w1, [w0+16]
    1cd0:	7e 00 90    	mov.w     [w14+14], w0
    1cd2:	80 00 eb    	clr.w     w1
    1cd4:	11 08 98    	mov.w     w1, [w0+18]
    1cd6:	7e 00 90    	mov.w     [w14+14], w0
    1cd8:	80 00 eb    	clr.w     w1
    1cda:	21 08 98    	mov.w     w1, [w0+20]
    1cdc:	6e 00 90    	mov.w     [w14+12], w0
    1cde:	8e 08 90    	mov.w     [w14+16], w1
    1ce0:	11 08 98    	mov.w     w1, [w0+18]
    1ce2:	0e 08 90    	mov.w     [w14+16], w0
    1ce4:	ee 00 90    	mov.w     [w14+12], w1
    1ce6:	01 08 98    	mov.w     w1, [w0+16]
    1ce8:	0e 08 90    	mov.w     [w14+16], w0
    1cea:	80 00 eb    	clr.w     w1
    1cec:	11 08 98    	mov.w     w1, [w0+18]
    1cee:	0e 08 90    	mov.w     [w14+16], w0
    1cf0:	80 00 eb    	clr.w     w1
    1cf2:	21 08 98    	mov.w     w1, [w0+20]
    1cf4:	6e 00 90    	mov.w     [w14+12], w0
    1cf6:	9e 08 90    	mov.w     [w14+18], w1
    1cf8:	21 08 98    	mov.w     w1, [w0+20]
    1cfa:	1e 08 90    	mov.w     [w14+18], w0
    1cfc:	ee 00 90    	mov.w     [w14+12], w1
    1cfe:	01 08 98    	mov.w     w1, [w0+16]
    1d00:	1e 08 90    	mov.w     [w14+18], w0
    1d02:	80 00 eb    	clr.w     w1
    1d04:	11 08 98    	mov.w     w1, [w0+18]
    1d06:	1e 08 90    	mov.w     [w14+18], w0
    1d08:	80 00 eb    	clr.w     w1
    1d0a:	21 08 98    	mov.w     w1, [w0+20]
    1d0c:	11 3a 80    	mov.w     0x742, w1
    1d0e:	f0 0b 20    	mov.w     #0xbf, w0
    1d10:	00 81 60    	and.w     w1, w0, w2
    1d12:	60 04 20    	mov.w     #0x46, w0
    1d14:	71 05 20    	mov.w     #0x57, w1
    1d16:	23 74 20    	mov.w     #0x742, w3
    1d18:	80 49 78    	mov.b     w0, [w3]
    1d1a:	81 49 78    	mov.b     w1, [w3]
    1d1c:	82 49 78    	mov.b     w2, [w3]
    1d1e:	6e 00 90    	mov.w     [w14+12], w0
    1d20:	40 00 90    	mov.w     [w0+8], w0
    1d22:	ee 00 90    	mov.w     [w14+12], w1
    1d24:	c1 00 90    	mov.w     [w1+8], w1
    1d26:	11 01 78    	mov.w     [w1], w2
    1d28:	ee 00 90    	mov.w     [w14+12], w1
    1d2a:	a1 48 90    	mov.b     [w1+10], w1
    1d2c:	81 80 fb    	ze        w1, w1
    1d2e:	f3 03 20    	mov.w     #0x3f, w3
    1d30:	81 18 dd    	sl.w      w3, w1, w1
    1d32:	81 80 ea    	com.w     w1, w1
    1d34:	81 00 61    	and.w     w2, w1, w1
    1d36:	01 08 78    	mov.w     w1, [w0]
    1d38:	6e 00 90    	mov.w     [w14+12], w0
    1d3a:	40 00 90    	mov.w     [w0+8], w0
    1d3c:	ee 00 90    	mov.w     [w14+12], w1
    1d3e:	c1 00 90    	mov.w     [w1+8], w1
    1d40:	11 01 78    	mov.w     [w1], w2
    1d42:	fe 00 90    	mov.w     [w14+14], w1
    1d44:	e1 01 90    	mov.w     [w1+12], w3
    1d46:	ee 00 90    	mov.w     [w14+12], w1
    1d48:	a1 48 90    	mov.b     [w1+10], w1
    1d4a:	81 80 fb    	ze        w1, w1
    1d4c:	81 18 dd    	sl.w      w3, w1, w1
    1d4e:	82 80 70    	ior.w     w1, w2, w1
    1d50:	01 08 78    	mov.w     w1, [w0]
    1d52:	0e 08 90    	mov.w     [w14+16], w0
    1d54:	70 00 90    	mov.w     [w0+14], w0
    1d56:	8e 08 90    	mov.w     [w14+16], w1
    1d58:	f1 00 90    	mov.w     [w1+14], w1
    1d5a:	11 01 78    	mov.w     [w1], w2
    1d5c:	8e 08 90    	mov.w     [w14+16], w1
    1d5e:	a1 48 90    	mov.b     [w1+10], w1
    1d60:	81 80 fb    	ze        w1, w1
    1d62:	f3 03 20    	mov.w     #0x3f, w3
    1d64:	81 18 dd    	sl.w      w3, w1, w1
    1d66:	81 80 ea    	com.w     w1, w1
    1d68:	81 00 61    	and.w     w2, w1, w1
    1d6a:	01 08 78    	mov.w     w1, [w0]
    1d6c:	0e 08 90    	mov.w     [w14+16], w0
    1d6e:	70 00 90    	mov.w     [w0+14], w0
    1d70:	8e 08 90    	mov.w     [w14+16], w1
    1d72:	f1 00 90    	mov.w     [w1+14], w1
    1d74:	11 01 78    	mov.w     [w1], w2
    1d76:	ee 00 90    	mov.w     [w14+12], w1
    1d78:	e1 01 90    	mov.w     [w1+12], w3
    1d7a:	8e 08 90    	mov.w     [w14+16], w1
    1d7c:	a1 48 90    	mov.b     [w1+10], w1
    1d7e:	81 80 fb    	ze        w1, w1
    1d80:	81 18 dd    	sl.w      w3, w1, w1
    1d82:	82 80 70    	ior.w     w1, w2, w1
    1d84:	01 08 78    	mov.w     w1, [w0]
    1d86:	1e 08 90    	mov.w     [w14+18], w0
    1d88:	70 00 90    	mov.w     [w0+14], w0
    1d8a:	9e 08 90    	mov.w     [w14+18], w1
    1d8c:	f1 00 90    	mov.w     [w1+14], w1
    1d8e:	11 01 78    	mov.w     [w1], w2
    1d90:	9e 08 90    	mov.w     [w14+18], w1
    1d92:	a1 48 90    	mov.b     [w1+10], w1
    1d94:	81 80 fb    	ze        w1, w1
    1d96:	f3 03 20    	mov.w     #0x3f, w3
    1d98:	81 18 dd    	sl.w      w3, w1, w1
    1d9a:	81 80 ea    	com.w     w1, w1
    1d9c:	81 00 61    	and.w     w2, w1, w1
    1d9e:	01 08 78    	mov.w     w1, [w0]
    1da0:	1e 08 90    	mov.w     [w14+18], w0
    1da2:	70 00 90    	mov.w     [w0+14], w0
    1da4:	9e 08 90    	mov.w     [w14+18], w1
    1da6:	f1 00 90    	mov.w     [w1+14], w1
    1da8:	11 01 78    	mov.w     [w1], w2
    1daa:	ee 00 90    	mov.w     [w14+12], w1
    1dac:	f1 01 90    	mov.w     [w1+14], w3
    1dae:	9e 08 90    	mov.w     [w14+18], w1
    1db0:	a1 48 90    	mov.b     [w1+10], w1
    1db2:	81 80 fb    	ze        w1, w1
    1db4:	81 18 dd    	sl.w      w3, w1, w1
    1db6:	82 80 70    	ior.w     w1, w2, w1
    1db8:	01 08 78    	mov.w     w1, [w0]
    1dba:	10 3a 80    	mov.w     0x742, w0
    1dbc:	00 01 78    	mov.w     w0, w2
    1dbe:	02 60 a0    	bset.w    w2, #0x6
    1dc0:	60 04 20    	mov.w     #0x46, w0
    1dc2:	71 05 20    	mov.w     #0x57, w1
    1dc4:	23 74 20    	mov.w     #0x742, w3
    1dc6:	80 49 78    	mov.b     w0, [w3]
    1dc8:	81 49 78    	mov.b     w1, [w3]
    1dca:	82 49 78    	mov.b     w2, [w3]
    1dcc:	0f 00 37    	bra       0x1dec <.L8>

00001dce <.L7>:
    1dce:	6e 00 90    	mov.w     [w14+12], w0
    1dd0:	80 08 90    	mov.w     [w0+16], w1
    1dd2:	7e 00 90    	mov.w     [w14+14], w0
    1dd4:	80 8f 50    	sub.w     w1, w0, [w15]
    1dd6:	94 00 3a    	bra       NZ, 0x1f00 <.L24>
    1dd8:	6e 00 90    	mov.w     [w14+12], w0
    1dda:	90 08 90    	mov.w     [w0+18], w1
    1ddc:	0e 08 90    	mov.w     [w14+16], w0
    1dde:	80 8f 50    	sub.w     w1, w0, [w15]
    1de0:	91 00 3a    	bra       NZ, 0x1f04 <.L25>
    1de2:	6e 00 90    	mov.w     [w14+12], w0
    1de4:	a0 08 90    	mov.w     [w0+20], w1
    1de6:	1e 08 90    	mov.w     [w14+18], w0
    1de8:	80 8f 50    	sub.w     w1, w0, [w15]
    1dea:	8e 00 3a    	bra       NZ, 0x1f08 <.L26>

00001dec <.L8>:
    1dec:	18 c0 b3    	mov.b     #0x1, w8
    1dee:	02 40 22    	mov.w     #0x2400, w2
    1df0:	43 af 24    	mov.w     #0x4af4, w3
    1df2:	2e 08 90    	mov.w     [w14+20], w0
    1df4:	be 08 90    	mov.w     [w14+22], w1
    1df6:	cb fa 07    	rcall     0x138e <___gesf2> <___gtsf2>
    1df8:	00 00 e0    	cp0.w     w0
    1dfa:	01 00 3c    	bra       GT, 0x1dfe <.L10>
    1dfc:	00 44 eb    	clr.b     w8

00001dfe <.L10>:
    1dfe:	08 04 e0    	cp0.b     w8
    1e00:	04 00 32    	bra       Z, 0x1e0a <.L11>
    1e02:	00 40 22    	mov.w     #0x2400, w0
    1e04:	41 af 24    	mov.w     #0x4af4, w1
    1e06:	20 0f 98    	mov.w     w0, [w14+20]
    1e08:	31 0f 98    	mov.w     w1, [w14+22]

00001e0a <.L11>:
    1e0a:	18 c0 b3    	mov.b     #0x1, w8
    1e0c:	02 40 22    	mov.w     #0x2400, w2
    1e0e:	43 6f 24    	mov.w     #0x46f4, w3
    1e10:	2e 08 90    	mov.w     [w14+20], w0
    1e12:	be 08 90    	mov.w     [w14+22], w1
    1e14:	ba fa 07    	rcall     0x138a <___eqsf2> <___lesf2> <___ltsf2>
    1e16:	00 00 e0    	cp0.w     w0
    1e18:	01 00 35    	bra       LT, 0x1e1c <.L12>
    1e1a:	00 44 eb    	clr.b     w8

00001e1c <.L12>:
    1e1c:	08 04 e0    	cp0.b     w8
    1e1e:	04 00 32    	bra       Z, 0x1e28 <.L13>
    1e20:	00 40 22    	mov.w     #0x2400, w0
    1e22:	41 6f 24    	mov.w     #0x46f4, w1
    1e24:	20 0f 98    	mov.w     w0, [w14+20]
    1e26:	31 0f 98    	mov.w     w1, [w14+22]

00001e28 <.L13>:
    1e28:	18 c0 b3    	mov.b     #0x1, w8
    1e2a:	02 40 22    	mov.w     #0x2400, w2
    1e2c:	43 7f 24    	mov.w     #0x47f4, w3
    1e2e:	2e 08 90    	mov.w     [w14+20], w0
    1e30:	be 08 90    	mov.w     [w14+22], w1
    1e32:	ab fa 07    	rcall     0x138a <___eqsf2> <___lesf2> <___ltsf2>
    1e34:	00 00 e0    	cp0.w     w0
    1e36:	01 00 34    	bra       LE, 0x1e3a <.L14>
    1e38:	00 44 eb    	clr.b     w8

00001e3a <.L14>:
    1e3a:	08 04 e0    	cp0.b     w8
    1e3c:	0a 00 32    	bra       Z, 0x1e52 <.L15>
    1e3e:	02 00 20    	mov.w     #0x0, w2
    1e40:	03 28 24    	mov.w     #0x4280, w3
    1e42:	2e 08 90    	mov.w     [w14+20], w0
    1e44:	be 08 90    	mov.w     [w14+22], w1
    1e46:	15 fb 07    	rcall     0x1472 <___mulsf3>
    1e48:	20 0f 98    	mov.w     w0, [w14+20]
    1e4a:	31 0f 98    	mov.w     w1, [w14+22]
    1e4c:	00 00 eb    	clr.w     w0
    1e4e:	00 0f 78    	mov.w     w0, [w14]
    1e50:	2c 00 37    	bra       0x1eaa <.L16>

00001e52 <.L15>:
    1e52:	18 c0 b3    	mov.b     #0x1, w8
    1e54:	02 40 22    	mov.w     #0x2400, w2
    1e56:	43 8f 24    	mov.w     #0x48f4, w3
    1e58:	2e 08 90    	mov.w     [w14+20], w0
    1e5a:	be 08 90    	mov.w     [w14+22], w1
    1e5c:	96 fa 07    	rcall     0x138a <___eqsf2> <___lesf2> <___ltsf2>
    1e5e:	00 00 e0    	cp0.w     w0
    1e60:	01 00 34    	bra       LE, 0x1e64 <.L17>
    1e62:	00 44 eb    	clr.b     w8

00001e64 <.L17>:
    1e64:	08 04 e0    	cp0.b     w8
    1e66:	0a 00 32    	bra       Z, 0x1e7c <.L18>
    1e68:	02 00 20    	mov.w     #0x0, w2
    1e6a:	03 18 24    	mov.w     #0x4180, w3
    1e6c:	2e 08 90    	mov.w     [w14+20], w0
    1e6e:	be 08 90    	mov.w     [w14+22], w1
    1e70:	00 fb 07    	rcall     0x1472 <___mulsf3>
    1e72:	20 0f 98    	mov.w     w0, [w14+20]
    1e74:	31 0f 98    	mov.w     w1, [w14+22]
    1e76:	10 00 20    	mov.w     #0x1, w0
    1e78:	00 0f 78    	mov.w     w0, [w14]
    1e7a:	17 00 37    	bra       0x1eaa <.L16>

00001e7c <.L18>:
    1e7c:	18 c0 b3    	mov.b     #0x1, w8
    1e7e:	02 40 22    	mov.w     #0x2400, w2
    1e80:	43 9f 24    	mov.w     #0x49f4, w3
    1e82:	2e 08 90    	mov.w     [w14+20], w0
    1e84:	be 08 90    	mov.w     [w14+22], w1
    1e86:	81 fa 07    	rcall     0x138a <___eqsf2> <___lesf2> <___ltsf2>
    1e88:	00 00 e0    	cp0.w     w0
    1e8a:	01 00 34    	bra       LE, 0x1e8e <.L19>
    1e8c:	00 44 eb    	clr.b     w8

00001e8e <.L19>:
    1e8e:	08 04 e0    	cp0.b     w8
    1e90:	0a 00 32    	bra       Z, 0x1ea6 <.L20>
    1e92:	02 00 20    	mov.w     #0x0, w2
    1e94:	03 08 24    	mov.w     #0x4080, w3
    1e96:	2e 08 90    	mov.w     [w14+20], w0
    1e98:	be 08 90    	mov.w     [w14+22], w1
    1e9a:	eb fa 07    	rcall     0x1472 <___mulsf3>
    1e9c:	20 0f 98    	mov.w     w0, [w14+20]
    1e9e:	31 0f 98    	mov.w     w1, [w14+22]
    1ea0:	20 00 20    	mov.w     #0x2, w0
    1ea2:	00 0f 78    	mov.w     w0, [w14]
    1ea4:	02 00 37    	bra       0x1eaa <.L16>

00001ea6 <.L20>:
    1ea6:	30 00 20    	mov.w     #0x3, w0
    1ea8:	00 0f 78    	mov.w     w0, [w14]

00001eaa <.L16>:
    1eaa:	2e 09 90    	mov.w     [w14+20], w2
    1eac:	be 09 90    	mov.w     [w14+22], w3
    1eae:	00 40 22    	mov.w     #0x2400, w0
    1eb0:	41 b7 24    	mov.w     #0x4b74, w1
    1eb2:	29 fa 07    	rcall     0x1306 <___divsf3>
    1eb4:	02 00 20    	mov.w     #0x0, w2
    1eb6:	03 f0 23    	mov.w     #0x3f00, w3
    1eb8:	c9 f9 07    	rcall     0x124c <___addsf3>
    1eba:	6b fa 07    	rcall     0x1392 <___fixunssfsi>
    1ebc:	10 07 98    	mov.w     w0, [w14+2]
    1ebe:	1e 00 90    	mov.w     [w14+2], w0
    1ec0:	68 00 10    	subr.w    w0, #0x8, w0
    1ec2:	42 00 dd    	sl.w      w0, #0x2, w0
    1ec4:	10 07 98    	mov.w     w0, [w14+2]
    1ec6:	6e 00 90    	mov.w     [w14+12], w0
    1ec8:	90 00 90    	mov.w     [w0+2], w1
    1eca:	0e 58 90    	mov.b     [w14+24], w0
    1ecc:	00 80 fb    	ze        w0, w0
    1ece:	63 00 60    	and.w     w0, #0x3, w0
    1ed0:	00 00 40    	add.w     w0, w0, w0
    1ed2:	64 01 47    	add.w     w14, #0x4, w2
    1ed4:	00 00 41    	add.w     w2, w0, w0
    1ed6:	10 00 78    	mov.w     [w0], w0
    1ed8:	1e 01 70    	ior.w     w0, [w14], w2
    1eda:	1e 00 90    	mov.w     [w14+2], w0
    1edc:	02 00 70    	ior.w     w0, w2, w0
    1ede:	00 50 a0    	bset.w    w0, #0x5
    1ee0:	80 08 78    	mov.w     w0, [w1]
    1ee2:	6e 00 90    	mov.w     [w14+12], w0
    1ee4:	20 00 90    	mov.w     [w0+4], w0
    1ee6:	80 00 eb    	clr.w     w1
    1ee8:	01 08 78    	mov.w     w1, [w0]
    1eea:	6e 00 90    	mov.w     [w14+12], w0
    1eec:	10 00 78    	mov.w     [w0], w0
    1eee:	01 00 28    	mov.w     #0x8000, w1
    1ef0:	01 08 78    	mov.w     w1, [w0]
    1ef2:	0b 00 37    	bra       0x1f0a <.L3>

00001ef4 <.L21>:
    1ef4:	00 00 00    	nop       
    1ef6:	09 00 37    	bra       0x1f0a <.L3>

00001ef8 <.L22>:
    1ef8:	00 00 00    	nop       
    1efa:	07 00 37    	bra       0x1f0a <.L3>

00001efc <.L23>:
    1efc:	00 00 00    	nop       
    1efe:	05 00 37    	bra       0x1f0a <.L3>

00001f00 <.L24>:
    1f00:	00 00 00    	nop       
    1f02:	03 00 37    	bra       0x1f0a <.L3>

00001f04 <.L25>:
    1f04:	00 00 00    	nop       
    1f06:	01 00 37    	bra       0x1f0a <.L3>

00001f08 <.L26>:
    1f08:	00 00 00    	nop       

00001f0a <.L3>:
    1f0a:	4f 04 78    	mov.w     [--w15], w8
    1f0c:	00 80 fa    	ulnk      
    1f0e:	00 00 06    	return    

00001f10 <_spi_close>:
    1f10:	02 00 fa    	lnk       #0x2
    1f12:	00 0f 78    	mov.w     w0, [w14]
    1f14:	1e 00 78    	mov.w     [w14], w0
    1f16:	10 00 78    	mov.w     [w0], w0
    1f18:	80 00 eb    	clr.w     w1
    1f1a:	01 08 78    	mov.w     w1, [w0]
    1f1c:	1e 00 78    	mov.w     [w14], w0
    1f1e:	10 00 90    	mov.w     [w0+2], w0
    1f20:	80 00 eb    	clr.w     w1
    1f22:	01 08 78    	mov.w     w1, [w0]
    1f24:	1e 00 78    	mov.w     [w14], w0
    1f26:	20 00 90    	mov.w     [w0+4], w0
    1f28:	80 00 eb    	clr.w     w1
    1f2a:	01 08 78    	mov.w     w1, [w0]
    1f2c:	1e 00 78    	mov.w     [w14], w0
    1f2e:	00 08 90    	mov.w     [w0+16], w0
    1f30:	00 00 e0    	cp0.w     w0
    1f32:	28 00 32    	bra       Z, 0x1f84 <.L28>
    1f34:	11 3a 80    	mov.w     0x742, w1
    1f36:	f0 0b 20    	mov.w     #0xbf, w0
    1f38:	00 81 60    	and.w     w1, w0, w2
    1f3a:	60 04 20    	mov.w     #0x46, w0
    1f3c:	71 05 20    	mov.w     #0x57, w1
    1f3e:	23 74 20    	mov.w     #0x742, w3
    1f40:	80 49 78    	mov.b     w0, [w3]
    1f42:	81 49 78    	mov.b     w1, [w3]
    1f44:	82 49 78    	mov.b     w2, [w3]
    1f46:	1e 00 78    	mov.w     [w14], w0
    1f48:	40 00 90    	mov.w     [w0+8], w0
    1f4a:	9e 00 78    	mov.w     [w14], w1
    1f4c:	c1 00 90    	mov.w     [w1+8], w1
    1f4e:	11 01 78    	mov.w     [w1], w2
    1f50:	9e 00 78    	mov.w     [w14], w1
    1f52:	a1 48 90    	mov.b     [w1+10], w1
    1f54:	81 80 fb    	ze        w1, w1
    1f56:	f3 03 20    	mov.w     #0x3f, w3
    1f58:	81 18 dd    	sl.w      w3, w1, w1
    1f5a:	82 80 70    	ior.w     w1, w2, w1
    1f5c:	01 08 78    	mov.w     w1, [w0]
    1f5e:	10 3a 80    	mov.w     0x742, w0
    1f60:	00 01 78    	mov.w     w0, w2
    1f62:	02 60 a0    	bset.w    w2, #0x6
    1f64:	60 04 20    	mov.w     #0x46, w0
    1f66:	71 05 20    	mov.w     #0x57, w1
    1f68:	23 74 20    	mov.w     #0x742, w3
    1f6a:	80 49 78    	mov.b     w0, [w3]
    1f6c:	81 49 78    	mov.b     w1, [w3]
    1f6e:	82 49 78    	mov.b     w2, [w3]
    1f70:	1e 00 78    	mov.w     [w14], w0
    1f72:	00 08 90    	mov.w     [w0+16], w0
    1f74:	80 00 eb    	clr.w     w1
    1f76:	01 08 98    	mov.w     w1, [w0+16]
    1f78:	1e 00 78    	mov.w     [w14], w0
    1f7a:	00 08 90    	mov.w     [w0+16], w0
    1f7c:	01 02 07    	rcall     0x2380 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    1f7e:	1e 00 78    	mov.w     [w14], w0
    1f80:	80 00 eb    	clr.w     w1
    1f82:	01 08 98    	mov.w     w1, [w0+16]

00001f84 <.L28>:
    1f84:	1e 00 78    	mov.w     [w14], w0
    1f86:	10 08 90    	mov.w     [w0+18], w0
    1f88:	00 00 e0    	cp0.w     w0
    1f8a:	2f 00 32    	bra       Z, 0x1fea <.L29>
    1f8c:	11 3a 80    	mov.w     0x742, w1
    1f8e:	f0 0b 20    	mov.w     #0xbf, w0
    1f90:	00 81 60    	and.w     w1, w0, w2
    1f92:	60 04 20    	mov.w     #0x46, w0
    1f94:	71 05 20    	mov.w     #0x57, w1
    1f96:	23 74 20    	mov.w     #0x742, w3
    1f98:	80 49 78    	mov.b     w0, [w3]
    1f9a:	81 49 78    	mov.b     w1, [w3]
    1f9c:	82 49 78    	mov.b     w2, [w3]
    1f9e:	1e 00 78    	mov.w     [w14], w0
    1fa0:	10 08 90    	mov.w     [w0+18], w0
    1fa2:	70 00 90    	mov.w     [w0+14], w0
    1fa4:	9e 00 78    	mov.w     [w14], w1
    1fa6:	91 08 90    	mov.w     [w1+18], w1
    1fa8:	f1 00 90    	mov.w     [w1+14], w1
    1faa:	11 01 78    	mov.w     [w1], w2
    1fac:	9e 00 78    	mov.w     [w14], w1
    1fae:	91 08 90    	mov.w     [w1+18], w1
    1fb0:	a1 48 90    	mov.b     [w1+10], w1
    1fb2:	81 80 fb    	ze        w1, w1
    1fb4:	f3 03 20    	mov.w     #0x3f, w3
    1fb6:	81 18 dd    	sl.w      w3, w1, w1
    1fb8:	81 80 ea    	com.w     w1, w1
    1fba:	81 00 61    	and.w     w2, w1, w1
    1fbc:	01 08 78    	mov.w     w1, [w0]
    1fbe:	10 3a 80    	mov.w     0x742, w0
    1fc0:	00 01 78    	mov.w     w0, w2
    1fc2:	02 60 a0    	bset.w    w2, #0x6
    1fc4:	60 04 20    	mov.w     #0x46, w0
    1fc6:	71 05 20    	mov.w     #0x57, w1
    1fc8:	23 74 20    	mov.w     #0x742, w3
    1fca:	80 49 78    	mov.b     w0, [w3]
    1fcc:	81 49 78    	mov.b     w1, [w3]
    1fce:	82 49 78    	mov.b     w2, [w3]
    1fd0:	1e 00 78    	mov.w     [w14], w0
    1fd2:	10 08 90    	mov.w     [w0+18], w0
    1fd4:	80 00 eb    	clr.w     w1
    1fd6:	01 08 98    	mov.w     w1, [w0+16]
    1fd8:	1e 00 78    	mov.w     [w14], w0
    1fda:	10 08 90    	mov.w     [w0+18], w0
    1fdc:	f8 01 07    	rcall     0x23ce <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    1fde:	1e 00 78    	mov.w     [w14], w0
    1fe0:	10 08 90    	mov.w     [w0+18], w0
    1fe2:	52 02 07    	rcall     0x2488 <_pin_set> <L0> <.LFB8> <.LFE7>
    1fe4:	1e 00 78    	mov.w     [w14], w0
    1fe6:	80 00 eb    	clr.w     w1
    1fe8:	11 08 98    	mov.w     w1, [w0+18]

00001fea <.L29>:
    1fea:	1e 00 78    	mov.w     [w14], w0
    1fec:	20 08 90    	mov.w     [w0+20], w0
    1fee:	00 00 e0    	cp0.w     w0
    1ff0:	2f 00 32    	bra       Z, 0x2050 <.L27>
    1ff2:	11 3a 80    	mov.w     0x742, w1
    1ff4:	f0 0b 20    	mov.w     #0xbf, w0
    1ff6:	00 81 60    	and.w     w1, w0, w2
    1ff8:	60 04 20    	mov.w     #0x46, w0
    1ffa:	71 05 20    	mov.w     #0x57, w1
    1ffc:	23 74 20    	mov.w     #0x742, w3
    1ffe:	80 49 78    	mov.b     w0, [w3]
    2000:	81 49 78    	mov.b     w1, [w3]
    2002:	82 49 78    	mov.b     w2, [w3]
    2004:	1e 00 78    	mov.w     [w14], w0
    2006:	20 08 90    	mov.w     [w0+20], w0
    2008:	70 00 90    	mov.w     [w0+14], w0
    200a:	9e 00 78    	mov.w     [w14], w1
    200c:	a1 08 90    	mov.w     [w1+20], w1
    200e:	f1 00 90    	mov.w     [w1+14], w1
    2010:	11 01 78    	mov.w     [w1], w2
    2012:	9e 00 78    	mov.w     [w14], w1
    2014:	a1 08 90    	mov.w     [w1+20], w1
    2016:	a1 48 90    	mov.b     [w1+10], w1
    2018:	81 80 fb    	ze        w1, w1
    201a:	f3 03 20    	mov.w     #0x3f, w3
    201c:	81 18 dd    	sl.w      w3, w1, w1
    201e:	81 80 ea    	com.w     w1, w1
    2020:	81 00 61    	and.w     w2, w1, w1
    2022:	01 08 78    	mov.w     w1, [w0]
    2024:	10 3a 80    	mov.w     0x742, w0
    2026:	00 01 78    	mov.w     w0, w2
    2028:	02 60 a0    	bset.w    w2, #0x6
    202a:	60 04 20    	mov.w     #0x46, w0
    202c:	71 05 20    	mov.w     #0x57, w1
    202e:	23 74 20    	mov.w     #0x742, w3
    2030:	80 49 78    	mov.b     w0, [w3]
    2032:	81 49 78    	mov.b     w1, [w3]
    2034:	82 49 78    	mov.b     w2, [w3]
    2036:	1e 00 78    	mov.w     [w14], w0
    2038:	20 08 90    	mov.w     [w0+20], w0
    203a:	80 00 eb    	clr.w     w1
    203c:	01 08 98    	mov.w     w1, [w0+16]
    203e:	1e 00 78    	mov.w     [w14], w0
    2040:	20 08 90    	mov.w     [w0+20], w0
    2042:	c5 01 07    	rcall     0x23ce <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    2044:	1e 00 78    	mov.w     [w14], w0
    2046:	20 08 90    	mov.w     [w0+20], w0
    2048:	34 02 07    	rcall     0x24b2 <_pin_clear> <L0> <.LFB9> <.LFE8>
    204a:	1e 00 78    	mov.w     [w14], w0
    204c:	80 00 eb    	clr.w     w1
    204e:	21 08 98    	mov.w     w1, [w0+20]

00002050 <.L27>:
    2050:	00 80 fa    	ulnk      
    2052:	00 00 06    	return    

00002054 <_spi_transfer>:
    2054:	04 00 fa    	lnk       #0x4
    2056:	00 0f 78    	mov.w     w0, [w14]
    2058:	21 47 98    	mov.b     w1, [w14+2]
    205a:	1e 00 78    	mov.w     [w14], w0
    205c:	30 00 90    	mov.w     [w0+6], w0
    205e:	ae 40 90    	mov.b     [w14+2], w1
    2060:	81 80 fb    	ze        w1, w1
    2062:	01 08 78    	mov.w     w1, [w0]
    2064:	00 00 00    	nop       

00002066 <.L32>:
    2066:	1e 00 78    	mov.w     [w14], w0
    2068:	10 00 78    	mov.w     [w0], w0
    206a:	10 00 78    	mov.w     [w0], w0
    206c:	61 00 60    	and.w     w0, #0x1, w0
    206e:	00 00 e0    	cp0.w     w0
    2070:	fa ff 32    	bra       Z, 0x2066 <.L32>
    2072:	1e 00 78    	mov.w     [w14], w0
    2074:	30 00 90    	mov.w     [w0+6], w0
    2076:	10 00 78    	mov.w     [w0], w0
    2078:	00 40 78    	mov.b     w0, w0
    207a:	00 80 fa    	ulnk      
    207c:	00 00 06    	return    

0000207e <___digitalWrite>:
    207e:	04 00 fa    	lnk       #0x4
    2080:	00 0f 78    	mov.w     w0, [w14]
    2082:	11 07 98    	mov.w     w1, [w14+2]
    2084:	1e 00 90    	mov.w     [w14+2], w0
    2086:	00 00 e0    	cp0.w     w0
    2088:	0d 00 32    	bra       Z, 0x20a4 <.L2>
    208a:	1e 00 78    	mov.w     [w14], w0
    208c:	10 00 78    	mov.w     [w0], w0
    208e:	9e 00 78    	mov.w     [w14], w1
    2090:	91 00 78    	mov.w     [w1], w1
    2092:	11 01 78    	mov.w     [w1], w2
    2094:	9e 00 78    	mov.w     [w14], w1
    2096:	e1 40 90    	mov.b     [w1+6], w1
    2098:	81 80 fb    	ze        w1, w1
    209a:	13 00 20    	mov.w     #0x1, w3
    209c:	81 18 dd    	sl.w      w3, w1, w1
    209e:	82 80 70    	ior.w     w1, w2, w1
    20a0:	01 08 78    	mov.w     w1, [w0]
    20a2:	0d 00 37    	bra       0x20be <.L1>

000020a4 <.L2>:
    20a4:	1e 00 78    	mov.w     [w14], w0
    20a6:	10 00 78    	mov.w     [w0], w0
    20a8:	9e 00 78    	mov.w     [w14], w1
    20aa:	91 00 78    	mov.w     [w1], w1
    20ac:	11 01 78    	mov.w     [w1], w2
    20ae:	9e 00 78    	mov.w     [w14], w1
    20b0:	e1 40 90    	mov.b     [w1+6], w1
    20b2:	81 80 fb    	ze        w1, w1
    20b4:	13 00 20    	mov.w     #0x1, w3
    20b6:	81 18 dd    	sl.w      w3, w1, w1
    20b8:	81 80 ea    	com.w     w1, w1
    20ba:	81 00 61    	and.w     w2, w1, w1
    20bc:	01 08 78    	mov.w     w1, [w0]

000020be <.L1>:
    20be:	00 80 fa    	ulnk      
    20c0:	00 00 06    	return    

000020c2 <___digitalRead>:
    20c2:	02 00 fa    	lnk       #0x2
    else
        bitclear(self->port, self->bit);
}

uint16_t __digitalRead(_PIN *self) {
    20c4:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    20c6:	1e 00 78    	mov.w     [w14], w0
    20c8:	10 00 78    	mov.w     [w0], w0
    20ca:	90 00 78    	mov.w     [w0], w1
    20cc:	1e 00 78    	mov.w     [w14], w0
    20ce:	60 40 90    	mov.b     [w0+6], w0
    20d0:	00 80 fb    	ze        w0, w0
    20d2:	12 00 20    	mov.w     #0x1, w2
    20d4:	00 10 dd    	sl.w      w2, w0, w0
    20d6:	00 80 60    	and.w     w1, w0, w0
    20d8:	00 f0 a7    	btsc.w    w0, #0xf
    20da:	00 00 ea    	neg.w     w0, w0
    20dc:	00 00 ea    	neg.w     w0, w0
    20de:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    20e0:	00 80 fa    	ulnk      
    20e2:	00 00 06    	return    

000020e4 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    20e4:	02 00 fa    	lnk       #0x2
    20e6:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = self->annum;
    20e8:	1e 00 78    	mov.w     [w14], w0
    20ea:	40 00 90    	mov.w     [w0+8], w0
    20ec:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.SAMP = 1;
    20ee:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE==0) {}
    20f0:	00 00 00    	nop       

000020f2 <.L6>:
    20f2:	00 19 80    	mov.w     0x320, w0
    20f4:	61 00 60    	and.w     w0, #0x1, w0
    20f6:	00 00 e0    	cp0.w     w0
    20f8:	fc ff 32    	bra       Z, 0x20f2 <.L6>
    return ADC1BUF0;
    20fa:	00 18 80    	mov.w     0x300, w0
}
    20fc:	00 80 fa    	ulnk      
    20fe:	00 00 06    	return    

00002100 <_init_pin>:

void init_pin(void) {
    2100:	02 00 fa    	lnk       #0x2
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2102:	40 6d 20    	mov.w     #0x6d4, w0
    2104:	80 1f 78    	mov.w     w0, [w15++]
    2106:	47 01 20    	mov.w     #0x14, w7
    2108:	00 43 eb    	clr.b     w6
    210a:	80 82 eb    	setm.w    w5
    210c:	54 c0 b3    	mov.b     #0x5, w4
    210e:	80 01 eb    	clr.w     w3
    2110:	82 2d 20    	mov.w     #0x2d8, w2
    2112:	a1 2d 20    	mov.w     #0x2da, w1
    2114:	80 87 20    	mov.w     #0x878, w0
    2116:	08 01 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2118:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    211a:	80 6d 20    	mov.w     #0x6d8, w0
    211c:	80 1f 78    	mov.w     w0, [w15++]
    211e:	97 01 20    	mov.w     #0x19, w7
    2120:	86 c0 b3    	mov.b     #0x8, w6
    2122:	80 82 eb    	setm.w    w5
    2124:	44 c0 b3    	mov.b     #0x4, w4
    2126:	80 01 eb    	clr.w     w3
    2128:	82 2d 20    	mov.w     #0x2d8, w2
    212a:	a1 2d 20    	mov.w     #0x2da, w1
    212c:	e0 88 20    	mov.w     #0x88e, w0
    212e:	fc 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2130:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2132:	a0 6c 20    	mov.w     #0x6ca, w0
    2134:	80 1f 78    	mov.w     w0, [w15++]
    2136:	a7 00 20    	mov.w     #0xa, w7
    2138:	00 43 eb    	clr.b     w6
    213a:	80 82 eb    	setm.w    w5
    213c:	44 c0 b3    	mov.b     #0x4, w4
    213e:	80 01 eb    	clr.w     w3
    2140:	82 2e 20    	mov.w     #0x2e8, w2
    2142:	a1 2e 20    	mov.w     #0x2ea, w1
    2144:	40 8a 20    	mov.w     #0x8a4, w0
    2146:	f0 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2148:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    214a:	00 6d 20    	mov.w     #0x6d0, w0
    214c:	80 1f 78    	mov.w     w0, [w15++]
    214e:	17 01 20    	mov.w     #0x11, w7
    2150:	86 c0 b3    	mov.b     #0x8, w6
    2152:	80 82 eb    	setm.w    w5
    2154:	54 c0 b3    	mov.b     #0x5, w4
    2156:	80 01 eb    	clr.w     w3
    2158:	82 2e 20    	mov.w     #0x2e8, w2
    215a:	a1 2e 20    	mov.w     #0x2ea, w1
    215c:	a0 8b 20    	mov.w     #0x8ba, w0
    215e:	e4 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2160:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2162:	c0 6d 20    	mov.w     #0x6dc, w0
    2164:	80 1f 78    	mov.w     w0, [w15++]
    2166:	d7 01 20    	mov.w     #0x1d, w7
    2168:	86 c0 b3    	mov.b     #0x8, w6
    216a:	f5 00 20    	mov.w     #0xf, w5
    216c:	f4 c0 b3    	mov.b     #0xf, w4
    216e:	23 4e 20    	mov.w     #0x4e2, w3
    2170:	82 2c 20    	mov.w     #0x2c8, w2
    2172:	a1 2c 20    	mov.w     #0x2ca, w1
    2174:	00 8d 20    	mov.w     #0x8d0, w0
    2176:	d8 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2178:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    217a:	00 6d 20    	mov.w     #0x6d0, w0
    217c:	80 1f 78    	mov.w     w0, [w15++]
    217e:	07 01 20    	mov.w     #0x10, w7
    2180:	00 43 eb    	clr.b     w6
    2182:	80 82 eb    	setm.w    w5
    2184:	34 c0 b3    	mov.b     #0x3, w4
    2186:	80 01 eb    	clr.w     w3
    2188:	82 2e 20    	mov.w     #0x2e8, w2
    218a:	a1 2e 20    	mov.w     #0x2ea, w1
    218c:	60 8e 20    	mov.w     #0x8e6, w0
    218e:	cc 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2190:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2192:	20 6c 20    	mov.w     #0x6c2, w0
    2194:	80 1f 78    	mov.w     w0, [w15++]
    2196:	27 00 20    	mov.w     #0x2, w7
    2198:	00 43 eb    	clr.b     w6
    219a:	80 82 eb    	setm.w    w5
    219c:	84 c0 b3    	mov.b     #0x8, w4
    219e:	80 01 eb    	clr.w     w3
    21a0:	82 2d 20    	mov.w     #0x2d8, w2
    21a2:	a1 2d 20    	mov.w     #0x2da, w1
    21a4:	c0 8f 20    	mov.w     #0x8fc, w0
    21a6:	c0 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    21a8:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    21aa:	c0 6c 20    	mov.w     #0x6cc, w0
    21ac:	80 1f 78    	mov.w     w0, [w15++]
    21ae:	c7 00 20    	mov.w     #0xc, w7
    21b0:	00 43 eb    	clr.b     w6
    21b2:	80 82 eb    	setm.w    w5
    21b4:	b4 c0 b3    	mov.b     #0xb, w4
    21b6:	80 01 eb    	clr.w     w3
    21b8:	82 2d 20    	mov.w     #0x2d8, w2
    21ba:	a1 2d 20    	mov.w     #0x2da, w1
    21bc:	20 91 20    	mov.w     #0x912, w0
    21be:	b4 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    21c0:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    21c2:	40 6c 20    	mov.w     #0x6c4, w0
    21c4:	80 1f 78    	mov.w     w0, [w15++]
    21c6:	47 00 20    	mov.w     #0x4, w7
    21c8:	00 43 eb    	clr.b     w6
    21ca:	80 82 eb    	setm.w    w5
    21cc:	94 c0 b3    	mov.b     #0x9, w4
    21ce:	80 01 eb    	clr.w     w3
    21d0:	82 2d 20    	mov.w     #0x2d8, w2
    21d2:	a1 2d 20    	mov.w     #0x2da, w1
    21d4:	80 92 20    	mov.w     #0x928, w0
    21d6:	a8 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    21d8:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    21da:	20 6c 20    	mov.w     #0x6c2, w0
    21dc:	80 1f 78    	mov.w     w0, [w15++]
    21de:	37 00 20    	mov.w     #0x3, w7
    21e0:	86 c0 b3    	mov.b     #0x8, w6
    21e2:	80 82 eb    	setm.w    w5
    21e4:	a4 c0 b3    	mov.b     #0xa, w4
    21e6:	80 01 eb    	clr.w     w3
    21e8:	82 2d 20    	mov.w     #0x2d8, w2
    21ea:	a1 2d 20    	mov.w     #0x2da, w1
    21ec:	e0 93 20    	mov.w     #0x93e, w0
    21ee:	9c 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    21f0:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    21f2:	a0 6c 20    	mov.w     #0x6ca, w0
    21f4:	80 1f 78    	mov.w     w0, [w15++]
    21f6:	b7 00 20    	mov.w     #0xb, w7
    21f8:	86 c0 b3    	mov.b     #0x8, w6
    21fa:	80 82 eb    	setm.w    w5
    21fc:	00 42 eb    	clr.b     w4
    21fe:	80 01 eb    	clr.w     w3
    2200:	82 2d 20    	mov.w     #0x2d8, w2
    2202:	a1 2d 20    	mov.w     #0x2da, w1
    2204:	40 95 20    	mov.w     #0x954, w0
    2206:	90 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2208:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    220a:	80 6d 20    	mov.w     #0x6d8, w0
    220c:	80 1f 78    	mov.w     w0, [w15++]
    220e:	87 01 20    	mov.w     #0x18, w7
    2210:	00 43 eb    	clr.b     w6
    2212:	80 82 eb    	setm.w    w5
    2214:	14 c0 b3    	mov.b     #0x1, w4
    2216:	80 01 eb    	clr.w     w3
    2218:	82 2d 20    	mov.w     #0x2d8, w2
    221a:	a1 2d 20    	mov.w     #0x2da, w1
    221c:	a0 96 20    	mov.w     #0x96a, w0
    221e:	84 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2220:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2222:	60 6d 20    	mov.w     #0x6d6, w0
    2224:	80 1f 78    	mov.w     w0, [w15++]
    2226:	77 01 20    	mov.w     #0x17, w7
    2228:	86 c0 b3    	mov.b     #0x8, w6
    222a:	80 82 eb    	setm.w    w5
    222c:	24 c0 b3    	mov.b     #0x2, w4
    222e:	80 01 eb    	clr.w     w3
    2230:	82 2d 20    	mov.w     #0x2d8, w2
    2232:	a1 2d 20    	mov.w     #0x2da, w1
    2234:	00 98 20    	mov.w     #0x980, w0
    2236:	78 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2238:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    223a:	60 6d 20    	mov.w     #0x6d6, w0
    223c:	80 1f 78    	mov.w     w0, [w15++]
    223e:	67 01 20    	mov.w     #0x16, w7
    2240:	00 43 eb    	clr.b     w6
    2242:	80 82 eb    	setm.w    w5
    2244:	34 c0 b3    	mov.b     #0x3, w4
    2246:	80 01 eb    	clr.w     w3
    2248:	82 2d 20    	mov.w     #0x2d8, w2
    224a:	a1 2d 20    	mov.w     #0x2da, w1
    224c:	60 99 20    	mov.w     #0x996, w0
    224e:	6c 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2250:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2252:	00 6c 20    	mov.w     #0x6c0, w0
    2254:	80 1f 78    	mov.w     w0, [w15++]
    2256:	80 03 eb    	clr.w     w7
    2258:	00 43 eb    	clr.b     w6
    225a:	80 02 eb    	clr.w     w5
    225c:	00 42 eb    	clr.b     w4
    225e:	23 4e 20    	mov.w     #0x4e2, w3
    2260:	82 2c 20    	mov.w     #0x2c8, w2
    2262:	a1 2c 20    	mov.w     #0x2ca, w1
    2264:	a0 a1 20    	mov.w     #0xa1a, w0
    2266:	60 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2268:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    226a:	00 6c 20    	mov.w     #0x6c0, w0
    226c:	80 1f 78    	mov.w     w0, [w15++]
    226e:	17 00 20    	mov.w     #0x1, w7
    2270:	86 c0 b3    	mov.b     #0x8, w6
    2272:	15 00 20    	mov.w     #0x1, w5
    2274:	14 c0 b3    	mov.b     #0x1, w4
    2276:	23 4e 20    	mov.w     #0x4e2, w3
    2278:	82 2c 20    	mov.w     #0x2c8, w2
    227a:	a1 2c 20    	mov.w     #0x2ca, w1
    227c:	40 a0 20    	mov.w     #0xa04, w0
    227e:	54 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2280:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2282:	c0 6c 20    	mov.w     #0x6cc, w0
    2284:	80 1f 78    	mov.w     w0, [w15++]
    2286:	d7 00 20    	mov.w     #0xd, w7
    2288:	86 c0 b3    	mov.b     #0x8, w6
    228a:	25 00 20    	mov.w     #0x2, w5
    228c:	24 c0 b3    	mov.b     #0x2, w4
    228e:	23 4e 20    	mov.w     #0x4e2, w3
    2290:	82 2c 20    	mov.w     #0x2c8, w2
    2292:	a1 2c 20    	mov.w     #0x2ca, w1
    2294:	e0 9e 20    	mov.w     #0x9ee, w0
    2296:	48 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    2298:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    229a:	00 00 eb    	clr.w     w0
    229c:	80 1f 78    	mov.w     w0, [w15++]
    229e:	80 83 eb    	setm.w    w7
    22a0:	00 43 eb    	clr.b     w6
    22a2:	35 00 20    	mov.w     #0x3, w5
    22a4:	34 c0 b3    	mov.b     #0x3, w4
    22a6:	23 4e 20    	mov.w     #0x4e2, w3
    22a8:	82 2c 20    	mov.w     #0x2c8, w2
    22aa:	a1 2c 20    	mov.w     #0x2ca, w1
    22ac:	80 9d 20    	mov.w     #0x9d8, w0
    22ae:	3c 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    22b0:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    22b2:	c0 6d 20    	mov.w     #0x6dc, w0
    22b4:	80 1f 78    	mov.w     w0, [w15++]
    22b6:	c7 01 20    	mov.w     #0x1c, w7
    22b8:	00 43 eb    	clr.b     w6
    22ba:	45 00 20    	mov.w     #0x4, w5
    22bc:	44 c0 b3    	mov.b     #0x4, w4
    22be:	23 4e 20    	mov.w     #0x4e2, w3
    22c0:	82 2c 20    	mov.w     #0x2c8, w2
    22c2:	a1 2c 20    	mov.w     #0x2ca, w1
    22c4:	20 9c 20    	mov.w     #0x9c2, w0
    22c6:	30 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    22c8:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    22ca:	20 6d 20    	mov.w     #0x6d2, w0
    22cc:	80 1f 78    	mov.w     w0, [w15++]
    22ce:	27 01 20    	mov.w     #0x12, w7
    22d0:	00 43 eb    	clr.b     w6
    22d2:	55 00 20    	mov.w     #0x5, w5
    22d4:	54 c0 b3    	mov.b     #0x5, w4
    22d6:	23 4e 20    	mov.w     #0x4e2, w3
    22d8:	82 2c 20    	mov.w     #0x2c8, w2
    22da:	a1 2c 20    	mov.w     #0x2ca, w1
    22dc:	c0 9a 20    	mov.w     #0x9ac, w0
    22de:	24 00 07    	rcall     0x2328 <_pin_init> <L0> <.LFB4> <.LFE3>
    22e0:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    22e2:	00 00 eb    	clr.w     w0
    22e4:	00 0f 78    	mov.w     w0, [w14]
    22e6:	07 00 37    	bra       0x22f6 <.L8>

000022e8 <.L9>:
        pin_digitalIn(&D[i]);
    22e8:	1e 00 78    	mov.w     [w14], w0
    22ea:	76 00 b9    	mul.su    w0, #0x16, w0
    22ec:	80 00 78    	mov.w     w0, w1
    22ee:	80 87 20    	mov.w     #0x878, w0
    22f0:	00 80 40    	add.w     w1, w0, w0
    22f2:	46 00 07    	rcall     0x2380 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    22f4:	1e 0f e8    	inc.w     [w14], [w14]

000022f6 <.L8>:
    22f6:	1e 00 78    	mov.w     [w14], w0
    22f8:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    22fa:	f6 ff 36    	bra       LEU, 0x22e8 <.L9>
    for (i = 0; i<6; i++)
    22fc:	00 00 eb    	clr.w     w0
    22fe:	00 0f 78    	mov.w     w0, [w14]
    2300:	07 00 37    	bra       0x2310 <.L10>

00002302 <.L11>:
        pin_analogIn(&A[i]);
    2302:	1e 00 78    	mov.w     [w14], w0
    2304:	76 00 b9    	mul.su    w0, #0x16, w0
    2306:	80 00 78    	mov.w     w0, w1
    2308:	c0 9a 20    	mov.w     #0x9ac, w0
    230a:	00 80 40    	add.w     w1, w0, w0
    230c:	95 00 07    	rcall     0x2438 <_pin_analogIn> <L0> <.LFB7> <.LFE6>
    230e:	1e 0f e8    	inc.w     [w14], [w14]

00002310 <.L10>:
    2310:	1e 00 78    	mov.w     [w14], w0
    2312:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2314:	f6 ff 36    	bra       LEU, 0x2302 <.L11>

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    2316:	00 2e 20    	mov.w     #0x2e0, w0
    2318:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    231a:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    231c:	00 c4 20    	mov.w     #0xc40, w0
    231e:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = 0;
    2320:	28 23 ef    	clr.w     0x328
    AD1CON1bits.ADON = 1;
    2322:	21 e3 a8    	bset.b    0x321, #0x7
}
    2324:	00 80 fa    	ulnk      
    2326:	00 00 06    	return    

00002328 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    2328:	10 00 fa    	lnk       #0x10
    232a:	00 0f 78    	mov.w     w0, [w14]
    232c:	11 07 98    	mov.w     w1, [w14+2]
    232e:	22 07 98    	mov.w     w2, [w14+4]
    2330:	33 07 98    	mov.w     w3, [w14+6]
    2332:	04 4f 98    	mov.b     w4, [w14+8]
    2334:	55 07 98    	mov.w     w5, [w14+10]
    2336:	46 4f 98    	mov.b     w6, [w14+12]
    2338:	77 07 98    	mov.w     w7, [w14+14]
    self->port = port;
    233a:	1e 00 78    	mov.w     [w14], w0
    233c:	9e 00 90    	mov.w     [w14+2], w1
    233e:	01 08 78    	mov.w     w1, [w0]
    self->tris = tris;
    2340:	1e 00 78    	mov.w     [w14], w0
    2342:	ae 00 90    	mov.w     [w14+4], w1
    2344:	11 00 98    	mov.w     w1, [w0+2]
    self->ans = ans;
    2346:	1e 00 78    	mov.w     [w14], w0
    2348:	be 00 90    	mov.w     [w14+6], w1
    234a:	21 00 98    	mov.w     w1, [w0+4]
    self->bit = bit;
    234c:	1e 00 78    	mov.w     [w14], w0
    234e:	8e 48 90    	mov.b     [w14+8], w1
    2350:	61 40 98    	mov.b     w1, [w0+6]
    self->annum = annum;
    2352:	1e 00 78    	mov.w     [w14], w0
    2354:	de 00 90    	mov.w     [w14+10], w1
    2356:	41 00 98    	mov.w     w1, [w0+8]
    self->rpshift = rpshift;
    2358:	1e 00 78    	mov.w     [w14], w0
    235a:	ce 48 90    	mov.b     [w14+12], w1
    235c:	21 48 98    	mov.b     w1, [w0+10]
    self->rpnum = rpnum;
    235e:	fe 00 90    	mov.w     [w14+14], w1
    2360:	1e 00 78    	mov.w     [w14], w0
    2362:	61 00 98    	mov.w     w1, [w0+12]
    self->rpor = rpor;
    2364:	1e 00 78    	mov.w     [w14], w0
    2366:	ce b8 97    	mov.w     [w14-8], w1
    2368:	71 00 98    	mov.w     w1, [w0+14]
    self->owner = NULL;
    236a:	1e 00 78    	mov.w     [w14], w0
    236c:	80 00 eb    	clr.w     w1
    236e:	01 08 98    	mov.w     w1, [w0+16]
    self->write = NULL;
    2370:	1e 00 78    	mov.w     [w14], w0
    2372:	80 00 eb    	clr.w     w1
    2374:	11 08 98    	mov.w     w1, [w0+18]
    self->read = NULL;
    2376:	1e 00 78    	mov.w     [w14], w0
    2378:	80 00 eb    	clr.w     w1
    237a:	21 08 98    	mov.w     w1, [w0+20]
}
    237c:	00 80 fa    	ulnk      
    237e:	00 00 06    	return    

00002380 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    2380:	02 00 fa    	lnk       #0x2
    2382:	00 0f 78    	mov.w     w0, [w14]
    if (self->ans)
    2384:	1e 00 78    	mov.w     [w14], w0
    2386:	20 00 90    	mov.w     [w0+4], w0
    2388:	00 00 e0    	cp0.w     w0
    238a:	0d 00 32    	bra       Z, 0x23a6 <.L14>
        bitclear(self->ans, self->bit);
    238c:	1e 00 78    	mov.w     [w14], w0
    238e:	20 00 90    	mov.w     [w0+4], w0
    2390:	9e 00 78    	mov.w     [w14], w1
    2392:	a1 00 90    	mov.w     [w1+4], w1
    2394:	11 01 78    	mov.w     [w1], w2
    2396:	9e 00 78    	mov.w     [w14], w1
    2398:	e1 40 90    	mov.b     [w1+6], w1
    239a:	81 80 fb    	ze        w1, w1
    239c:	13 00 20    	mov.w     #0x1, w3
    239e:	81 18 dd    	sl.w      w3, w1, w1
    23a0:	81 80 ea    	com.w     w1, w1
    23a2:	81 00 61    	and.w     w2, w1, w1
    23a4:	01 08 78    	mov.w     w1, [w0]

000023a6 <.L14>:
    bitset(self->tris, self->bit);
    23a6:	1e 00 78    	mov.w     [w14], w0
    23a8:	10 00 90    	mov.w     [w0+2], w0
    23aa:	9e 00 78    	mov.w     [w14], w1
    23ac:	91 00 90    	mov.w     [w1+2], w1
    23ae:	11 01 78    	mov.w     [w1], w2
    23b0:	9e 00 78    	mov.w     [w14], w1
    23b2:	e1 40 90    	mov.b     [w1+6], w1
    23b4:	81 80 fb    	ze        w1, w1
    23b6:	13 00 20    	mov.w     #0x1, w3
    23b8:	81 18 dd    	sl.w      w3, w1, w1
    23ba:	82 80 70    	ior.w     w1, w2, w1
    23bc:	01 08 78    	mov.w     w1, [w0]
    self->write = NULL;
    23be:	1e 00 78    	mov.w     [w14], w0
    23c0:	80 00 eb    	clr.w     w1
    23c2:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __digitalRead;    
    23c4:	1e 00 78    	mov.w     [w14], w0
    23c6:	21 0c 22    	mov.w     #0x20c2, w1
    23c8:	21 08 98    	mov.w     w1, [w0+20]
}
    23ca:	00 80 fa    	ulnk      
    23cc:	00 00 06    	return    

000023ce <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    23ce:	02 00 fa    	lnk       #0x2
    23d0:	00 0f 78    	mov.w     w0, [w14]
    if (self->ans)
    23d2:	1e 00 78    	mov.w     [w14], w0
    23d4:	20 00 90    	mov.w     [w0+4], w0
    23d6:	00 00 e0    	cp0.w     w0
    23d8:	0d 00 32    	bra       Z, 0x23f4 <.L16>
        bitclear(self->ans, self->bit);
    23da:	1e 00 78    	mov.w     [w14], w0
    23dc:	20 00 90    	mov.w     [w0+4], w0
    23de:	9e 00 78    	mov.w     [w14], w1
    23e0:	a1 00 90    	mov.w     [w1+4], w1
    23e2:	11 01 78    	mov.w     [w1], w2
    23e4:	9e 00 78    	mov.w     [w14], w1
    23e6:	e1 40 90    	mov.b     [w1+6], w1
    23e8:	81 80 fb    	ze        w1, w1
    23ea:	13 00 20    	mov.w     #0x1, w3
    23ec:	81 18 dd    	sl.w      w3, w1, w1
    23ee:	81 80 ea    	com.w     w1, w1
    23f0:	81 00 61    	and.w     w2, w1, w1
    23f2:	01 08 78    	mov.w     w1, [w0]

000023f4 <.L16>:
    bitclear(self->port, self->bit);
    23f4:	1e 00 78    	mov.w     [w14], w0
    23f6:	10 00 78    	mov.w     [w0], w0
    23f8:	9e 00 78    	mov.w     [w14], w1
    23fa:	91 00 78    	mov.w     [w1], w1
    23fc:	11 01 78    	mov.w     [w1], w2
    23fe:	9e 00 78    	mov.w     [w14], w1
    2400:	e1 40 90    	mov.b     [w1+6], w1
    2402:	81 80 fb    	ze        w1, w1
    2404:	13 00 20    	mov.w     #0x1, w3
    2406:	81 18 dd    	sl.w      w3, w1, w1
    2408:	81 80 ea    	com.w     w1, w1
    240a:	81 00 61    	and.w     w2, w1, w1
    240c:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->tris, self->bit);
    240e:	1e 00 78    	mov.w     [w14], w0
    2410:	10 00 90    	mov.w     [w0+2], w0
    2412:	9e 00 78    	mov.w     [w14], w1
    2414:	91 00 90    	mov.w     [w1+2], w1
    2416:	11 01 78    	mov.w     [w1], w2
    2418:	9e 00 78    	mov.w     [w14], w1
    241a:	e1 40 90    	mov.b     [w1+6], w1
    241c:	81 80 fb    	ze        w1, w1
    241e:	13 00 20    	mov.w     #0x1, w3
    2420:	81 18 dd    	sl.w      w3, w1, w1
    2422:	81 80 ea    	com.w     w1, w1
    2424:	81 00 61    	and.w     w2, w1, w1
    2426:	01 08 78    	mov.w     w1, [w0]
    self->write = __digitalWrite;
    2428:	1e 00 78    	mov.w     [w14], w0
    242a:	e1 07 22    	mov.w     #0x207e, w1
    242c:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __digitalRead;
    242e:	1e 00 78    	mov.w     [w14], w0
    2430:	21 0c 22    	mov.w     #0x20c2, w1
    2432:	21 08 98    	mov.w     w1, [w0+20]
}
    2434:	00 80 fa    	ulnk      
    2436:	00 00 06    	return    

00002438 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    2438:	02 00 fa    	lnk       #0x2
    243a:	00 0f 78    	mov.w     w0, [w14]
    if (!(self->ans))
    243c:	1e 00 78    	mov.w     [w14], w0
    243e:	20 00 90    	mov.w     [w0+4], w0
    2440:	00 00 e0    	cp0.w     w0
    2442:	1f 00 32    	bra       Z, 0x2482 <.L20>
        return;
    bitset(self->tris, self->bit);
    2444:	1e 00 78    	mov.w     [w14], w0
    2446:	10 00 90    	mov.w     [w0+2], w0
    2448:	9e 00 78    	mov.w     [w14], w1
    244a:	91 00 90    	mov.w     [w1+2], w1
    244c:	11 01 78    	mov.w     [w1], w2
    244e:	9e 00 78    	mov.w     [w14], w1
    2450:	e1 40 90    	mov.b     [w1+6], w1
    2452:	81 80 fb    	ze        w1, w1
    2454:	13 00 20    	mov.w     #0x1, w3
    2456:	81 18 dd    	sl.w      w3, w1, w1
    2458:	82 80 70    	ior.w     w1, w2, w1
    245a:	01 08 78    	mov.w     w1, [w0]
    bitset(self->ans, self->bit);
    245c:	1e 00 78    	mov.w     [w14], w0
    245e:	20 00 90    	mov.w     [w0+4], w0
    2460:	9e 00 78    	mov.w     [w14], w1
    2462:	a1 00 90    	mov.w     [w1+4], w1
    2464:	11 01 78    	mov.w     [w1], w2
    2466:	9e 00 78    	mov.w     [w14], w1
    2468:	e1 40 90    	mov.b     [w1+6], w1
    246a:	81 80 fb    	ze        w1, w1
    246c:	13 00 20    	mov.w     #0x1, w3
    246e:	81 18 dd    	sl.w      w3, w1, w1
    2470:	82 80 70    	ior.w     w1, w2, w1
    2472:	01 08 78    	mov.w     w1, [w0]
    self->write = NULL;
    2474:	1e 00 78    	mov.w     [w14], w0
    2476:	80 00 eb    	clr.w     w1
    2478:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __analogRead;
    247a:	1e 00 78    	mov.w     [w14], w0
    247c:	41 0e 22    	mov.w     #0x20e4, w1
    247e:	21 08 98    	mov.w     w1, [w0+20]
    2480:	01 00 37    	bra       0x2484 <.L17>

00002482 <.L20>:
    2482:	00 00 00    	nop       

00002484 <.L17>:
}
    2484:	00 80 fa    	ulnk      
    2486:	00 00 06    	return    

00002488 <_pin_set>:

void pin_set(_PIN *self) {
    2488:	02 00 fa    	lnk       #0x2
    248a:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    248c:	1e 00 78    	mov.w     [w14], w0
    248e:	90 08 90    	mov.w     [w0+18], w1
    2490:	e0 07 22    	mov.w     #0x207e, w0
    2492:	80 8f 50    	sub.w     w1, w0, [w15]
    2494:	0c 00 3a    	bra       NZ, 0x24ae <.L21>
        bitset(self->port, self->bit);
    2496:	1e 00 78    	mov.w     [w14], w0
    2498:	10 00 78    	mov.w     [w0], w0
    249a:	9e 00 78    	mov.w     [w14], w1
    249c:	91 00 78    	mov.w     [w1], w1
    249e:	11 01 78    	mov.w     [w1], w2
    24a0:	9e 00 78    	mov.w     [w14], w1
    24a2:	e1 40 90    	mov.b     [w1+6], w1
    24a4:	81 80 fb    	ze        w1, w1
    24a6:	13 00 20    	mov.w     #0x1, w3
    24a8:	81 18 dd    	sl.w      w3, w1, w1
    24aa:	82 80 70    	ior.w     w1, w2, w1
    24ac:	01 08 78    	mov.w     w1, [w0]

000024ae <.L21>:
}
    24ae:	00 80 fa    	ulnk      
    24b0:	00 00 06    	return    

000024b2 <_pin_clear>:

void pin_clear(_PIN *self) {
    24b2:	02 00 fa    	lnk       #0x2
    24b4:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    24b6:	1e 00 78    	mov.w     [w14], w0
    24b8:	90 08 90    	mov.w     [w0+18], w1
    24ba:	e0 07 22    	mov.w     #0x207e, w0
    24bc:	80 8f 50    	sub.w     w1, w0, [w15]
    24be:	0d 00 3a    	bra       NZ, 0x24da <.L23>
        bitclear(self->port, self->bit);
    24c0:	1e 00 78    	mov.w     [w14], w0
    24c2:	10 00 78    	mov.w     [w0], w0
    24c4:	9e 00 78    	mov.w     [w14], w1
    24c6:	91 00 78    	mov.w     [w1], w1
    24c8:	11 01 78    	mov.w     [w1], w2
    24ca:	9e 00 78    	mov.w     [w14], w1
    24cc:	e1 40 90    	mov.b     [w1+6], w1
    24ce:	81 80 fb    	ze        w1, w1
    24d0:	13 00 20    	mov.w     #0x1, w3
    24d2:	81 18 dd    	sl.w      w3, w1, w1
    24d4:	81 80 ea    	com.w     w1, w1
    24d6:	81 00 61    	and.w     w2, w1, w1
    24d8:	01 08 78    	mov.w     w1, [w0]

000024da <.L23>:
}
    24da:	00 80 fa    	ulnk      
    24dc:	00 00 06    	return    

000024de <_pin_toggle>:

void pin_toggle(_PIN *self) {
    24de:	02 00 fa    	lnk       #0x2
    24e0:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    24e2:	1e 00 78    	mov.w     [w14], w0
    24e4:	90 08 90    	mov.w     [w0+18], w1
    24e6:	e0 07 22    	mov.w     #0x207e, w0
    24e8:	80 8f 50    	sub.w     w1, w0, [w15]
    24ea:	0c 00 3a    	bra       NZ, 0x2504 <.L25>
        bitflip(self->port, self->bit);
    24ec:	1e 00 78    	mov.w     [w14], w0
    24ee:	10 00 78    	mov.w     [w0], w0
    24f0:	9e 00 78    	mov.w     [w14], w1
    24f2:	91 00 78    	mov.w     [w1], w1
    24f4:	11 01 78    	mov.w     [w1], w2
    24f6:	9e 00 78    	mov.w     [w14], w1
    24f8:	e1 40 90    	mov.b     [w1+6], w1
    24fa:	81 80 fb    	ze        w1, w1
    24fc:	13 00 20    	mov.w     #0x1, w3
    24fe:	81 18 dd    	sl.w      w3, w1, w1
    2500:	81 00 69    	xor.w     w2, w1, w1
    2502:	01 08 78    	mov.w     w1, [w0]

00002504 <.L25>:
}
    2504:	00 80 fa    	ulnk      
    2506:	00 00 06    	return    

00002508 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    2508:	04 00 fa    	lnk       #0x4
    250a:	00 0f 78    	mov.w     w0, [w14]
    250c:	11 07 98    	mov.w     w1, [w14+2]
    if (self->write)
    250e:	1e 00 78    	mov.w     [w14], w0
    2510:	10 08 90    	mov.w     [w0+18], w0
    2512:	00 00 e0    	cp0.w     w0
    2514:	05 00 32    	bra       Z, 0x2520 <.L27>
        self->write(self, val);
    2516:	1e 00 78    	mov.w     [w14], w0
    2518:	10 09 90    	mov.w     [w0+18], w2
    251a:	9e 00 90    	mov.w     [w14+2], w1
    251c:	1e 00 78    	mov.w     [w14], w0
    251e:	02 00 01    	call      w2

00002520 <.L27>:
}
    2520:	00 80 fa    	ulnk      
    2522:	00 00 06    	return    

00002524 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    2524:	02 00 fa    	lnk       #0x2
    2526:	00 0f 78    	mov.w     w0, [w14]
    if (self->read)
    2528:	1e 00 78    	mov.w     [w14], w0
    252a:	20 08 90    	mov.w     [w0+20], w0
    252c:	00 00 e0    	cp0.w     w0
    252e:	05 00 32    	bra       Z, 0x253a <.L30>
        return self->read(self);
    2530:	1e 00 78    	mov.w     [w14], w0
    2532:	a0 08 90    	mov.w     [w0+20], w1
    2534:	1e 00 78    	mov.w     [w14], w0
    2536:	01 00 01    	call      w1
    2538:	01 00 37    	bra       0x253c <.L31>

0000253a <.L30>:
    else
        return 0xFFFF;
    253a:	00 80 eb    	setm.w    w0

0000253c <.L31>:
}
    253c:	00 80 fa    	ulnk      
    253e:	00 00 06    	return    

00002540 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    2540:	08 00 fa    	lnk       #0x8
    2542:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2544:	3e 00 90    	mov.w     [w14+6], w0
    2546:	00 08 90    	mov.w     [w0+16], w0
    2548:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    254a:	00 00 eb    	clr.w     w0
    254c:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxR);
    254e:	1e 00 78    	mov.w     [w14], w0
    2550:	30 00 90    	mov.w     [w0+6], w0
    2552:	10 00 78    	mov.w     [w0], w0
    2554:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    2556:	1e 02 90    	mov.w     [w14+2], w4
    2558:	ae 02 90    	mov.w     [w14+4], w5
    255a:	1e 00 78    	mov.w     [w14], w0
    255c:	20 00 90    	mov.w     [w0+4], w0
    255e:	10 00 78    	mov.w     [w0], w0
    2560:	80 00 eb    	clr.w     w1
    2562:	00 01 be    	mov.d     w0, w2
    2564:	04 00 be    	mov.d     w4, w0
    2566:	b9 f7 07    	rcall     0x14da <___udivsi3>
    2568:	00 00 78    	mov.w     w0, w0
}
    256a:	00 80 fa    	ulnk      
    256c:	00 00 06    	return    

0000256e <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    256e:	0a 00 fa    	lnk       #0xa
    2570:	30 07 98    	mov.w     w0, [w14+6]
    2572:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2574:	3e 00 90    	mov.w     [w14+6], w0
    2576:	00 08 90    	mov.w     [w0+16], w0
    2578:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    257a:	4e 00 90    	mov.w     [w14+8], w0
    257c:	61 01 b8    	mul.uu    w0, #0x1, w2
    257e:	1e 00 78    	mov.w     [w14], w0
    2580:	20 00 90    	mov.w     [w0+4], w0
    2582:	10 00 78    	mov.w     [w0], w0
    2584:	80 00 eb    	clr.w     w1
    2586:	00 9a b9    	mul.ss    w3, w0, w4
    2588:	04 02 78    	mov.w     w4, w4
    258a:	02 8b b9    	mul.ss    w1, w2, w6
    258c:	86 02 78    	mov.w     w6, w5
    258e:	05 02 42    	add.w     w4, w5, w4
    2590:	00 10 b8    	mul.uu    w2, w0, w0
    2592:	01 02 42    	add.w     w4, w1, w4
    2594:	84 00 78    	mov.w     w4, w1
    2596:	10 07 98    	mov.w     w0, [w14+2]
    2598:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxR) = temp.w[1];
    259a:	1e 00 78    	mov.w     [w14], w0
    259c:	30 00 90    	mov.w     [w0+6], w0
    259e:	ae 00 90    	mov.w     [w14+4], w1
    25a0:	01 08 78    	mov.w     w1, [w0]
}
    25a2:	00 80 fa    	ulnk      
    25a4:	00 00 06    	return    

000025a6 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    25a6:	08 00 fa    	lnk       #0x8
    25a8:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    25aa:	3e 00 90    	mov.w     [w14+6], w0
    25ac:	00 08 90    	mov.w     [w0+16], w0
    25ae:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    25b0:	00 00 eb    	clr.w     w0
    25b2:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    25b4:	1e 00 78    	mov.w     [w14], w0
    25b6:	20 00 90    	mov.w     [w0+4], w0
    25b8:	90 00 78    	mov.w     [w0], w1
    25ba:	1e 00 78    	mov.w     [w14], w0
    25bc:	60 00 90    	mov.w     [w0+12], w0
    25be:	00 80 50    	sub.w     w1, w0, w0
    25c0:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    25c2:	1e 02 90    	mov.w     [w14+2], w4
    25c4:	ae 02 90    	mov.w     [w14+4], w5
    25c6:	1e 00 78    	mov.w     [w14], w0
    25c8:	70 00 90    	mov.w     [w0+14], w0
    25ca:	80 00 eb    	clr.w     w1
    25cc:	00 01 be    	mov.d     w0, w2
    25ce:	04 00 be    	mov.d     w4, w0
    25d0:	84 f7 07    	rcall     0x14da <___udivsi3>
    25d2:	00 00 78    	mov.w     w0, w0
}
    25d4:	00 80 fa    	ulnk      
    25d6:	00 00 06    	return    

000025d8 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    25d8:	0a 00 fa    	lnk       #0xa
    25da:	30 07 98    	mov.w     w0, [w14+6]
    25dc:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    25de:	3e 00 90    	mov.w     [w14+6], w0
    25e0:	00 08 90    	mov.w     [w0+16], w0
    25e2:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    25e4:	4e 00 90    	mov.w     [w14+8], w0
    25e6:	61 01 b8    	mul.uu    w0, #0x1, w2
    25e8:	1e 00 78    	mov.w     [w14], w0
    25ea:	70 00 90    	mov.w     [w0+14], w0
    25ec:	80 00 eb    	clr.w     w1
    25ee:	00 9a b9    	mul.ss    w3, w0, w4
    25f0:	04 02 78    	mov.w     w4, w4
    25f2:	02 8b b9    	mul.ss    w1, w2, w6
    25f4:	86 02 78    	mov.w     w6, w5
    25f6:	05 02 42    	add.w     w4, w5, w4
    25f8:	00 10 b8    	mul.uu    w2, w0, w0
    25fa:	01 02 42    	add.w     w4, w1, w4
    25fc:	84 00 78    	mov.w     w4, w1
    25fe:	10 07 98    	mov.w     w0, [w14+2]
    2600:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    2602:	1e 00 78    	mov.w     [w14], w0
    2604:	20 00 90    	mov.w     [w0+4], w0
    2606:	9e 00 78    	mov.w     [w14], w1
    2608:	61 01 90    	mov.w     [w1+12], w2
    260a:	ae 00 90    	mov.w     [w14+4], w1
    260c:	81 00 41    	add.w     w2, w1, w1
    260e:	01 08 78    	mov.w     w1, [w0]
}
    2610:	00 80 fa    	ulnk      
    2612:	00 00 06    	return    

00002614 <_init_oc>:

void init_oc(void) {
    2614:	00 00 fa    	lnk       #0x0
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    2616:	26 01 20    	mov.w     #0x12, w6
    2618:	85 19 20    	mov.w     #0x198, w5
    261a:	64 19 20    	mov.w     #0x196, w4
    261c:	43 19 20    	mov.w     #0x194, w3
    261e:	22 19 20    	mov.w     #0x192, w2
    2620:	01 19 20    	mov.w     #0x190, w1
    2622:	00 a3 20    	mov.w     #0xa30, w0
    2624:	42 00 07    	rcall     0x26aa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    2626:	36 01 20    	mov.w     #0x13, w6
    2628:	25 1a 20    	mov.w     #0x1a2, w5
    262a:	04 1a 20    	mov.w     #0x1a0, w4
    262c:	e3 19 20    	mov.w     #0x19e, w3
    262e:	c2 19 20    	mov.w     #0x19c, w2
    2630:	a1 19 20    	mov.w     #0x19a, w1
    2632:	20 a4 20    	mov.w     #0xa42, w0
    2634:	3a 00 07    	rcall     0x26aa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    2636:	46 01 20    	mov.w     #0x14, w6
    2638:	c5 1a 20    	mov.w     #0x1ac, w5
    263a:	a4 1a 20    	mov.w     #0x1aa, w4
    263c:	83 1a 20    	mov.w     #0x1a8, w3
    263e:	62 1a 20    	mov.w     #0x1a6, w2
    2640:	41 1a 20    	mov.w     #0x1a4, w1
    2642:	40 a5 20    	mov.w     #0xa54, w0
    2644:	32 00 07    	rcall     0x26aa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    2646:	56 01 20    	mov.w     #0x15, w6
    2648:	65 1b 20    	mov.w     #0x1b6, w5
    264a:	44 1b 20    	mov.w     #0x1b4, w4
    264c:	23 1b 20    	mov.w     #0x1b2, w3
    264e:	02 1b 20    	mov.w     #0x1b0, w2
    2650:	e1 1a 20    	mov.w     #0x1ae, w1
    2652:	60 a6 20    	mov.w     #0xa66, w0
    2654:	2a 00 07    	rcall     0x26aa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    2656:	66 01 20    	mov.w     #0x16, w6
    2658:	05 1c 20    	mov.w     #0x1c0, w5
    265a:	e4 1b 20    	mov.w     #0x1be, w4
    265c:	c3 1b 20    	mov.w     #0x1bc, w3
    265e:	a2 1b 20    	mov.w     #0x1ba, w2
    2660:	81 1b 20    	mov.w     #0x1b8, w1
    2662:	80 a7 20    	mov.w     #0xa78, w0
    2664:	22 00 07    	rcall     0x26aa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    2666:	76 01 20    	mov.w     #0x17, w6
    2668:	a5 1c 20    	mov.w     #0x1ca, w5
    266a:	84 1c 20    	mov.w     #0x1c8, w4
    266c:	63 1c 20    	mov.w     #0x1c6, w3
    266e:	42 1c 20    	mov.w     #0x1c4, w2
    2670:	21 1c 20    	mov.w     #0x1c2, w1
    2672:	a0 a8 20    	mov.w     #0xa8a, w0
    2674:	1a 00 07    	rcall     0x26aa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    2676:	86 01 20    	mov.w     #0x18, w6
    2678:	45 1d 20    	mov.w     #0x1d4, w5
    267a:	24 1d 20    	mov.w     #0x1d2, w4
    267c:	03 1d 20    	mov.w     #0x1d0, w3
    267e:	e2 1c 20    	mov.w     #0x1ce, w2
    2680:	c1 1c 20    	mov.w     #0x1cc, w1
    2682:	c0 a9 20    	mov.w     #0xa9c, w0
    2684:	12 00 07    	rcall     0x26aa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    2686:	96 01 20    	mov.w     #0x19, w6
    2688:	e5 1d 20    	mov.w     #0x1de, w5
    268a:	c4 1d 20    	mov.w     #0x1dc, w4
    268c:	a3 1d 20    	mov.w     #0x1da, w3
    268e:	82 1d 20    	mov.w     #0x1d8, w2
    2690:	61 1d 20    	mov.w     #0x1d6, w1
    2692:	e0 aa 20    	mov.w     #0xaae, w0
    2694:	0a 00 07    	rcall     0x26aa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    2696:	36 02 20    	mov.w     #0x23, w6
    2698:	85 1e 20    	mov.w     #0x1e8, w5
    269a:	64 1e 20    	mov.w     #0x1e6, w4
    269c:	43 1e 20    	mov.w     #0x1e4, w3
    269e:	22 1e 20    	mov.w     #0x1e2, w2
    26a0:	01 1e 20    	mov.w     #0x1e0, w1
    26a2:	00 ac 20    	mov.w     #0xac0, w0
    26a4:	02 00 07    	rcall     0x26aa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    26a6:	00 80 fa    	ulnk      
    26a8:	00 00 06    	return    

000026aa <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    26aa:	0e 00 fa    	lnk       #0xe
    26ac:	00 0f 78    	mov.w     w0, [w14]
    26ae:	11 07 98    	mov.w     w1, [w14+2]
    26b0:	22 07 98    	mov.w     w2, [w14+4]
    26b2:	33 07 98    	mov.w     w3, [w14+6]
    26b4:	44 07 98    	mov.w     w4, [w14+8]
    26b6:	55 07 98    	mov.w     w5, [w14+10]
    26b8:	66 07 98    	mov.w     w6, [w14+12]
    self->OCxCON1 = OCxCON1;
    26ba:	1e 00 78    	mov.w     [w14], w0
    26bc:	9e 00 90    	mov.w     [w14+2], w1
    26be:	01 08 78    	mov.w     w1, [w0]
    self->OCxCON2 = OCxCON2;
    26c0:	1e 00 78    	mov.w     [w14], w0
    26c2:	ae 00 90    	mov.w     [w14+4], w1
    26c4:	11 00 98    	mov.w     w1, [w0+2]
    self->OCxRS = OCxRS;
    26c6:	1e 00 78    	mov.w     [w14], w0
    26c8:	be 00 90    	mov.w     [w14+6], w1
    26ca:	21 00 98    	mov.w     w1, [w0+4]
    self->OCxR = OCxR;
    26cc:	1e 00 78    	mov.w     [w14], w0
    26ce:	ce 00 90    	mov.w     [w14+8], w1
    26d0:	31 00 98    	mov.w     w1, [w0+6]
    self->OCxTMR = OCxTMR;
    26d2:	1e 00 78    	mov.w     [w14], w0
    26d4:	de 00 90    	mov.w     [w14+10], w1
    26d6:	41 00 98    	mov.w     w1, [w0+8]
    self->servooffset = (uint16_t)(1e-3*FCY);
    26d8:	1e 00 78    	mov.w     [w14], w0
    26da:	01 e8 23    	mov.w     #0x3e80, w1
    26dc:	61 00 98    	mov.w     w1, [w0+12]
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    26de:	1e 00 78    	mov.w     [w14], w0
    26e0:	01 e8 23    	mov.w     #0x3e80, w1
    26e2:	71 00 98    	mov.w     w1, [w0+14]
    self->rpnum = rpnum;
    26e4:	1e 00 78    	mov.w     [w14], w0
    26e6:	ee 00 90    	mov.w     [w14+12], w1
    26e8:	51 00 98    	mov.w     w1, [w0+10]
    self->pin = NULL;
    26ea:	1e 00 78    	mov.w     [w14], w0
    26ec:	80 00 eb    	clr.w     w1
    26ee:	01 08 98    	mov.w     w1, [w0+16]
}
    26f0:	00 80 fa    	ulnk      
    26f2:	00 00 06    	return    

000026f4 <_oc_free>:

void oc_free(_OC *self) {
    26f4:	02 00 fa    	lnk       #0x2
    26f6:	00 0f 78    	mov.w     w0, [w14]
    *(self->OCxCON1) = 0;
    26f8:	1e 00 78    	mov.w     [w14], w0
    26fa:	10 00 78    	mov.w     [w0], w0
    26fc:	80 00 eb    	clr.w     w1
    26fe:	01 08 78    	mov.w     w1, [w0]
    *(self->OCxCON2) = 0;
    2700:	1e 00 78    	mov.w     [w14], w0
    2702:	10 00 90    	mov.w     [w0+2], w0
    2704:	80 00 eb    	clr.w     w1
    2706:	01 08 78    	mov.w     w1, [w0]
    if (self->pin) {
    2708:	1e 00 78    	mov.w     [w14], w0
    270a:	00 08 90    	mov.w     [w0+16], w0
    270c:	00 00 e0    	cp0.w     w0
    270e:	2f 00 32    	bra       Z, 0x276e <.L7>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2710:	11 3a 80    	mov.w     0x742, w1
    2712:	f0 0b 20    	mov.w     #0xbf, w0
    2714:	00 81 60    	and.w     w1, w0, w2
    2716:	60 04 20    	mov.w     #0x46, w0
    2718:	71 05 20    	mov.w     #0x57, w1
    271a:	23 74 20    	mov.w     #0x742, w3
    271c:	80 49 78    	mov.b     w0, [w3]
    271e:	81 49 78    	mov.b     w1, [w3]
    2720:	82 49 78    	mov.b     w2, [w3]
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    2722:	1e 00 78    	mov.w     [w14], w0
    2724:	00 08 90    	mov.w     [w0+16], w0
    2726:	70 00 90    	mov.w     [w0+14], w0
    2728:	9e 00 78    	mov.w     [w14], w1
    272a:	81 08 90    	mov.w     [w1+16], w1
    272c:	f1 00 90    	mov.w     [w1+14], w1
    272e:	11 01 78    	mov.w     [w1], w2
    2730:	9e 00 78    	mov.w     [w14], w1
    2732:	81 08 90    	mov.w     [w1+16], w1
    2734:	a1 48 90    	mov.b     [w1+10], w1
    2736:	81 80 fb    	ze        w1, w1
    2738:	f3 03 20    	mov.w     #0x3f, w3
    273a:	81 18 dd    	sl.w      w3, w1, w1
    273c:	81 80 ea    	com.w     w1, w1
    273e:	81 00 61    	and.w     w2, w1, w1
    2740:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2742:	10 3a 80    	mov.w     0x742, w0
    2744:	00 01 78    	mov.w     w0, w2
    2746:	02 60 a0    	bset.w    w2, #0x6
    2748:	60 04 20    	mov.w     #0x46, w0
    274a:	71 05 20    	mov.w     #0x57, w1
    274c:	23 74 20    	mov.w     #0x742, w3
    274e:	80 49 78    	mov.b     w0, [w3]
    2750:	81 49 78    	mov.b     w1, [w3]
    2752:	82 49 78    	mov.b     w2, [w3]
        self->pin->owner = NULL;
    2754:	1e 00 78    	mov.w     [w14], w0
    2756:	00 08 90    	mov.w     [w0+16], w0
    2758:	80 00 eb    	clr.w     w1
    275a:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->pin);
    275c:	1e 00 78    	mov.w     [w14], w0
    275e:	00 08 90    	mov.w     [w0+16], w0
    2760:	36 fe 07    	rcall     0x23ce <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_clear(self->pin);
    2762:	1e 00 78    	mov.w     [w14], w0
    2764:	00 08 90    	mov.w     [w0+16], w0
    2766:	a5 fe 07    	rcall     0x24b2 <_pin_clear> <L0> <.LFB9> <.LFE8>
        self->pin = NULL;
    2768:	1e 00 78    	mov.w     [w14], w0
    276a:	80 00 eb    	clr.w     w1
    276c:	01 08 98    	mov.w     w1, [w0+16]

0000276e <.L7>:
    }
}
    276e:	00 80 fa    	ulnk      
    2770:	00 00 06    	return    

00002772 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    2772:	10 00 fa    	lnk       #0x10
    2774:	88 1f 78    	mov.w     w8, [w15++]
    2776:	20 07 98    	mov.w     w0, [w14+4]
    2778:	31 07 98    	mov.w     w1, [w14+6]
    277a:	42 07 98    	mov.w     w2, [w14+8]
    277c:	54 07 98    	mov.w     w4, [w14+10]
    277e:	65 07 98    	mov.w     w5, [w14+12]
    2780:	73 07 98    	mov.w     w3, [w14+14]
    WORD32 temp;

    if (pin->rpnum==-1)
    2782:	3e 00 90    	mov.w     [w14+6], w0
    2784:	60 00 90    	mov.w     [w0+12], w0
    2786:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2788:	9c 00 32    	bra       Z, 0x28c2 <.L18>
        return;
    if (pin->owner==NULL) {
    278a:	3e 00 90    	mov.w     [w14+6], w0
    278c:	00 08 90    	mov.w     [w0+16], w0
    278e:	00 00 e0    	cp0.w     w0
    2790:	33 00 3a    	bra       NZ, 0x27f8 <.L12>
        self->pin = pin;
    2792:	2e 00 90    	mov.w     [w14+4], w0
    2794:	be 00 90    	mov.w     [w14+6], w1
    2796:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    2798:	3e 00 90    	mov.w     [w14+6], w0
    279a:	ae 00 90    	mov.w     [w14+4], w1
    279c:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    279e:	11 3a 80    	mov.w     0x742, w1
    27a0:	f0 0b 20    	mov.w     #0xbf, w0
    27a2:	00 81 60    	and.w     w1, w0, w2
    27a4:	60 04 20    	mov.w     #0x46, w0
    27a6:	71 05 20    	mov.w     #0x57, w1
    27a8:	23 74 20    	mov.w     #0x742, w3
    27aa:	80 49 78    	mov.b     w0, [w3]
    27ac:	81 49 78    	mov.b     w1, [w3]
    27ae:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    27b0:	3e 00 90    	mov.w     [w14+6], w0
    27b2:	70 00 90    	mov.w     [w0+14], w0
    27b4:	be 00 90    	mov.w     [w14+6], w1
    27b6:	f1 00 90    	mov.w     [w1+14], w1
    27b8:	11 01 78    	mov.w     [w1], w2
    27ba:	be 00 90    	mov.w     [w14+6], w1
    27bc:	a1 48 90    	mov.b     [w1+10], w1
    27be:	81 80 fb    	ze        w1, w1
    27c0:	f3 03 20    	mov.w     #0x3f, w3
    27c2:	81 18 dd    	sl.w      w3, w1, w1
    27c4:	81 80 ea    	com.w     w1, w1
    27c6:	81 00 61    	and.w     w2, w1, w1
    27c8:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    27ca:	3e 00 90    	mov.w     [w14+6], w0
    27cc:	70 00 90    	mov.w     [w0+14], w0
    27ce:	be 00 90    	mov.w     [w14+6], w1
    27d0:	f1 00 90    	mov.w     [w1+14], w1
    27d2:	11 01 78    	mov.w     [w1], w2
    27d4:	ae 00 90    	mov.w     [w14+4], w1
    27d6:	d1 01 90    	mov.w     [w1+10], w3
    27d8:	be 00 90    	mov.w     [w14+6], w1
    27da:	a1 48 90    	mov.b     [w1+10], w1
    27dc:	81 80 fb    	ze        w1, w1
    27de:	81 18 dd    	sl.w      w3, w1, w1
    27e0:	82 80 70    	ior.w     w1, w2, w1
    27e2:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    27e4:	10 3a 80    	mov.w     0x742, w0
    27e6:	00 01 78    	mov.w     w0, w2
    27e8:	02 60 a0    	bset.w    w2, #0x6
    27ea:	60 04 20    	mov.w     #0x46, w0
    27ec:	71 05 20    	mov.w     #0x57, w1
    27ee:	23 74 20    	mov.w     #0x742, w3
    27f0:	80 49 78    	mov.b     w0, [w3]
    27f2:	81 49 78    	mov.b     w1, [w3]
    27f4:	82 49 78    	mov.b     w2, [w3]
    27f6:	05 00 37    	bra       0x2802 <.L13>

000027f8 <.L12>:
    } else if (pin->owner!=(void *)self) {
    27f8:	3e 00 90    	mov.w     [w14+6], w0
    27fa:	80 08 90    	mov.w     [w0+16], w1
    27fc:	2e 00 90    	mov.w     [w14+4], w0
    27fe:	80 8f 50    	sub.w     w1, w0, [w15]
    2800:	62 00 3a    	bra       NZ, 0x28c6 <.L19>

00002802 <.L13>:
        return;
    }
    if (timer) {
    2802:	4e 00 90    	mov.w     [w14+8], w0
    2804:	00 00 e0    	cp0.w     w0
    2806:	1c 00 32    	bra       Z, 0x2840 <.L14>
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    2808:	2e 00 90    	mov.w     [w14+4], w0
    280a:	10 00 78    	mov.w     [w0], w0
    280c:	ce 00 90    	mov.w     [w14+8], w1
    280e:	e1 00 90    	mov.w     [w1+12], w1
    2810:	ca 08 dd    	sl.w      w1, #0xa, w1
    2812:	61 00 b3    	ior.w     #0x6, w1
    2814:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    2816:	2e 00 90    	mov.w     [w14+4], w0
    2818:	10 00 90    	mov.w     [w0+2], w0
    281a:	f1 01 20    	mov.w     #0x1f, w1
    281c:	01 08 78    	mov.w     w1, [w0]
        timer_setFreq(timer, freq);
    281e:	5e 01 90    	mov.w     [w14+10], w2
    2820:	ee 01 90    	mov.w     [w14+12], w3
    2822:	4e 00 90    	mov.w     [w14+8], w0
    2824:	e4 f8 07    	rcall     0x19ee <_timer_setFreq> <L0> <.LFB10> <.LFE9>
        *(self->OCxRS) = *(timer->PRx);
    2826:	2e 00 90    	mov.w     [w14+4], w0
    2828:	20 00 90    	mov.w     [w0+4], w0
    282a:	ce 00 90    	mov.w     [w14+8], w1
    282c:	91 00 90    	mov.w     [w1+2], w1
    282e:	91 00 78    	mov.w     [w1], w1
    2830:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxTMR) = 0;
    2832:	2e 00 90    	mov.w     [w14+4], w0
    2834:	40 00 90    	mov.w     [w0+8], w0
    2836:	80 00 eb    	clr.w     w1
    2838:	01 08 78    	mov.w     w1, [w0]
        timer_start(timer);
    283a:	4e 00 90    	mov.w     [w14+8], w0
    283c:	0d f9 07    	rcall     0x1a58 <_timer_start> <L0> <.LFB13> <.LFE12>
    283e:	25 00 37    	bra       0x288a <.L15>

00002840 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    2840:	2e 00 90    	mov.w     [w14+4], w0
    2842:	10 00 78    	mov.w     [w0], w0
    2844:	61 c0 21    	mov.w     #0x1c06, w1
    2846:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    2848:	2e 00 90    	mov.w     [w14+4], w0
    284a:	10 00 90    	mov.w     [w0+2], w0
    284c:	f1 01 20    	mov.w     #0x1f, w1
    284e:	01 08 78    	mov.w     w1, [w0]
        if (freq<(FCY/65536.))
    2850:	18 c0 b3    	mov.b     #0x1, w8
    2852:	02 40 22    	mov.w     #0x2400, w2
    2854:	43 37 24    	mov.w     #0x4374, w3
    2856:	5e 00 90    	mov.w     [w14+10], w0
    2858:	ee 00 90    	mov.w     [w14+12], w1
    285a:	97 f5 07    	rcall     0x138a <___eqsf2> <___lesf2> <___ltsf2>
    285c:	00 00 e0    	cp0.w     w0
    285e:	01 00 35    	bra       LT, 0x2862 <.L16>
    2860:	00 44 eb    	clr.b     w8

00002862 <.L16>:
    2862:	08 04 e0    	cp0.b     w8
    2864:	05 00 32    	bra       Z, 0x2870 <.L17>
            *(self->OCxRS) = 0xFFFF;
    2866:	2e 00 90    	mov.w     [w14+4], w0
    2868:	20 00 90    	mov.w     [w0+4], w0
    286a:	80 80 eb    	setm.w    w1
    286c:	01 08 78    	mov.w     w1, [w0]
    286e:	0d 00 37    	bra       0x288a <.L15>

00002870 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    2870:	2e 00 90    	mov.w     [w14+4], w0
    2872:	20 04 90    	mov.w     [w0+4], w8
    2874:	5e 01 90    	mov.w     [w14+10], w2
    2876:	ee 01 90    	mov.w     [w14+12], w3
    2878:	00 40 22    	mov.w     #0x2400, w0
    287a:	41 b7 24    	mov.w     #0x4b74, w1
    287c:	44 f5 07    	rcall     0x1306 <___divsf3>
    287e:	02 00 20    	mov.w     #0x0, w2
    2880:	03 f8 23    	mov.w     #0x3f80, w3
    2882:	e3 f4 07    	rcall     0x124a <___subsf3>
    2884:	86 f5 07    	rcall     0x1392 <___fixunssfsi>
    2886:	00 00 78    	mov.w     w0, w0
    2888:	00 0c 78    	mov.w     w0, [w8]

0000288a <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    288a:	7e 00 90    	mov.w     [w14+14], w0
    288c:	61 01 b8    	mul.uu    w0, #0x1, w2
    288e:	2e 00 90    	mov.w     [w14+4], w0
    2890:	20 00 90    	mov.w     [w0+4], w0
    2892:	10 00 78    	mov.w     [w0], w0
    2894:	80 00 eb    	clr.w     w1
    2896:	00 9a b9    	mul.ss    w3, w0, w4
    2898:	04 02 78    	mov.w     w4, w4
    289a:	02 8b b9    	mul.ss    w1, w2, w6
    289c:	86 02 78    	mov.w     w6, w5
    289e:	05 02 42    	add.w     w4, w5, w4
    28a0:	00 10 b8    	mul.uu    w2, w0, w0
    28a2:	01 02 42    	add.w     w4, w1, w4
    28a4:	84 00 78    	mov.w     w4, w1
    28a6:	00 8f be    	mov.d     w0, [w14]
    *(self->OCxR) = temp.w[1];
    28a8:	2e 00 90    	mov.w     [w14+4], w0
    28aa:	30 00 90    	mov.w     [w0+6], w0
    28ac:	9e 00 90    	mov.w     [w14+2], w1
    28ae:	01 08 78    	mov.w     w1, [w0]
    self->pin->write = __pwmWrite;
    28b0:	2e 00 90    	mov.w     [w14+4], w0
    28b2:	00 08 90    	mov.w     [w0+16], w0
    28b4:	e1 56 22    	mov.w     #0x256e, w1
    28b6:	11 08 98    	mov.w     w1, [w0+18]
    self->pin->read = __pwmRead;
    28b8:	2e 00 90    	mov.w     [w14+4], w0
    28ba:	00 08 90    	mov.w     [w0+16], w0
    28bc:	01 54 22    	mov.w     #0x2540, w1
    28be:	21 08 98    	mov.w     w1, [w0+20]
    28c0:	03 00 37    	bra       0x28c8 <.L9>

000028c2 <.L18>:
    28c2:	00 00 00    	nop       
    28c4:	01 00 37    	bra       0x28c8 <.L9>

000028c6 <.L19>:
    28c6:	00 00 00    	nop       

000028c8 <.L9>:
}
    28c8:	4f 04 78    	mov.w     [--w15], w8
    28ca:	00 80 fa    	ulnk      
    28cc:	00 00 06    	return    

000028ce <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    28ce:	14 00 fa    	lnk       #0x14
    28d0:	20 07 98    	mov.w     w0, [w14+4]
    28d2:	31 07 98    	mov.w     w1, [w14+6]
    28d4:	42 07 98    	mov.w     w2, [w14+8]
    28d6:	54 07 98    	mov.w     w4, [w14+10]
    28d8:	65 07 98    	mov.w     w5, [w14+12]
    28da:	76 07 98    	mov.w     w6, [w14+14]
    28dc:	07 0f 98    	mov.w     w7, [w14+16]
    28de:	13 0f 98    	mov.w     w3, [w14+18]
    WORD32 temp;

    if (pin->rpnum==-1)
    28e0:	3e 00 90    	mov.w     [w14+6], w0
    28e2:	60 00 90    	mov.w     [w0+12], w0
    28e4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28e6:	86 00 32    	bra       Z, 0x29f4 <.L25>
        return;
    if (pin->owner==NULL) {
    28e8:	3e 00 90    	mov.w     [w14+6], w0
    28ea:	00 08 90    	mov.w     [w0+16], w0
    28ec:	00 00 e0    	cp0.w     w0
    28ee:	33 00 3a    	bra       NZ, 0x2956 <.L23>
        self->pin = pin;
    28f0:	2e 00 90    	mov.w     [w14+4], w0
    28f2:	be 00 90    	mov.w     [w14+6], w1
    28f4:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    28f6:	3e 00 90    	mov.w     [w14+6], w0
    28f8:	ae 00 90    	mov.w     [w14+4], w1
    28fa:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    28fc:	11 3a 80    	mov.w     0x742, w1
    28fe:	f0 0b 20    	mov.w     #0xbf, w0
    2900:	00 81 60    	and.w     w1, w0, w2
    2902:	60 04 20    	mov.w     #0x46, w0
    2904:	71 05 20    	mov.w     #0x57, w1
    2906:	23 74 20    	mov.w     #0x742, w3
    2908:	80 49 78    	mov.b     w0, [w3]
    290a:	81 49 78    	mov.b     w1, [w3]
    290c:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    290e:	3e 00 90    	mov.w     [w14+6], w0
    2910:	70 00 90    	mov.w     [w0+14], w0
    2912:	be 00 90    	mov.w     [w14+6], w1
    2914:	f1 00 90    	mov.w     [w1+14], w1
    2916:	11 01 78    	mov.w     [w1], w2
    2918:	be 00 90    	mov.w     [w14+6], w1
    291a:	a1 48 90    	mov.b     [w1+10], w1
    291c:	81 80 fb    	ze        w1, w1
    291e:	f3 03 20    	mov.w     #0x3f, w3
    2920:	81 18 dd    	sl.w      w3, w1, w1
    2922:	81 80 ea    	com.w     w1, w1
    2924:	81 00 61    	and.w     w2, w1, w1
    2926:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    2928:	3e 00 90    	mov.w     [w14+6], w0
    292a:	70 00 90    	mov.w     [w0+14], w0
    292c:	be 00 90    	mov.w     [w14+6], w1
    292e:	f1 00 90    	mov.w     [w1+14], w1
    2930:	11 01 78    	mov.w     [w1], w2
    2932:	ae 00 90    	mov.w     [w14+4], w1
    2934:	d1 01 90    	mov.w     [w1+10], w3
    2936:	be 00 90    	mov.w     [w14+6], w1
    2938:	a1 48 90    	mov.b     [w1+10], w1
    293a:	81 80 fb    	ze        w1, w1
    293c:	81 18 dd    	sl.w      w3, w1, w1
    293e:	82 80 70    	ior.w     w1, w2, w1
    2940:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2942:	10 3a 80    	mov.w     0x742, w0
    2944:	00 01 78    	mov.w     w0, w2
    2946:	02 60 a0    	bset.w    w2, #0x6
    2948:	60 04 20    	mov.w     #0x46, w0
    294a:	71 05 20    	mov.w     #0x57, w1
    294c:	23 74 20    	mov.w     #0x742, w3
    294e:	80 49 78    	mov.b     w0, [w3]
    2950:	81 49 78    	mov.b     w1, [w3]
    2952:	82 49 78    	mov.b     w2, [w3]
    2954:	05 00 37    	bra       0x2960 <.L24>

00002956 <.L23>:
    } else if (pin->owner!=(void *)self) {
    2956:	3e 00 90    	mov.w     [w14+6], w0
    2958:	80 08 90    	mov.w     [w0+16], w1
    295a:	2e 00 90    	mov.w     [w14+4], w0
    295c:	80 8f 50    	sub.w     w1, w0, [w15]
    295e:	4c 00 3a    	bra       NZ, 0x29f8 <.L26>

00002960 <.L24>:
        return;
    }
    if (timer) {
    2960:	4e 00 90    	mov.w     [w14+8], w0
    2962:	00 00 e0    	cp0.w     w0
    2964:	4a 00 32    	bra       Z, 0x29fa <.L20>
        self->servooffset = (uint16_t)(FCY*min_width);
    2966:	02 40 22    	mov.w     #0x2400, w2
    2968:	43 b7 24    	mov.w     #0x4b74, w3
    296a:	7e 00 90    	mov.w     [w14+14], w0
    296c:	8e 08 90    	mov.w     [w14+16], w1
    296e:	81 f5 07    	rcall     0x1472 <___mulsf3>
    2970:	10 f5 07    	rcall     0x1392 <___fixunssfsi>
    2972:	80 00 78    	mov.w     w0, w1
    2974:	2e 00 90    	mov.w     [w14+4], w0
    2976:	61 00 98    	mov.w     w1, [w0+12]
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    2978:	7e 01 90    	mov.w     [w14+14], w2
    297a:	8e 09 90    	mov.w     [w14+16], w3
    297c:	3e b8 97    	mov.w     [w14-10], w0
    297e:	ce b8 97    	mov.w     [w14-8], w1
    2980:	64 f4 07    	rcall     0x124a <___subsf3>
    2982:	02 40 22    	mov.w     #0x2400, w2
    2984:	43 b7 24    	mov.w     #0x4b74, w3
    2986:	75 f5 07    	rcall     0x1472 <___mulsf3>
    2988:	04 f5 07    	rcall     0x1392 <___fixunssfsi>
    298a:	80 00 78    	mov.w     w0, w1
    298c:	2e 00 90    	mov.w     [w14+4], w0
    298e:	71 00 98    	mov.w     w1, [w0+14]
        *(self->OCxCON1) = 0x1C0F;
    2990:	2e 00 90    	mov.w     [w14+4], w0
    2992:	10 00 78    	mov.w     [w0], w0
    2994:	f1 c0 21    	mov.w     #0x1c0f, w1
    2996:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    2998:	2e 00 90    	mov.w     [w14+4], w0
    299a:	10 00 90    	mov.w     [w0+2], w0
    299c:	ce 00 90    	mov.w     [w14+8], w1
    299e:	f1 00 90    	mov.w     [w1+14], w1
    29a0:	01 70 a0    	bset.w    w1, #0x7
    29a2:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxR) = 1;
    29a4:	2e 00 90    	mov.w     [w14+4], w0
    29a6:	30 00 90    	mov.w     [w0+6], w0
    29a8:	11 00 20    	mov.w     #0x1, w1
    29aa:	01 08 78    	mov.w     w1, [w0]
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    29ac:	1e 08 90    	mov.w     [w14+18], w0
    29ae:	61 01 b8    	mul.uu    w0, #0x1, w2
    29b0:	2e 00 90    	mov.w     [w14+4], w0
    29b2:	70 00 90    	mov.w     [w0+14], w0
    29b4:	80 00 eb    	clr.w     w1
    29b6:	00 9a b9    	mul.ss    w3, w0, w4
    29b8:	04 02 78    	mov.w     w4, w4
    29ba:	02 8b b9    	mul.ss    w1, w2, w6
    29bc:	86 02 78    	mov.w     w6, w5
    29be:	05 02 42    	add.w     w4, w5, w4
    29c0:	00 10 b8    	mul.uu    w2, w0, w0
    29c2:	01 02 42    	add.w     w4, w1, w4
    29c4:	84 00 78    	mov.w     w4, w1
    29c6:	00 8f be    	mov.d     w0, [w14]
        *(self->OCxRS) = self->servooffset+temp.w[1];
    29c8:	2e 00 90    	mov.w     [w14+4], w0
    29ca:	20 00 90    	mov.w     [w0+4], w0
    29cc:	ae 00 90    	mov.w     [w14+4], w1
    29ce:	61 01 90    	mov.w     [w1+12], w2
    29d0:	9e 00 90    	mov.w     [w14+2], w1
    29d2:	81 00 41    	add.w     w2, w1, w1
    29d4:	01 08 78    	mov.w     w1, [w0]
        timer_setPeriod(timer, interval);
    29d6:	5e 01 90    	mov.w     [w14+10], w2
    29d8:	ee 01 90    	mov.w     [w14+12], w3
    29da:	4e 00 90    	mov.w     [w14+8], w0
    29dc:	6e f7 07    	rcall     0x18ba <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
        timer_start(timer);
    29de:	4e 00 90    	mov.w     [w14+8], w0
    29e0:	3b f8 07    	rcall     0x1a58 <_timer_start> <L0> <.LFB13> <.LFE12>
        self->pin->write = __servoWrite;
    29e2:	2e 00 90    	mov.w     [w14+4], w0
    29e4:	00 08 90    	mov.w     [w0+16], w0
    29e6:	81 5d 22    	mov.w     #0x25d8, w1
    29e8:	11 08 98    	mov.w     w1, [w0+18]
        self->pin->read = __servoRead;
    29ea:	2e 00 90    	mov.w     [w14+4], w0
    29ec:	00 08 90    	mov.w     [w0+16], w0
    29ee:	61 5a 22    	mov.w     #0x25a6, w1
    29f0:	21 08 98    	mov.w     w1, [w0+20]
    29f2:	03 00 37    	bra       0x29fa <.L20>

000029f4 <.L25>:
    29f4:	00 00 00    	nop       
    29f6:	01 00 37    	bra       0x29fa <.L20>

000029f8 <.L26>:
    29f8:	00 00 00    	nop       

000029fa <.L20>:
    }
}
    29fa:	00 80 fa    	ulnk      
    29fc:	00 00 06    	return    

000029fe <_shiftreg_writeReg>:
    29fe:	04 00 fa    	lnk       #0x4
    2a00:	00 4f 78    	mov.b     w0, [w14]
    2a02:	11 47 98    	mov.b     w1, [w14+1]
    2a04:	12 07 98    	mov.w     w2, [w14+2]
    2a06:	1e 00 90    	mov.w     [w14+2], w0
    2a08:	54 fd 07    	rcall     0x24b2 <_pin_clear> <L0> <.LFB9> <.LFE8>
    2a0a:	01 c4 b3    	mov.b     #0x40, w1
    2a0c:	a0 bc 20    	mov.w     #0xbca, w0
    2a0e:	22 fb 07    	rcall     0x2054 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    2a10:	9e 40 78    	mov.b     [w14], w1
    2a12:	a0 bc 20    	mov.w     #0xbca, w0
    2a14:	1f fb 07    	rcall     0x2054 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    2a16:	9e 40 90    	mov.b     [w14+1], w1
    2a18:	a0 bc 20    	mov.w     #0xbca, w0
    2a1a:	1c fb 07    	rcall     0x2054 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    2a1c:	1e 00 90    	mov.w     [w14+2], w0
    2a1e:	34 fd 07    	rcall     0x2488 <_pin_set> <L0> <.LFB8> <.LFE7>
    2a20:	00 80 fa    	ulnk      
    2a22:	00 00 06    	return    

00002a24 <_shiftreg_readReg>:
    2a24:	06 00 fa    	lnk       #0x6
    2a26:	20 47 98    	mov.b     w0, [w14+2]
    2a28:	21 07 98    	mov.w     w1, [w14+4]
    2a2a:	2e 00 90    	mov.w     [w14+4], w0
    2a2c:	42 fd 07    	rcall     0x24b2 <_pin_clear> <L0> <.LFB9> <.LFE8>
    2a2e:	11 c4 b3    	mov.b     #0x41, w1
    2a30:	a0 bc 20    	mov.w     #0xbca, w0
    2a32:	10 fb 07    	rcall     0x2054 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    2a34:	ae 40 90    	mov.b     [w14+2], w1
    2a36:	a0 bc 20    	mov.w     #0xbca, w0
    2a38:	0d fb 07    	rcall     0x2054 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    2a3a:	80 40 eb    	clr.b     w1
    2a3c:	a0 bc 20    	mov.w     #0xbca, w0
    2a3e:	0a fb 07    	rcall     0x2054 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    2a40:	00 4f 78    	mov.b     w0, [w14]
    2a42:	2e 00 90    	mov.w     [w14+4], w0
    2a44:	21 fd 07    	rcall     0x2488 <_pin_set> <L0> <.LFB8> <.LFE7>
    2a46:	1e 40 78    	mov.b     [w14], w0
    2a48:	00 80 fa    	ulnk      
    2a4a:	00 00 06    	return    

00002a4c <_lightsRandom>:
    2a4c:	04 00 fa    	lnk       #0x4
    2a4e:	10 07 98    	mov.w     w0, [w14+2]
    2a50:	00 00 eb    	clr.w     w0
    2a52:	ee f3 07    	rcall     0x1230 <_time>
    2a54:	e3 f5 07    	rcall     0x161c <_srand> <L0>
    2a56:	9b f5 07    	rcall     0x158e <_rand>
    2a58:	81 00 20    	mov.w     #0x8, w1
    2a5a:	01 01 78    	mov.w     w1, w2
    2a5c:	11 00 09    	repeat    #0x11
    2a5e:	02 00 d8    	div.sw    w0, w2
    2a60:	80 00 fd    	exch      w0, w1
    2a62:	00 0f 78    	mov.w     w0, [w14]
    2a64:	11 00 20    	mov.w     #0x1, w1
    2a66:	1e 00 78    	mov.w     [w14], w0
    2a68:	80 08 dd    	sl.w      w1, w0, w1
    2a6a:	1e 00 90    	mov.w     [w14+2], w0
    2a6c:	01 00 70    	ior.w     w0, w1, w0
    2a6e:	30 42 88    	mov.w     w0, 0x846
    2a70:	30 42 80    	mov.w     0x846, w0
    2a72:	00 80 fa    	ulnk      
    2a74:	00 00 06    	return    

00002a76 <_main>:
    2a76:	02 00 fa    	lnk       #0x2
    2a78:	00 10 20    	mov.w     #0x100, w0
    2a7a:	20 3a 88    	mov.w     w0, 0x744
    2a7c:	3a 01 07    	rcall     0x2cf2 <_init_ui> <L0> <.L0> <.LFB0> <.LFE3> <.Letext0> <.Ltext0>
    2a7e:	40 fb 07    	rcall     0x2100 <_init_pin> <L0> <.LFB3> <.LFE2>
    2a80:	9b f8 07    	rcall     0x1bb8 <_init_spi> <L0> <.L0> <.LFB0> <.LFE22> <.Letext0> <.Ltext0>
    2a82:	b0 f6 07    	rcall     0x17e4 <_init_timer> <L0> <.LFB6> <.LFE5>
    2a84:	80 87 20    	mov.w     #0x878, w0
    2a86:	00 40 88    	mov.w     w0, 0x800
    2a88:	e0 88 20    	mov.w     #0x88e, w0
    2a8a:	10 40 88    	mov.w     w0, 0x802
    2a8c:	40 8a 20    	mov.w     #0x8a4, w0
    2a8e:	20 40 88    	mov.w     w0, 0x804
    2a90:	a0 8b 20    	mov.w     #0x8ba, w0
    2a92:	30 40 88    	mov.w     w0, 0x806
    2a94:	00 8d 20    	mov.w     #0x8d0, w0
    2a96:	40 40 88    	mov.w     w0, 0x808
    2a98:	60 8e 20    	mov.w     #0x8e6, w0
    2a9a:	50 40 88    	mov.w     w0, 0x80a
    2a9c:	c0 8f 20    	mov.w     #0x8fc, w0
    2a9e:	60 40 88    	mov.w     w0, 0x80c
    2aa0:	20 91 20    	mov.w     #0x912, w0
    2aa2:	70 40 88    	mov.w     w0, 0x80e
    2aa4:	40 40 80    	mov.w     0x808, w0
    2aa6:	93 fc 07    	rcall     0x23ce <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    2aa8:	50 40 80    	mov.w     0x80a, w0
    2aaa:	91 fc 07    	rcall     0x23ce <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    2aac:	60 40 80    	mov.w     0x80c, w0
    2aae:	8f fc 07    	rcall     0x23ce <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    2ab0:	70 40 80    	mov.w     0x80e, w0
    2ab2:	8d fc 07    	rcall     0x23ce <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    2ab4:	40 40 80    	mov.w     0x808, w0
    2ab6:	e8 fc 07    	rcall     0x2488 <_pin_set> <L0> <.LFB8> <.LFE7>
    2ab8:	50 40 80    	mov.w     0x80a, w0
    2aba:	e6 fc 07    	rcall     0x2488 <_pin_set> <L0> <.LFB8> <.LFE7>
    2abc:	60 40 80    	mov.w     0x80c, w0
    2abe:	e4 fc 07    	rcall     0x2488 <_pin_set> <L0> <.LFB8> <.LFE7>
    2ac0:	70 40 80    	mov.w     0x80e, w0
    2ac2:	e2 fc 07    	rcall     0x2488 <_pin_set> <L0> <.LFB8> <.LFE7>
    2ac4:	02 40 80    	mov.w     0x800, w2
    2ac6:	21 40 80    	mov.w     0x804, w1
    2ac8:	10 40 80    	mov.w     0x802, w0
    2aca:	16 c0 b3    	mov.b     #0x1, w6
    2acc:	04 68 29    	mov.w     #0x9680, w4
    2ace:	85 b1 24    	mov.w     #0x4b18, w5
    2ad0:	82 01 78    	mov.w     w2, w3
    2ad2:	01 01 78    	mov.w     w1, w2
    2ad4:	80 00 78    	mov.w     w0, w1
    2ad6:	a0 bc 20    	mov.w     #0xbca, w0
    2ad8:	c2 f8 07    	rcall     0x1c5e <_spi_open> <L0> <.LFB2> <.LFE1>
    2ada:	30 40 80    	mov.w     0x806, w0
    2adc:	ea fc 07    	rcall     0x24b2 <_pin_clear> <L0> <.LFB9> <.LFE8>
    2ade:	40 40 80    	mov.w     0x808, w0
    2ae0:	00 01 78    	mov.w     w0, w2
    2ae2:	80 40 eb    	clr.b     w1
    2ae4:	a0 c0 b3    	mov.b     #0xa, w0
    2ae6:	8b ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2ae8:	40 40 80    	mov.w     0x808, w0
    2aea:	00 01 78    	mov.w     w0, w2
    2aec:	80 40 eb    	clr.b     w1
    2aee:	b0 c0 b3    	mov.b     #0xb, w0
    2af0:	86 ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2af2:	40 40 80    	mov.w     0x808, w0
    2af4:	00 01 78    	mov.w     w0, w2
    2af6:	80 40 eb    	clr.b     w1
    2af8:	00 40 eb    	clr.b     w0
    2afa:	81 ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2afc:	40 40 80    	mov.w     0x808, w0
    2afe:	00 01 78    	mov.w     w0, w2
    2b00:	80 40 eb    	clr.b     w1
    2b02:	10 c0 b3    	mov.b     #0x1, w0
    2b04:	7c ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b06:	50 40 80    	mov.w     0x80a, w0
    2b08:	00 01 78    	mov.w     w0, w2
    2b0a:	80 40 eb    	clr.b     w1
    2b0c:	a0 c0 b3    	mov.b     #0xa, w0
    2b0e:	77 ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b10:	50 40 80    	mov.w     0x80a, w0
    2b12:	00 01 78    	mov.w     w0, w2
    2b14:	80 40 eb    	clr.b     w1
    2b16:	b0 c0 b3    	mov.b     #0xb, w0
    2b18:	72 ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b1a:	50 40 80    	mov.w     0x80a, w0
    2b1c:	00 01 78    	mov.w     w0, w2
    2b1e:	80 40 eb    	clr.b     w1
    2b20:	00 40 eb    	clr.b     w0
    2b22:	6d ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b24:	50 40 80    	mov.w     0x80a, w0
    2b26:	00 01 78    	mov.w     w0, w2
    2b28:	80 40 eb    	clr.b     w1
    2b2a:	10 c0 b3    	mov.b     #0x1, w0
    2b2c:	68 ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b2e:	60 40 80    	mov.w     0x80c, w0
    2b30:	00 01 78    	mov.w     w0, w2
    2b32:	80 40 eb    	clr.b     w1
    2b34:	a0 c0 b3    	mov.b     #0xa, w0
    2b36:	63 ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b38:	60 40 80    	mov.w     0x80c, w0
    2b3a:	00 01 78    	mov.w     w0, w2
    2b3c:	80 40 eb    	clr.b     w1
    2b3e:	b0 c0 b3    	mov.b     #0xb, w0
    2b40:	5e ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b42:	60 40 80    	mov.w     0x80c, w0
    2b44:	00 01 78    	mov.w     w0, w2
    2b46:	80 40 eb    	clr.b     w1
    2b48:	00 40 eb    	clr.b     w0
    2b4a:	59 ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b4c:	60 40 80    	mov.w     0x80c, w0
    2b4e:	00 01 78    	mov.w     w0, w2
    2b50:	80 40 eb    	clr.b     w1
    2b52:	10 c0 b3    	mov.b     #0x1, w0
    2b54:	54 ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b56:	70 40 80    	mov.w     0x80e, w0
    2b58:	00 01 78    	mov.w     w0, w2
    2b5a:	80 40 eb    	clr.b     w1
    2b5c:	a0 c0 b3    	mov.b     #0xa, w0
    2b5e:	4f ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b60:	70 40 80    	mov.w     0x80e, w0
    2b62:	00 01 78    	mov.w     w0, w2
    2b64:	80 40 eb    	clr.b     w1
    2b66:	b0 c0 b3    	mov.b     #0xb, w0
    2b68:	4a ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b6a:	70 40 80    	mov.w     0x80e, w0
    2b6c:	00 01 78    	mov.w     w0, w2
    2b6e:	80 40 eb    	clr.b     w1
    2b70:	00 40 eb    	clr.b     w0
    2b72:	45 ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b74:	70 40 80    	mov.w     0x80e, w0
    2b76:	00 01 78    	mov.w     w0, w2
    2b78:	80 40 eb    	clr.b     w1
    2b7a:	10 c0 b3    	mov.b     #0x1, w0
    2b7c:	40 ff 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b7e:	a2 70 2d    	mov.w     #0xd70a, w2
    2b80:	33 c2 23    	mov.w     #0x3c23, w3
    2b82:	20 b7 20    	mov.w     #0xb72, w0
    2b84:	9a f6 07    	rcall     0x18ba <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    2b86:	20 b7 20    	mov.w     #0xb72, w0
    2b88:	67 f7 07    	rcall     0x1a58 <_timer_start> <L0> <.LFB13> <.LFE12>
    2b8a:	02 00 20    	mov.w     #0x0, w2
    2b8c:	03 f8 23    	mov.w     #0x3f80, w3
    2b8e:	80 b8 20    	mov.w     #0xb88, w0
    2b90:	94 f6 07    	rcall     0x18ba <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    2b92:	80 b8 20    	mov.w     #0xb88, w0
    2b94:	61 f7 07    	rcall     0x1a58 <_timer_start> <L0> <.LFB13> <.LFE12>

00002b96 <.L10>:
    2b96:	00 41 80    	mov.w     0x820, w0
    2b98:	10 41 88    	mov.w     w0, 0x822
    2b9a:	20 41 80    	mov.w     0x824, w0
    2b9c:	30 41 88    	mov.w     w0, 0x826
    2b9e:	c0 41 80    	mov.w     0x838, w0
    2ba0:	e0 41 88    	mov.w     w0, 0x83c
    2ba2:	d0 41 80    	mov.w     0x83a, w0
    2ba4:	f0 41 88    	mov.w     w0, 0x83e
    2ba6:	20 b7 20    	mov.w     #0xb72, w0
    2ba8:	75 f7 07    	rcall     0x1a94 <_timer_flag> <L0> <.LFB15> <.LFE14>
    2baa:	00 00 e0    	cp0.w     w0
    2bac:	52 00 32    	bra       Z, 0x2c52 <.L5>
    2bae:	20 b7 20    	mov.w     #0xb72, w0
    2bb0:	82 f7 07    	rcall     0x1ab6 <_timer_lower> <L0> <.LFB16> <.LFE15>
    2bb2:	80 40 80    	mov.w     0x810, w0
    2bb4:	90 40 88    	mov.w     w0, 0x812
    2bb6:	c0 40 80    	mov.w     0x818, w0
    2bb8:	d0 40 88    	mov.w     w0, 0x81a
    2bba:	40 41 80    	mov.w     0x828, w0
    2bbc:	50 41 88    	mov.w     w0, 0x82a
    2bbe:	80 41 80    	mov.w     0x830, w0
    2bc0:	90 41 88    	mov.w     w0, 0x832
    2bc2:	40 40 80    	mov.w     0x808, w0
    2bc4:	80 00 78    	mov.w     w0, w1
    2bc6:	20 c1 b3    	mov.b     #0x12, w0
    2bc8:	2d ff 07    	rcall     0x2a24 <_shiftreg_readReg> <L0> <.LFB1> <.LFE0>
    2bca:	00 80 fb    	ze        w0, w0
    2bcc:	80 40 88    	mov.w     w0, 0x810
    2bce:	40 40 80    	mov.w     0x808, w0
    2bd0:	80 00 78    	mov.w     w0, w1
    2bd2:	30 c1 b3    	mov.b     #0x13, w0
    2bd4:	27 ff 07    	rcall     0x2a24 <_shiftreg_readReg> <L0> <.LFB1> <.LFE0>
    2bd6:	00 80 fb    	ze        w0, w0
    2bd8:	c0 40 88    	mov.w     w0, 0x818
    2bda:	60 40 80    	mov.w     0x80c, w0
    2bdc:	80 00 78    	mov.w     w0, w1
    2bde:	20 c1 b3    	mov.b     #0x12, w0
    2be0:	21 ff 07    	rcall     0x2a24 <_shiftreg_readReg> <L0> <.LFB1> <.LFE0>
    2be2:	00 80 fb    	ze        w0, w0
    2be4:	40 41 88    	mov.w     w0, 0x828
    2be6:	60 40 80    	mov.w     0x80c, w0
    2be8:	80 00 78    	mov.w     w0, w1
    2bea:	30 c1 b3    	mov.b     #0x13, w0
    2bec:	1b ff 07    	rcall     0x2a24 <_shiftreg_readReg> <L0> <.LFB1> <.LFE0>
    2bee:	00 80 fb    	ze        w0, w0
    2bf0:	80 41 88    	mov.w     w0, 0x830
    2bf2:	81 40 80    	mov.w     0x810, w1
    2bf4:	90 40 80    	mov.w     0x812, w0
    2bf6:	00 80 68    	xor.w     w1, w0, w0
    2bf8:	a0 40 88    	mov.w     w0, 0x814
    2bfa:	c1 40 80    	mov.w     0x818, w1
    2bfc:	d0 40 80    	mov.w     0x81a, w0
    2bfe:	00 80 68    	xor.w     w1, w0, w0
    2c00:	e0 40 88    	mov.w     w0, 0x81c
    2c02:	41 41 80    	mov.w     0x828, w1
    2c04:	50 41 80    	mov.w     0x82a, w0
    2c06:	00 80 68    	xor.w     w1, w0, w0
    2c08:	60 41 88    	mov.w     w0, 0x82c
    2c0a:	81 41 80    	mov.w     0x830, w1
    2c0c:	90 41 80    	mov.w     0x832, w0
    2c0e:	00 80 68    	xor.w     w1, w0, w0
    2c10:	a0 41 88    	mov.w     w0, 0x834
    2c12:	a1 40 80    	mov.w     0x814, w1
    2c14:	80 40 80    	mov.w     0x810, w0
    2c16:	00 80 60    	and.w     w1, w0, w0
    2c18:	b0 40 88    	mov.w     w0, 0x816
    2c1a:	e1 40 80    	mov.w     0x81c, w1
    2c1c:	c0 40 80    	mov.w     0x818, w0
    2c1e:	00 80 60    	and.w     w1, w0, w0
    2c20:	f0 40 88    	mov.w     w0, 0x81e
    2c22:	61 41 80    	mov.w     0x82c, w1
    2c24:	40 41 80    	mov.w     0x828, w0
    2c26:	00 80 60    	and.w     w1, w0, w0
    2c28:	70 41 88    	mov.w     w0, 0x82e
    2c2a:	a1 41 80    	mov.w     0x834, w1
    2c2c:	80 41 80    	mov.w     0x830, w0
    2c2e:	00 80 60    	and.w     w1, w0, w0
    2c30:	b0 41 88    	mov.w     w0, 0x836
    2c32:	01 41 80    	mov.w     0x820, w1
    2c34:	70 41 80    	mov.w     0x82e, w0
    2c36:	00 80 68    	xor.w     w1, w0, w0
    2c38:	00 41 88    	mov.w     w0, 0x820
    2c3a:	21 41 80    	mov.w     0x824, w1
    2c3c:	b0 41 80    	mov.w     0x836, w0
    2c3e:	00 80 68    	xor.w     w1, w0, w0
    2c40:	20 41 88    	mov.w     w0, 0x824
    2c42:	c1 41 80    	mov.w     0x838, w1
    2c44:	b0 40 80    	mov.w     0x816, w0
    2c46:	00 80 68    	xor.w     w1, w0, w0
    2c48:	c0 41 88    	mov.w     w0, 0x838
    2c4a:	d1 41 80    	mov.w     0x83a, w1
    2c4c:	f0 40 80    	mov.w     0x81e, w0
    2c4e:	00 80 68    	xor.w     w1, w0, w0
    2c50:	d0 41 88    	mov.w     w0, 0x83a

00002c52 <.L5>:
    2c52:	80 b8 20    	mov.w     #0xb88, w0
    2c54:	1f f7 07    	rcall     0x1a94 <_timer_flag> <L0> <.LFB15> <.LFE14>
    2c56:	00 00 e0    	cp0.w     w0
    2c58:	2f 00 32    	bra       Z, 0x2cb8 <.L6> <.LBE2>

00002c5a <.LBB2>:
    2c5a:	80 b8 20    	mov.w     #0xb88, w0
    2c5c:	2c f7 07    	rcall     0x1ab6 <_timer_lower> <L0> <.LFB16> <.LFE15>
    2c5e:	00 00 eb    	clr.w     w0
    2c60:	e7 f2 07    	rcall     0x1230 <_time>
    2c62:	dc f4 07    	rcall     0x161c <_srand> <L0>
    2c64:	94 f4 07    	rcall     0x158e <_rand>
    2c66:	41 00 20    	mov.w     #0x4, w1
    2c68:	01 01 78    	mov.w     w1, w2
    2c6a:	11 00 09    	repeat    #0x11
    2c6c:	02 00 d8    	div.sw    w0, w2
    2c6e:	80 00 fd    	exch      w0, w1
    2c70:	00 0f 78    	mov.w     w0, [w14]
    2c72:	1e 00 78    	mov.w     [w14], w0
    2c74:	00 00 e0    	cp0.w     w0
    2c76:	06 00 3a    	bra       NZ, 0x2c84 <.L7>
    2c78:	00 41 80    	mov.w     0x820, w0
    2c7a:	e8 fe 07    	rcall     0x2a4c <_lightsRandom> <L0> <.LFB2> <.LFE1>
    2c7c:	00 41 88    	mov.w     w0, 0x820
    2c7e:	80 84 20    	mov.w     #0x848, w0
    2c80:	bb 00 07    	rcall     0x2df8 <_led_toggle> <L0> <.LFB4> <.LFE3>
    2c82:	1a 00 37    	bra       0x2cb8 <.L6> <.LBE2>

00002c84 <.L7>:
    2c84:	1e 00 78    	mov.w     [w14], w0
    2c86:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2c88:	06 00 3a    	bra       NZ, 0x2c96 <.L8>
    2c8a:	20 41 80    	mov.w     0x824, w0
    2c8c:	df fe 07    	rcall     0x2a4c <_lightsRandom> <L0> <.LFB2> <.LFE1>
    2c8e:	20 41 88    	mov.w     w0, 0x824
    2c90:	80 85 20    	mov.w     #0x858, w0
    2c92:	b2 00 07    	rcall     0x2df8 <_led_toggle> <L0> <.LFB4> <.LFE3>
    2c94:	11 00 37    	bra       0x2cb8 <.L6> <.LBE2>

00002c96 <.L8>:
    2c96:	1e 00 78    	mov.w     [w14], w0
    2c98:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2c9a:	06 00 3a    	bra       NZ, 0x2ca8 <.L9>
    2c9c:	c0 41 80    	mov.w     0x838, w0
    2c9e:	d6 fe 07    	rcall     0x2a4c <_lightsRandom> <L0> <.LFB2> <.LFE1>
    2ca0:	c0 41 88    	mov.w     w0, 0x838
    2ca2:	00 85 20    	mov.w     #0x850, w0
    2ca4:	a9 00 07    	rcall     0x2df8 <_led_toggle> <L0> <.LFB4> <.LFE3>
    2ca6:	08 00 37    	bra       0x2cb8 <.L6> <.LBE2>

00002ca8 <.L9>:
    2ca8:	1e 00 78    	mov.w     [w14], w0
    2caa:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2cac:	05 00 3a    	bra       NZ, 0x2cb8 <.L6> <.LBE2>
    2cae:	d0 41 80    	mov.w     0x83a, w0
    2cb0:	cd fe 07    	rcall     0x2a4c <_lightsRandom> <L0> <.LFB2> <.LFE1>
    2cb2:	d0 41 88    	mov.w     w0, 0x83a
    2cb4:	80 85 20    	mov.w     #0x858, w0
    2cb6:	a0 00 07    	rcall     0x2df8 <_led_toggle> <L0> <.LFB4> <.LFE3>

00002cb8 <.L6>:
    2cb8:	51 40 80    	mov.w     0x80a, w1
    2cba:	00 41 80    	mov.w     0x820, w0
    2cbc:	00 40 78    	mov.b     w0, w0
    2cbe:	01 01 78    	mov.w     w1, w2
    2cc0:	80 40 78    	mov.b     w0, w1
    2cc2:	40 c1 b3    	mov.b     #0x14, w0
    2cc4:	9c fe 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2cc6:	51 40 80    	mov.w     0x80a, w1
    2cc8:	20 41 80    	mov.w     0x824, w0
    2cca:	00 40 78    	mov.b     w0, w0
    2ccc:	01 01 78    	mov.w     w1, w2
    2cce:	80 40 78    	mov.b     w0, w1
    2cd0:	50 c1 b3    	mov.b     #0x15, w0
    2cd2:	95 fe 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2cd4:	71 40 80    	mov.w     0x80e, w1
    2cd6:	c0 41 80    	mov.w     0x838, w0
    2cd8:	00 40 78    	mov.b     w0, w0
    2cda:	01 01 78    	mov.w     w1, w2
    2cdc:	80 40 78    	mov.b     w0, w1
    2cde:	40 c1 b3    	mov.b     #0x14, w0
    2ce0:	8e fe 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2ce2:	71 40 80    	mov.w     0x80e, w1
    2ce4:	d0 41 80    	mov.w     0x83a, w0
    2ce6:	00 40 78    	mov.b     w0, w0
    2ce8:	01 01 78    	mov.w     w1, w2
    2cea:	80 40 78    	mov.b     w0, w1
    2cec:	50 c1 b3    	mov.b     #0x15, w0
    2cee:	87 fe 07    	rcall     0x29fe <_shiftreg_writeReg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2cf0:	52 ff 37    	bra       0x2b96 <.L10>

00002cf2 <_init_ui>:
    2cf2:	00 00 fa    	lnk       #0x0
    2cf4:	74 c0 b3    	mov.b     #0x7, w4
    2cf6:	63 4e 20    	mov.w     #0x4e6, w3
    2cf8:	82 2d 20    	mov.w     #0x2d8, w2
    2cfa:	a1 2d 20    	mov.w     #0x2da, w1
    2cfc:	80 84 20    	mov.w     #0x848, w0
    2cfe:	20 00 07    	rcall     0x2d40 <_led_init> <L0> <.LFB1> <.LFE0>
    2d00:	00 42 eb    	clr.b     w4
    2d02:	a3 4e 20    	mov.w     #0x4ea, w3
    2d04:	82 2e 20    	mov.w     #0x2e8, w2
    2d06:	a1 2e 20    	mov.w     #0x2ea, w1
    2d08:	00 85 20    	mov.w     #0x850, w0
    2d0a:	1a 00 07    	rcall     0x2d40 <_led_init> <L0> <.LFB1> <.LFE0>
    2d0c:	14 c0 b3    	mov.b     #0x1, w4
    2d0e:	a3 4e 20    	mov.w     #0x4ea, w3
    2d10:	82 2e 20    	mov.w     #0x2e8, w2
    2d12:	a1 2e 20    	mov.w     #0x2ea, w1
    2d14:	80 85 20    	mov.w     #0x858, w0
    2d16:	14 00 07    	rcall     0x2d40 <_led_init> <L0> <.LFB1> <.LFE0>
    2d18:	f4 c0 b3    	mov.b     #0xf, w4
    2d1a:	43 4e 20    	mov.w     #0x4e4, w3
    2d1c:	02 2d 20    	mov.w     #0x2d0, w2
    2d1e:	21 2d 20    	mov.w     #0x2d2, w1
    2d20:	00 86 20    	mov.w     #0x860, w0
    2d22:	ad 00 07    	rcall     0x2e7e <_sw_init> <L0> <.LFB7> <.LFE6>
    2d24:	c4 c0 b3    	mov.b     #0xc, w4
    2d26:	43 4e 20    	mov.w     #0x4e4, w3
    2d28:	02 2d 20    	mov.w     #0x2d0, w2
    2d2a:	21 2d 20    	mov.w     #0x2d2, w1
    2d2c:	80 86 20    	mov.w     #0x868, w0
    2d2e:	a7 00 07    	rcall     0x2e7e <_sw_init> <L0> <.LFB7> <.LFE6>
    2d30:	c4 c0 b3    	mov.b     #0xc, w4
    2d32:	23 4e 20    	mov.w     #0x4e2, w3
    2d34:	82 2c 20    	mov.w     #0x2c8, w2
    2d36:	a1 2c 20    	mov.w     #0x2ca, w1
    2d38:	00 87 20    	mov.w     #0x870, w0
    2d3a:	a1 00 07    	rcall     0x2e7e <_sw_init> <L0> <.LFB7> <.LFE6>
    2d3c:	00 80 fa    	ulnk      
    2d3e:	00 00 06    	return    

00002d40 <_led_init>:
    2d40:	0a 00 fa    	lnk       #0xa
    2d42:	00 0f 78    	mov.w     w0, [w14]
    2d44:	11 07 98    	mov.w     w1, [w14+2]
    2d46:	22 07 98    	mov.w     w2, [w14+4]
    2d48:	33 07 98    	mov.w     w3, [w14+6]
    2d4a:	04 4f 98    	mov.b     w4, [w14+8]
    2d4c:	1e 00 78    	mov.w     [w14], w0
    2d4e:	9e 00 90    	mov.w     [w14+2], w1
    2d50:	01 08 78    	mov.w     w1, [w0]
    2d52:	1e 00 78    	mov.w     [w14], w0
    2d54:	ae 00 90    	mov.w     [w14+4], w1
    2d56:	11 00 98    	mov.w     w1, [w0+2]
    2d58:	1e 00 78    	mov.w     [w14], w0
    2d5a:	be 00 90    	mov.w     [w14+6], w1
    2d5c:	21 00 98    	mov.w     w1, [w0+4]
    2d5e:	1e 00 78    	mov.w     [w14], w0
    2d60:	8e 48 90    	mov.b     [w14+8], w1
    2d62:	61 40 98    	mov.b     w1, [w0+6]
    2d64:	1e 00 78    	mov.w     [w14], w0
    2d66:	20 00 90    	mov.w     [w0+4], w0
    2d68:	9e 00 78    	mov.w     [w14], w1
    2d6a:	a1 00 90    	mov.w     [w1+4], w1
    2d6c:	11 01 78    	mov.w     [w1], w2
    2d6e:	9e 00 78    	mov.w     [w14], w1
    2d70:	e1 40 90    	mov.b     [w1+6], w1
    2d72:	81 80 fb    	ze        w1, w1
    2d74:	13 00 20    	mov.w     #0x1, w3
    2d76:	81 18 dd    	sl.w      w3, w1, w1
    2d78:	81 80 ea    	com.w     w1, w1
    2d7a:	81 00 61    	and.w     w2, w1, w1
    2d7c:	01 08 78    	mov.w     w1, [w0]
    2d7e:	1e 00 78    	mov.w     [w14], w0
    2d80:	10 00 78    	mov.w     [w0], w0
    2d82:	9e 00 78    	mov.w     [w14], w1
    2d84:	91 00 78    	mov.w     [w1], w1
    2d86:	11 01 78    	mov.w     [w1], w2
    2d88:	9e 00 78    	mov.w     [w14], w1
    2d8a:	e1 40 90    	mov.b     [w1+6], w1
    2d8c:	81 80 fb    	ze        w1, w1
    2d8e:	13 00 20    	mov.w     #0x1, w3
    2d90:	81 18 dd    	sl.w      w3, w1, w1
    2d92:	81 80 ea    	com.w     w1, w1
    2d94:	81 00 61    	and.w     w2, w1, w1
    2d96:	01 08 78    	mov.w     w1, [w0]
    2d98:	1e 00 78    	mov.w     [w14], w0
    2d9a:	10 00 90    	mov.w     [w0+2], w0
    2d9c:	9e 00 78    	mov.w     [w14], w1
    2d9e:	91 00 90    	mov.w     [w1+2], w1
    2da0:	11 01 78    	mov.w     [w1], w2
    2da2:	9e 00 78    	mov.w     [w14], w1
    2da4:	e1 40 90    	mov.b     [w1+6], w1
    2da6:	81 80 fb    	ze        w1, w1
    2da8:	13 00 20    	mov.w     #0x1, w3
    2daa:	81 18 dd    	sl.w      w3, w1, w1
    2dac:	81 80 ea    	com.w     w1, w1
    2dae:	81 00 61    	and.w     w2, w1, w1
    2db0:	01 08 78    	mov.w     w1, [w0]
    2db2:	00 80 fa    	ulnk      
    2db4:	00 00 06    	return    

00002db6 <_led_on>:
    2db6:	02 00 fa    	lnk       #0x2
    2db8:	00 0f 78    	mov.w     w0, [w14]
    2dba:	1e 00 78    	mov.w     [w14], w0
    2dbc:	10 00 78    	mov.w     [w0], w0
    2dbe:	9e 00 78    	mov.w     [w14], w1
    2dc0:	91 00 78    	mov.w     [w1], w1
    2dc2:	11 01 78    	mov.w     [w1], w2
    2dc4:	9e 00 78    	mov.w     [w14], w1
    2dc6:	e1 40 90    	mov.b     [w1+6], w1
    2dc8:	81 80 fb    	ze        w1, w1
    2dca:	13 00 20    	mov.w     #0x1, w3
    2dcc:	81 18 dd    	sl.w      w3, w1, w1
    2dce:	82 80 70    	ior.w     w1, w2, w1
    2dd0:	01 08 78    	mov.w     w1, [w0]
    2dd2:	00 80 fa    	ulnk      
    2dd4:	00 00 06    	return    

00002dd6 <_led_off>:
    2dd6:	02 00 fa    	lnk       #0x2
    2dd8:	00 0f 78    	mov.w     w0, [w14]
    2dda:	1e 00 78    	mov.w     [w14], w0
    2ddc:	10 00 78    	mov.w     [w0], w0
    2dde:	9e 00 78    	mov.w     [w14], w1
    2de0:	91 00 78    	mov.w     [w1], w1
    2de2:	11 01 78    	mov.w     [w1], w2
    2de4:	9e 00 78    	mov.w     [w14], w1
    2de6:	e1 40 90    	mov.b     [w1+6], w1
    2de8:	81 80 fb    	ze        w1, w1
    2dea:	13 00 20    	mov.w     #0x1, w3
    2dec:	81 18 dd    	sl.w      w3, w1, w1
    2dee:	81 80 ea    	com.w     w1, w1
    2df0:	81 00 61    	and.w     w2, w1, w1
    2df2:	01 08 78    	mov.w     w1, [w0]
    2df4:	00 80 fa    	ulnk      
    2df6:	00 00 06    	return    

00002df8 <_led_toggle>:
    2df8:	02 00 fa    	lnk       #0x2
    2dfa:	00 0f 78    	mov.w     w0, [w14]
    2dfc:	1e 00 78    	mov.w     [w14], w0
    2dfe:	10 00 78    	mov.w     [w0], w0
    2e00:	9e 00 78    	mov.w     [w14], w1
    2e02:	91 00 78    	mov.w     [w1], w1
    2e04:	11 01 78    	mov.w     [w1], w2
    2e06:	9e 00 78    	mov.w     [w14], w1
    2e08:	e1 40 90    	mov.b     [w1+6], w1
    2e0a:	81 80 fb    	ze        w1, w1
    2e0c:	13 00 20    	mov.w     #0x1, w3
    2e0e:	81 18 dd    	sl.w      w3, w1, w1
    2e10:	81 00 69    	xor.w     w2, w1, w1
    2e12:	01 08 78    	mov.w     w1, [w0]
    2e14:	00 80 fa    	ulnk      
    2e16:	00 00 06    	return    

00002e18 <_led_write>:
    2e18:	04 00 fa    	lnk       #0x4
    2e1a:	00 0f 78    	mov.w     w0, [w14]
    2e1c:	11 07 98    	mov.w     w1, [w14+2]
    2e1e:	1e 00 90    	mov.w     [w14+2], w0
    2e20:	00 00 e0    	cp0.w     w0
    2e22:	0d 00 32    	bra       Z, 0x2e3e <.L7>
    2e24:	1e 00 78    	mov.w     [w14], w0
    2e26:	10 00 78    	mov.w     [w0], w0
    2e28:	9e 00 78    	mov.w     [w14], w1
    2e2a:	91 00 78    	mov.w     [w1], w1
    2e2c:	11 01 78    	mov.w     [w1], w2
    2e2e:	9e 00 78    	mov.w     [w14], w1
    2e30:	e1 40 90    	mov.b     [w1+6], w1
    2e32:	81 80 fb    	ze        w1, w1
    2e34:	13 00 20    	mov.w     #0x1, w3
    2e36:	81 18 dd    	sl.w      w3, w1, w1
    2e38:	82 80 70    	ior.w     w1, w2, w1
    2e3a:	01 08 78    	mov.w     w1, [w0]
    2e3c:	0d 00 37    	bra       0x2e58 <.L6>

00002e3e <.L7>:
    2e3e:	1e 00 78    	mov.w     [w14], w0
    2e40:	10 00 78    	mov.w     [w0], w0
    2e42:	9e 00 78    	mov.w     [w14], w1
    2e44:	91 00 78    	mov.w     [w1], w1
    2e46:	11 01 78    	mov.w     [w1], w2
    2e48:	9e 00 78    	mov.w     [w14], w1
    2e4a:	e1 40 90    	mov.b     [w1+6], w1
    2e4c:	81 80 fb    	ze        w1, w1
    2e4e:	13 00 20    	mov.w     #0x1, w3
    2e50:	81 18 dd    	sl.w      w3, w1, w1
    2e52:	81 80 ea    	com.w     w1, w1
    2e54:	81 00 61    	and.w     w2, w1, w1
    2e56:	01 08 78    	mov.w     w1, [w0]

00002e58 <.L6>:
    2e58:	00 80 fa    	ulnk      
    2e5a:	00 00 06    	return    

00002e5c <_led_read>:
    2e5c:	02 00 fa    	lnk       #0x2
    2e5e:	00 0f 78    	mov.w     w0, [w14]
    2e60:	1e 00 78    	mov.w     [w14], w0
    2e62:	10 00 78    	mov.w     [w0], w0
    2e64:	90 00 78    	mov.w     [w0], w1
    2e66:	1e 00 78    	mov.w     [w14], w0
    2e68:	60 40 90    	mov.b     [w0+6], w0
    2e6a:	00 80 fb    	ze        w0, w0
    2e6c:	12 00 20    	mov.w     #0x1, w2
    2e6e:	00 10 dd    	sl.w      w2, w0, w0
    2e70:	00 80 60    	and.w     w1, w0, w0
    2e72:	00 f0 a7    	btsc.w    w0, #0xf
    2e74:	00 00 ea    	neg.w     w0, w0
    2e76:	00 00 ea    	neg.w     w0, w0
    2e78:	4f 00 de    	lsr.w     w0, #0xf, w0
    2e7a:	00 80 fa    	ulnk      
    2e7c:	00 00 06    	return    

00002e7e <_sw_init>:
    2e7e:	0a 00 fa    	lnk       #0xa
    2e80:	00 0f 78    	mov.w     w0, [w14]
    2e82:	11 07 98    	mov.w     w1, [w14+2]
    2e84:	22 07 98    	mov.w     w2, [w14+4]
    2e86:	33 07 98    	mov.w     w3, [w14+6]
    2e88:	04 4f 98    	mov.b     w4, [w14+8]
    2e8a:	1e 00 78    	mov.w     [w14], w0
    2e8c:	9e 00 90    	mov.w     [w14+2], w1
    2e8e:	01 08 78    	mov.w     w1, [w0]
    2e90:	1e 00 78    	mov.w     [w14], w0
    2e92:	ae 00 90    	mov.w     [w14+4], w1
    2e94:	11 00 98    	mov.w     w1, [w0+2]
    2e96:	1e 00 78    	mov.w     [w14], w0
    2e98:	be 00 90    	mov.w     [w14+6], w1
    2e9a:	21 00 98    	mov.w     w1, [w0+4]
    2e9c:	1e 00 78    	mov.w     [w14], w0
    2e9e:	8e 48 90    	mov.b     [w14+8], w1
    2ea0:	61 40 98    	mov.b     w1, [w0+6]
    2ea2:	1e 00 78    	mov.w     [w14], w0
    2ea4:	20 00 90    	mov.w     [w0+4], w0
    2ea6:	9e 00 78    	mov.w     [w14], w1
    2ea8:	a1 00 90    	mov.w     [w1+4], w1
    2eaa:	11 01 78    	mov.w     [w1], w2
    2eac:	9e 00 78    	mov.w     [w14], w1
    2eae:	e1 40 90    	mov.b     [w1+6], w1
    2eb0:	81 80 fb    	ze        w1, w1
    2eb2:	13 00 20    	mov.w     #0x1, w3
    2eb4:	81 18 dd    	sl.w      w3, w1, w1
    2eb6:	81 80 ea    	com.w     w1, w1
    2eb8:	81 00 61    	and.w     w2, w1, w1
    2eba:	01 08 78    	mov.w     w1, [w0]
    self->ans = ans;
    self->bit = bit;

    bitclear(self->ans, self->bit);
    bitset(self->tris, self->bit);
    2ebc:	1e 00 78    	mov.w     [w14], w0
    2ebe:	10 00 90    	mov.w     [w0+2], w0
    2ec0:	9e 00 78    	mov.w     [w14], w1
    2ec2:	91 00 90    	mov.w     [w1+2], w1
    2ec4:	11 01 78    	mov.w     [w1], w2
    2ec6:	9e 00 78    	mov.w     [w14], w1
    2ec8:	e1 40 90    	mov.b     [w1+6], w1
    2eca:	81 80 fb    	ze        w1, w1
    2ecc:	13 00 20    	mov.w     #0x1, w3
    2ece:	81 18 dd    	sl.w      w3, w1, w1
    2ed0:	82 80 70    	ior.w     w1, w2, w1
    2ed2:	01 08 78    	mov.w     w1, [w0]
}
    2ed4:	00 80 fa    	ulnk      
    2ed6:	00 00 06    	return    

00002ed8 <_sw_read>:

uint16_t sw_read(_SW *self) {
    2ed8:	02 00 fa    	lnk       #0x2
    2eda:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    2edc:	1e 00 78    	mov.w     [w14], w0
    2ede:	10 00 78    	mov.w     [w0], w0
    2ee0:	90 00 78    	mov.w     [w0], w1
    2ee2:	1e 00 78    	mov.w     [w14], w0
    2ee4:	60 40 90    	mov.b     [w0+6], w0
    2ee6:	00 80 fb    	ze        w0, w0
    2ee8:	12 00 20    	mov.w     #0x1, w2
    2eea:	00 10 dd    	sl.w      w2, w0, w0
    2eec:	00 80 60    	and.w     w1, w0, w0
    2eee:	00 f0 a7    	btsc.w    w0, #0xf
    2ef0:	00 00 ea    	neg.w     w0, w0
    2ef2:	00 00 ea    	neg.w     w0, w0
    2ef4:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    2ef6:	00 80 fa    	ulnk      
    2ef8:	00 00 06    	return    
Disassembly of section .dinit:

00002efa <.dinit>:
    2efa:	00 08 00    	nop       
    2efc:	48 00 00    	nop       
    2efe:	80 00 00    	nop       
    2f00:	48 08 00    	nop       
    2f02:	30 00 00    	nop       
    2f04:	80 00 00    	nop       
    2f06:	78 08 00    	nop       
    2f08:	b8 01 00    	nop       
    2f0a:	80 00 00    	nop       
    2f0c:	ca 0b 00    	nop       
    2f0e:	42 00 00    	nop       
    2f10:	80 00 00    	nop       
    2f12:	0c 0c 00    	nop       
    2f14:	10 00 00    	nop       
    2f16:	82 00 00    	nop       
    2f18:	bd 37 86    	mov.w     0xc6f6, w13
    2f1a:	33 bd 37    	bra       0xffffa982
    2f1c:	06 35 bd    	subr.w    0x1506
    2f1e:	37 86 36    	bra       LEU, 0xffff3b8e
    2f20:	bd 37 86    	mov.w     0xc6f6, w13
    2f22:	37 00 00    	nop       
    2f24:	5c 0b 00    	nop       
    2f26:	6e 00 00    	nop       
    2f28:	80 00 00    	nop       
    2f2a:	30 0a 00    	nop       
    2f2c:	a2 00 00    	nop       
    2f2e:	80 00 00    	nop       
    2f30:	1c 0c 00    	nop       
    2f32:	04 00 00    	nop       
    2f34:	82 00 00    	nop       
    2f36:	01 00 00    	nop       
    2f38:	00 00 00    	nop       
    2f3a:	d2 0a 00    	nop       
    2f3c:	8a 00 00    	nop       
    2f3e:	80 00 00    	nop       
    2f40:	00 00 00    	nop       
Disassembly of section .text:

00002f42 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    2f42:	02 00 fa    	lnk       #0x2
    2f44:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    2f46:	1e 00 78    	mov.w     [w14], w0
    2f48:	48 00 de    	lsr.w     w0, #0x8, w0
    2f4a:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    2f4c:	1e 00 78    	mov.w     [w14], w0
    2f4e:	44 00 de    	lsr.w     w0, #0x4, w0
    2f50:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    2f52:	1e 00 78    	mov.w     [w14], w0
    2f54:	42 00 de    	lsr.w     w0, #0x2, w0
    2f56:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    2f58:	1e 00 78    	mov.w     [w14], w0
    2f5a:	00 00 d1    	lsr.w     w0, w0
    2f5c:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    2f5e:	1e 00 78    	mov.w     [w14], w0
    2f60:	00 40 78    	mov.b     w0, w0
    2f62:	61 40 60    	and.b     w0, #0x1, w0
}
    2f64:	00 80 fa    	ulnk      
    2f66:	00 00 06    	return    
Disassembly of section .isr:

00002f68 <__DefaultInterrupt>:
    2f68:	00 40 da    	break     
    2f6a:	00 00 fe    	reset     
