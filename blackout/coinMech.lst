
coinMech.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	24 30 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	24 30 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	24 30 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	24 30 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	24 30 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	24 30 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	24 30 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <__CONFIG1-0x156e0>:
 11e:	24 30 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <__CONFIG2-0x1569e>:
 15e:	24 30 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <__CONFIG3-0x1569a>:
 160:	24 30 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	24 30 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	24 30 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	24 30 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	24 30 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	24 30 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	24 30 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	24 30 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	24 30 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	24 30 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	24 30 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	24 30 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	24 30 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	24 30 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	24 30 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	24 30 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	24 30 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	24 30 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	24 30 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	24 30 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	24 30 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	24 30 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	24 30 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	24 30 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	24 30 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	24 30 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	24 30 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	24 30 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	24 30 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	24 30 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	24 30 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	24 30 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	24 30 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	24 30 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	24 30 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	24 30 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	24 30 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	24 30 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	24 30 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	24 30 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	24 30 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	24 30 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	24 30 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	24 30 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	24 30 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	24 30 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	24 30 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	24 30 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	24 30 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	24 30 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	24 30 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	24 30 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	24 30 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	24 30 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	24 30 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	24 30 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	24 30 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	24 30 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	24 30 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	24 30 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	24 30 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	cf b8 20    	mov.w     #0xb8c, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	85 00 07    	rcall     0x1230 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	c0 fe 22    	mov.w     #0x2fec, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	b4 2f 02    	call      0x2fb4 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	60 08 20    	mov.w     #0x86, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	f2 28 04    	goto      0x28f2 <___digitalRead>
    1216:	00 00 00 
    1218:	ae 28 04    	goto      0x28ae <___digitalWrite>
    121a:	00 00 00 
    121c:	14 29 04    	goto      0x2914 <___analogRead>
    121e:	00 00 00 
    1220:	dc 15 04    	goto      0x15dc <___putc_nobuffer>
    1222:	00 00 00 
    1224:	1e 16 04    	goto      0x161e <___putc_buffer>
    1226:	00 00 00 
    1228:	00 16 04    	goto      0x1600 <___getc_nobuffer>
    122a:	00 00 00 
    122c:	12 17 04    	goto      0x1712 <___getc_buffer>
    122e:	00 00 00 

00001230 <__crt_start_mode>:
    1230:	00 00 05    	retlw.w   #0x0, w0

00001232 <___subsf3>:
    1232:	03 f0 a2    	btg.w     w3, #0xf

00001234 <___addsf3>:
    1234:	88 9f be    	mov.d     w8, [w15++]
    1236:	8a 9f be    	mov.d     w10, [w15++]
    1238:	8c 1f 78    	mov.w     w12, [w15++]
    123a:	f7 00 07    	rcall     0x142a <__funpack2>
    123c:	fe 00 33    	bra       N, 0x143a <__fPropagateNaN>
    123e:	64 50 e1    	cp.w      w10, #0x4
    1240:	4f 00 32    	bra       Z, 0x12e0 <aisinfinite>

00001242 <checkspecialb>:
    1242:	64 20 e1    	cp.w      w4, #0x4
    1244:	52 00 32    	bra       Z, 0x12ea <return2>
    1246:	03 82 6c    	xor.w     w9, w3, w4
    1248:	07 00 3b    	bra       NN, 0x1258 <getsign>
    124a:	09 05 d0    	sl.w      w9, w10
    124c:	03 06 d0    	sl.w      w3, w12
    124e:	82 0f 54    	sub.w     w8, w2, [w15]
    1250:	0c 06 5d    	subb.w    w10, w12, w12
    1252:	02 00 39    	bra       NC, 0x1258 <getsign>
    1254:	02 00 32    	bra       Z, 0x125a <gotsign>
    1256:	89 01 78    	mov.w     w9, w3

00001258 <getsign>:
    1258:	03 06 78    	mov.w     w3, w12

0000125a <gotsign>:
    125a:	85 82 55    	sub.w     w11, w5, w5
    125c:	04 00 3d    	bra       GE, 0x1266 <expcanonical>
    125e:	00 03 fd    	exch      w0, w6
    1260:	81 03 fd    	exch      w1, w7
    1262:	85 02 ea    	neg.w     w5, w5
    1264:	8b 85 42    	add.w     w5, w11, w11

00001266 <expcanonical>:
    1266:	84 0f 72    	ior.w     w4, w4, [w15]
    1268:	02 00 3b    	bra       NN, 0x126e <nonegate>
    126a:	60 00 10    	subr.w    w0, #0x0, w0
    126c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000126e <nonegate>:
    126e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1270:	00 05 eb    	clr.w     w10
    1272:	7a 28 e1    	cp.w      w5, #0x1a
    1274:	0a 00 39    	bra       NC, 0x128a <aligniter>
    1276:	06 00 78    	mov.w     w6, w0
    1278:	c7 5d dd    	sl.w      w11, #0x7, w11
    127a:	f7 07 b2    	and.w     #0x7f, w7
    127c:	87 80 75    	ior.w     w11, w7, w1
    127e:	2d 00 37    	bra       0x12da <signoff>

00001280 <align>:
    1280:	82 81 71    	ior.w     w3, w2, w3
    1282:	0a 01 78    	mov.w     w10, w2
    1284:	61 05 60    	and.w     w0, #0x1, w10
    1286:	81 80 d1    	asr.w     w1, w1
    1288:	00 80 d3    	rrc.w     w0, w0

0000128a <aligniter>:
    128a:	85 02 e9    	dec.w     w5, w5
    128c:	f9 ff 3b    	bra       NN, 0x1280 <align>

0000128e <aligned>:
    128e:	06 04 40    	add.w     w0, w6, w8
    1290:	87 84 48    	addc.w    w1, w7, w9
    1292:	02 00 3b    	bra       NN, 0x1298 <normalizesum>
    1294:	60 04 14    	subr.w    w8, #0x0, w8
    1296:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001298 <normalizesum>:
    1298:	09 88 a3    	btst.z    w9, #0x8
    129a:	07 00 32    	bra       Z, 0x12aa <checknormal>
    129c:	8a 81 71    	ior.w     w3, w10, w3
    129e:	82 81 71    	ior.w     w3, w2, w3
    12a0:	61 01 64    	and.w     w8, #0x1, w2
    12a2:	89 04 d1    	lsr.w     w9, w9
    12a4:	08 84 d3    	rrc.w     w8, w8
    12a6:	8b 05 e8    	inc.w     w11, w11
    12a8:	17 00 37    	bra       0x12d8 <round>

000012aa <checknormal>:
    12aa:	09 78 a3    	btst.z    w9, #0x7
    12ac:	13 00 3a    	bra       NZ, 0x12d4 <discardguard>

000012ae <underflow>:
    12ae:	0b 00 e0    	cp0.w     w11
    12b0:	13 00 34    	bra       LE, 0x12d8 <round>
    12b2:	8b 05 e9    	dec.w     w11, w11
    12b4:	08 04 44    	add.w     w8, w8, w8
    12b6:	89 84 4c    	addc.w    w9, w9, w9
    12b8:	0a 44 74    	ior.b     w8, w10, w8
    12ba:	09 78 a3    	btst.z    w9, #0x7
    12bc:	0d 00 3a    	bra       NZ, 0x12d8 <round>

000012be <normalizeloop>:
    12be:	0b 00 e0    	cp0.w     w11
    12c0:	07 00 34    	bra       LE, 0x12d0 <normalizeexit>
    12c2:	8b 05 e9    	dec.w     w11, w11
    12c4:	08 04 44    	add.w     w8, w8, w8
    12c6:	89 84 4c    	addc.w    w9, w9, w9
    12c8:	01 00 3a    	bra       NZ, 0x12cc <normalizetest>
    12ca:	0b 00 20    	mov.w     #0x0, w11

000012cc <normalizetest>:
    12cc:	09 78 a3    	btst.z    w9, #0x7
    12ce:	f7 ff 32    	bra       Z, 0x12be <normalizeloop>

000012d0 <normalizeexit>:
    12d0:	00 01 eb    	clr.w     w2
    12d2:	02 00 37    	bra       0x12d8 <round>

000012d4 <discardguard>:
    12d4:	82 81 71    	ior.w     w3, w2, w3
    12d6:	0a 01 78    	mov.w     w10, w2

000012d8 <round>:
    12d8:	6d 00 07    	rcall     0x13b4 <__fpack>

000012da <signoff>:
    12da:	0c f0 a7    	btsc.w    w12, #0xf
    12dc:	01 f0 a0    	bset.w    w1, #0xf
    12de:	b6 00 37    	bra       0x144c <__fbopExit>

000012e0 <aisinfinite>:
    12e0:	64 20 e1    	cp.w      w4, #0x4
    12e2:	02 00 3a    	bra       NZ, 0x12e8 <return8>
    12e4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12e6:	b6 00 33    	bra       N, 0x1454 <__fbopReturnNaN>

000012e8 <return8>:
    12e8:	08 01 be    	mov.d     w8, w2

000012ea <return2>:
    12ea:	02 00 be    	mov.d     w2, w0
    12ec:	af 00 37    	bra       0x144c <__fbopExit>

000012ee <___divsf3>:
    12ee:	88 9f be    	mov.d     w8, [w15++]
    12f0:	8a 9f be    	mov.d     w10, [w15++]
    12f2:	8c 1f 78    	mov.w     w12, [w15++]
    12f4:	9a 00 07    	rcall     0x142a <__funpack2>
    12f6:	a1 00 33    	bra       N, 0x143a <__fPropagateNaN>
    12f8:	03 86 6c    	xor.w     w9, w3, w12
    12fa:	64 50 e1    	cp.w      w10, #0x4
    12fc:	2e 00 32    	bra       Z, 0x135a <aisinfinite>
    12fe:	64 20 e1    	cp.w      w4, #0x4
    1300:	33 00 32    	bra       Z, 0x1368 <returnZero>
    1302:	61 50 e1    	cp.w      w10, #0x1
    1304:	2f 00 32    	bra       Z, 0x1364 <aiszero>
    1306:	61 20 e1    	cp.w      w4, #0x1
    1308:	31 00 32    	bra       Z, 0x136c <returnInf>

0000130a <finitenonzero>:
    130a:	85 85 55    	sub.w     w11, w5, w11
    130c:	eb 07 b0    	add.w     #0x7e, w11
    130e:	09 00 20    	mov.w     #0x0, w9
    1310:	08 04 20    	mov.w     #0x40, w8
    1312:	05 00 37    	bra       0x131e <diventry>

00001314 <divnext>:
    1314:	08 04 44    	add.w     w8, w8, w8
    1316:	89 84 4c    	addc.w    w9, w9, w9
    1318:	0a 00 31    	bra       C, 0x132e <divdone> <formsticky>

0000131a <divloop>:
    131a:	06 03 43    	add.w     w6, w6, w6
    131c:	87 83 4b    	addc.w    w7, w7, w7

0000131e <diventry>:
    131e:	00 01 53    	sub.w     w6, w0, w2
    1320:	81 81 5b    	subb.w    w7, w1, w3
    1322:	f8 ff 33    	bra       N, 0x1314 <divnext>
    1324:	02 03 be    	mov.d     w2, w6
    1326:	08 00 a0    	bset.w    w8, #0x0
    1328:	08 04 44    	add.w     w8, w8, w8
    132a:	89 84 4c    	addc.w    w9, w9, w9
    132c:	f6 ff 39    	bra       NC, 0x131a <divloop>

0000132e <divdone>:
    132e:	c6 39 dd    	sl.w      w7, #0x6, w3
    1330:	83 01 73    	ior.w     w6, w3, w3
    1332:	01 00 32    	bra       Z, 0x1336 <stickyok>
    1334:	13 00 20    	mov.w     #0x1, w3

00001336 <stickyok>:
    1336:	89 04 d1    	lsr.w     w9, w9
    1338:	08 84 d3    	rrc.w     w8, w8
    133a:	09 98 a3    	btst.z    w9, #0x9
    133c:	05 00 32    	bra       Z, 0x1348 <guardused>
    133e:	08 00 a7    	btsc.w    w8, #0x0
    1340:	03 00 a0    	bset.w    w3, #0x0
    1342:	89 04 d1    	lsr.w     w9, w9
    1344:	08 84 d3    	rrc.w     w8, w8
    1346:	8b 05 e8    	inc.w     w11, w11

00001348 <guardused>:
    1348:	89 04 d1    	lsr.w     w9, w9
    134a:	08 84 d3    	rrc.w     w8, w8
    134c:	00 01 eb    	clr.w     w2
    134e:	02 81 d2    	rlc.w     w2, w2
    1350:	31 00 07    	rcall     0x13b4 <__fpack>

00001352 <return0>:
    1352:	01 f0 a1    	bclr.w    w1, #0xf
    1354:	0c f0 a7    	btsc.w    w12, #0xf
    1356:	01 f0 a0    	bset.w    w1, #0xf
    1358:	79 00 37    	bra       0x144c <__fbopExit>

0000135a <aisinfinite>:
    135a:	64 20 e1    	cp.w      w4, #0x4
    135c:	7b 00 32    	bra       Z, 0x1454 <__fbopReturnNaN>

0000135e <return8>:
    135e:	08 01 be    	mov.d     w8, w2

00001360 <return2>:
    1360:	02 00 be    	mov.d     w2, w0
    1362:	f7 ff 37    	bra       0x1352 <return0>

00001364 <aiszero>:
    1364:	61 20 e1    	cp.w      w4, #0x1
    1366:	76 00 32    	bra       Z, 0x1454 <__fbopReturnNaN>

00001368 <returnZero>:
    1368:	60 00 b8    	mul.uu    w0, #0x0, w0
    136a:	f3 ff 37    	bra       0x1352 <return0>

0000136c <returnInf>:
    136c:	00 00 20    	mov.w     #0x0, w0
    136e:	01 f8 27    	mov.w     #0x7f80, w1
    1370:	f0 ff 37    	bra       0x1352 <return0>

00001372 <___eqsf2>:
    1372:	14 00 20    	mov.w     #0x1, w4
    1374:	a6 00 37    	bra       0x14c2 <__fcompare>

00001376 <___gesf2>:
    1376:	f4 ff 2f    	mov.w     #0xffff, w4
    1378:	a4 00 37    	bra       0x14c2 <__fcompare>

0000137a <___fixunssfsi>:
    137a:	00 01 be    	mov.d     w0, w2
    137c:	41 00 07    	rcall     0x1400 <__funpack>
    137e:	04 70 a7    	btsc.w    w4, #0x7
    1380:	03 f0 a1    	bclr.w    w3, #0xf
    1382:	03 f8 a3    	btst.z    w3, #0xf
    1384:	13 00 3a    	bra       NZ, 0x13ac <returnzero>
    1386:	65 09 b1    	sub.w     #0x96, w5
    1388:	10 00 32    	bra       Z, 0x13aa <exit>
    138a:	09 00 35    	bra       LT, 0x139e <shiftright>
    138c:	69 28 e1    	cp.w      w5, #0x9
    138e:	02 00 35    	bra       LT, 0x1394 <shiftleft>
    1390:	01 00 28    	mov.w     #0x8000, w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <shiftleft>:
    1394:	00 00 40    	add.w     w0, w0, w0
    1396:	81 80 48    	addc.w    w1, w1, w1
    1398:	85 02 e9    	dec.w     w5, w5
    139a:	fc ff 3a    	bra       NZ, 0x1394 <shiftleft>
    139c:	00 00 06    	return    

0000139e <shiftright>:
    139e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13a0:	05 00 35    	bra       LT, 0x13ac <returnzero>

000013a2 <shiftrightloop>:
    13a2:	81 00 d1    	lsr.w     w1, w1
    13a4:	00 80 d3    	rrc.w     w0, w0
    13a6:	85 02 e8    	inc.w     w5, w5
    13a8:	fc ff 3a    	bra       NZ, 0x13a2 <shiftrightloop>

000013aa <exit>:
    13aa:	00 00 06    	return    

000013ac <returnzero>:
    13ac:	80 00 eb    	clr.w     w1
    13ae:	00 00 05    	retlw.w   #0x0, w0

000013b0 <___floatunsisf>:
    13b0:	60 11 b8    	mul.uu    w2, #0x0, w2
    13b2:	a2 00 37    	bra       0x14f8 <___floatundisf>

000013b4 <__fpack>:
    13b4:	81 00 20    	mov.w     #0x8, w1
    13b6:	61 80 55    	sub.w     w11, #0x1, w0
    13b8:	0b 00 3d    	bra       GE, 0x13d0 <notsubnormal>
    13ba:	0b 00 20    	mov.w     #0x0, w11
    13bc:	61 fe 2f    	mov.w     #0xffe6, w1
    13be:	01 00 e1    	cp.w      w0, w1
    13c0:	1d 00 34    	bra       LE, 0x13fc <zerosig>

000013c2 <subnormal>:
    13c2:	82 81 71    	ior.w     w3, w2, w3
    13c4:	61 01 64    	and.w     w8, #0x1, w2
    13c6:	89 04 d1    	lsr.w     w9, w9
    13c8:	08 84 d3    	rrc.w     w8, w8
    13ca:	00 00 e8    	inc.w     w0, w0
    13cc:	fa ff 3a    	bra       NZ, 0x13c2 <subnormal>
    13ce:	71 00 20    	mov.w     #0x7, w1

000013d0 <notsubnormal>:
    13d0:	61 00 64    	and.w     w8, #0x1, w0
    13d2:	03 00 70    	ior.w     w0, w3, w0
    13d4:	02 00 60    	and.w     w0, w2, w0
    13d6:	09 00 32    	bra       Z, 0x13ea <packupandgo>
    13d8:	61 04 44    	add.w     w8, #0x1, w8
    13da:	e0 84 4c    	addc.w    w9, #0x0, w9
    13dc:	09 88 a5    	btst.z    w9, w1
    13de:	05 00 32    	bra       Z, 0x13ea <packupandgo>
    13e0:	8b 05 e8    	inc.w     w11, w11
    13e2:	68 08 e1    	cp.w      w1, #0x8
    13e4:	02 00 3a    	bra       NZ, 0x13ea <packupandgo>
    13e6:	89 04 d1    	lsr.w     w9, w9
    13e8:	08 84 d3    	rrc.w     w8, w8

000013ea <packupandgo>:
    13ea:	f2 0f 20    	mov.w     #0xff, w2
    13ec:	02 58 e1    	cp.w      w11, w2
    13ee:	05 00 3d    	bra       GE, 0x13fa <overflow>
    13f0:	c7 5d dd    	sl.w      w11, #0x7, w11
    13f2:	f9 07 b2    	and.w     #0x7f, w9
    13f4:	89 80 75    	ior.w     w11, w9, w1
    13f6:	08 00 78    	mov.w     w8, w0
    13f8:	00 00 06    	return    

000013fa <overflow>:
    13fa:	0b f8 27    	mov.w     #0x7f80, w11

000013fc <zerosig>:
    13fc:	8b 00 78    	mov.w     w11, w1
    13fe:	00 00 05    	retlw.w   #0x0, w0

00001400 <__funpack>:
    1400:	c7 0a de    	lsr.w     w1, #0x7, w5
    1402:	f1 07 b2    	and.w     #0x7f, w1
    1404:	f5 0f b2    	and.w     #0xff, w5
    1406:	08 00 32    	bra       Z, 0x1418 <zeroorsub>
    1408:	e1 cf 42    	add.b     w5, #0x1, [w15]
    140a:	02 00 32    	bra       Z, 0x1410 <nanorinf>

0000140c <finitereturn>:
    140c:	01 70 a0    	bset.w    w1, #0x7
    140e:	24 00 05    	retlw.w   #0x2, w4

00001410 <nanorinf>:
    1410:	81 0f 70    	ior.w     w0, w1, [w15]
    1412:	01 00 32    	bra       Z, 0x1416 <infinite>
    1414:	04 08 05    	retlw.w   #0x80, w4

00001416 <infinite>:
    1416:	44 00 05    	retlw.w   #0x4, w4

00001418 <zeroorsub>:
    1418:	81 0f 70    	ior.w     w0, w1, [w15]
    141a:	02 00 3a    	bra       NZ, 0x1420 <subnormal>
    141c:	14 00 05    	retlw.w   #0x1, w4

0000141e <normalize>:
    141e:	85 02 e9    	dec.w     w5, w5

00001420 <subnormal>:
    1420:	00 00 40    	add.w     w0, w0, w0
    1422:	81 c0 48    	addc.b    w1, w1, w1
    1424:	fc ff 3b    	bra       NN, 0x141e <normalize>
    1426:	01 70 a0    	bset.w    w1, #0x7
    1428:	24 00 05    	retlw.w   #0x2, w4

0000142a <__funpack2>:
    142a:	00 04 be    	mov.d     w0, w8
    142c:	e9 ff 07    	rcall     0x1400 <__funpack>
    142e:	00 03 be    	mov.d     w0, w6
    1430:	04 05 be    	mov.d     w4, w10
    1432:	02 00 be    	mov.d     w2, w0
    1434:	e5 ff 07    	rcall     0x1400 <__funpack>
    1436:	84 4f 75    	ior.b     w10, w4, [w15]
    1438:	00 00 06    	return    

0000143a <__fPropagateNaN>:
    143a:	02 00 be    	mov.d     w2, w0
    143c:	64 50 e1    	cp.w      w10, #0x4
    143e:	05 00 36    	bra       LEU, 0x144a <return0>
    1440:	64 20 e1    	cp.w      w4, #0x4
    1442:	02 00 36    	bra       LEU, 0x1448 <return8>
    1444:	09 68 a3    	btst.z    w9, #0x6
    1446:	01 00 3a    	bra       NZ, 0x144a <return0>

00001448 <return8>:
    1448:	08 00 be    	mov.d     w8, w0

0000144a <return0>:
    144a:	01 60 a0    	bset.w    w1, #0x6

0000144c <__fbopExit>:
    144c:	4f 06 78    	mov.w     [--w15], w12
    144e:	4f 05 be    	mov.d     [--w15], w10
    1450:	4f 04 be    	mov.d     [--w15], w8
    1452:	00 00 06    	return    

00001454 <__fbopReturnNaN>:
    1454:	f0 ff 2f    	mov.w     #0xffff, w0
    1456:	f1 ff 27    	mov.w     #0x7fff, w1
    1458:	f9 ff 37    	bra       0x144c <__fbopExit>

0000145a <___mulsf3>:
    145a:	88 9f be    	mov.d     w8, [w15++]
    145c:	8a 9f be    	mov.d     w10, [w15++]
    145e:	8c 1f 78    	mov.w     w12, [w15++]
    1460:	e4 ff 07    	rcall     0x142a <__funpack2>
    1462:	eb ff 33    	bra       N, 0x143a <__fPropagateNaN>
    1464:	03 86 6c    	xor.w     w9, w3, w12
    1466:	64 50 e1    	cp.w      w10, #0x4
    1468:	24 00 32    	bra       Z, 0x14b2 <aisinfinite>
    146a:	64 20 e1    	cp.w      w4, #0x4
    146c:	27 00 32    	bra       Z, 0x14bc <bisinfinite>
    146e:	61 50 e1    	cp.w      w10, #0x1
    1470:	22 00 32    	bra       Z, 0x14b6 <return8>
    1472:	61 20 e1    	cp.w      w4, #0x1
    1474:	21 00 32    	bra       Z, 0x14b8 <return2>
    1476:	8b 85 42    	add.w     w5, w11, w11
    1478:	eb 07 b1    	sub.w     #0x7e, w11
    147a:	01 34 b8    	mul.uu    w6, w1, w8
    147c:	00 3a b8    	mul.uu    w7, w0, w4
    147e:	08 04 42    	add.w     w4, w8, w8
    1480:	89 84 4a    	addc.w    w5, w9, w9
    1482:	01 3a b8    	mul.uu    w7, w1, w4
    1484:	00 30 b8    	mul.uu    w6, w0, w0
    1486:	88 80 40    	add.w     w1, w8, w1
    1488:	09 01 4a    	addc.w    w4, w9, w2
    148a:	04 00 33    	bra       N, 0x1494 <formsticky>
    148c:	00 00 40    	add.w     w0, w0, w0
    148e:	81 80 48    	addc.w    w1, w1, w1
    1490:	02 01 49    	addc.w    w2, w2, w2
    1492:	8b 05 e9    	dec.w     w11, w11

00001494 <formsticky>:
    1494:	c9 09 dd    	sl.w      w1, #0x9, w3
    1496:	83 01 70    	ior.w     w0, w3, w3
    1498:	01 00 32    	bra       Z, 0x149c <formRandSig>
    149a:	13 00 20    	mov.w     #0x1, w3

0000149c <formRandSig>:
    149c:	c8 14 de    	lsr.w     w2, #0x8, w9
    149e:	48 14 dd    	sl.w      w2, #0x8, w8
    14a0:	47 09 de    	lsr.w     w1, #0x7, w2
    14a2:	12 00 b2    	and.w     #0x1, w2
    14a4:	c8 08 de    	lsr.w     w1, #0x8, w1
    14a6:	08 84 70    	ior.w     w1, w8, w8
    14a8:	85 ff 07    	rcall     0x13b4 <__fpack>

000014aa <return0>:
    14aa:	01 f0 a1    	bclr.w    w1, #0xf
    14ac:	0c f0 a7    	btsc.w    w12, #0xf
    14ae:	01 f0 a0    	bset.w    w1, #0xf
    14b0:	cd ff 37    	bra       0x144c <__fbopExit>

000014b2 <aisinfinite>:
    14b2:	61 20 e1    	cp.w      w4, #0x1
    14b4:	cf ff 32    	bra       Z, 0x1454 <__fbopReturnNaN>

000014b6 <return8>:
    14b6:	08 01 be    	mov.d     w8, w2

000014b8 <return2>:
    14b8:	02 00 be    	mov.d     w2, w0
    14ba:	f7 ff 37    	bra       0x14aa <return0>

000014bc <bisinfinite>:
    14bc:	61 50 e1    	cp.w      w10, #0x1
    14be:	fc ff 3a    	bra       NZ, 0x14b8 <return2>
    14c0:	c9 ff 37    	bra       0x1454 <__fbopReturnNaN>

000014c2 <__fcompare>:
    14c2:	88 9f be    	mov.d     w8, [w15++]
    14c4:	8a 9f be    	mov.d     w10, [w15++]
    14c6:	84 1f 78    	mov.w     w4, [w15++]
    14c8:	b0 ff 07    	rcall     0x142a <__funpack2>
    14ca:	4f 00 78    	mov.w     [--w15], w0
    14cc:	11 00 33    	bra       N, 0x14f0 <exit>
    14ce:	f0 ff 2f    	mov.w     #0xffff, w0
    14d0:	83 8f 6c    	xor.w     w9, w3, [w15]
    14d2:	06 00 3b    	bra       NN, 0x14e0 <comparemag>
    14d4:	04 05 65    	and.w     w10, w4, w10
    14d6:	0a 00 a7    	btsc.w    w10, #0x0
    14d8:	08 00 37    	bra       0x14ea <returnEqual>
    14da:	09 f0 a6    	btss.w    w9, #0xf
    14dc:	10 00 20    	mov.w     #0x1, w0
    14de:	08 00 37    	bra       0x14f0 <exit>

000014e0 <comparemag>:
    14e0:	82 0f 54    	sub.w     w8, w2, [w15]
    14e2:	83 8f 5c    	subb.w    w9, w3, [w15]
    14e4:	03 00 39    	bra       NC, 0x14ec <adjust>
    14e6:	10 00 20    	mov.w     #0x1, w0
    14e8:	01 00 3e    	bra       GTU, 0x14ec <adjust>

000014ea <returnEqual>:
    14ea:	00 00 20    	mov.w     #0x0, w0

000014ec <adjust>:
    14ec:	09 f0 a7    	btsc.w    w9, #0xf
    14ee:	00 00 ea    	neg.w     w0, w0

000014f0 <exit>:
    14f0:	4f 05 be    	mov.d     [--w15], w10
    14f2:	4f 04 be    	mov.d     [--w15], w8
    14f4:	00 00 e0    	cp0.w     w0
    14f6:	00 00 06    	return    

000014f8 <___floatundisf>:
    14f8:	88 9f be    	mov.d     w8, [w15++]
    14fa:	8a 9f be    	mov.d     w10, [w15++]
    14fc:	00 82 70    	ior.w     w1, w0, w4
    14fe:	04 02 71    	ior.w     w2, w4, w4
    1500:	04 82 71    	ior.w     w3, w4, w4
    1502:	26 00 32    	bra       Z, 0x1550 <return0>
    1504:	00 04 be    	mov.d     w0, w8
    1506:	02 00 be    	mov.d     w2, w0
    1508:	60 11 b8    	mul.uu    w2, #0x0, w2
    150a:	6b 09 20    	mov.w     #0x96, w11
    150c:	95 02 20    	mov.w     #0x29, w5
    150e:	01 82 cf    	ff1l      w1, w4
    1510:	0a 00 39    	bra       NC, 0x1526 <fixshift>
    1512:	05 41 b1    	sub.b     #0x10, w5
    1514:	00 82 cf    	ff1l      w0, w4
    1516:	07 00 39    	bra       NC, 0x1526 <fixshift>
    1518:	05 41 b1    	sub.b     #0x10, w5
    151a:	09 82 cf    	ff1l      w9, w4
    151c:	04 00 39    	bra       NC, 0x1526 <fixshift>
    151e:	05 41 b1    	sub.b     #0x10, w5
    1520:	08 82 cf    	ff1l      w8, w4
    1522:	01 00 39    	bra       NC, 0x1526 <fixshift>
    1524:	05 41 b1    	sub.b     #0x10, w5

00001526 <fixshift>:
    1526:	05 42 52    	sub.b     w4, w5, w4
    1528:	12 00 32    	bra       Z, 0x154e <round>
    152a:	0a 00 3b    	bra       NN, 0x1540 <shiftleft>

0000152c <shiftright>:
    152c:	82 81 71    	ior.w     w3, w2, w3
    152e:	61 01 64    	and.w     w8, #0x1, w2
    1530:	81 00 d1    	lsr.w     w1, w1
    1532:	00 80 d3    	rrc.w     w0, w0
    1534:	89 84 d3    	rrc.w     w9, w9
    1536:	08 84 d3    	rrc.w     w8, w8
    1538:	8b 05 e8    	inc.w     w11, w11
    153a:	04 42 e8    	inc.b     w4, w4
    153c:	f7 ff 3a    	bra       NZ, 0x152c <shiftright>
    153e:	07 00 37    	bra       0x154e <round>

00001540 <shiftleft>:
    1540:	08 04 44    	add.w     w8, w8, w8
    1542:	89 84 4c    	addc.w    w9, w9, w9
    1544:	00 00 48    	addc.w    w0, w0, w0
    1546:	81 80 48    	addc.w    w1, w1, w1
    1548:	8b 05 e9    	dec.w     w11, w11
    154a:	04 42 e9    	dec.b     w4, w4
    154c:	f9 ff 3a    	bra       NZ, 0x1540 <shiftleft>

0000154e <round>:
    154e:	32 ff 07    	rcall     0x13b4 <__fpack>

00001550 <return0>:
    1550:	4f 05 be    	mov.d     [--w15], w10
    1552:	4f 04 be    	mov.d     [--w15], w8
    1554:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	f4 23 04    	goto      0x23f4 <__T1Interrupt>
    1026:	00 00 00 
    1028:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	22 24 04    	goto      0x2422 <__T2Interrupt>
    1032:	00 00 00 
    1034:	50 24 04    	goto      0x2450 <__T3Interrupt>
    1036:	00 00 00 
    1038:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	fe 17 04    	goto      0x17fe <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	d0 17 04    	goto      0x17d0 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	7e 24 04    	goto      0x247e <__T4Interrupt>
    1072:	00 00 00 
    1074:	ac 24 04    	goto      0x24ac <__T5Interrupt>
    1076:	00 00 00 
    1078:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	5a 18 04    	goto      0x185a <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	2c 18 04    	goto      0x182c <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	b6 18 04    	goto      0x18b6 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	88 18 04    	goto      0x1888 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	12 19 04    	goto      0x1912 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	e4 18 04    	goto      0x18e4 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	24 30 04    	goto      0x3024 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009556 <_Device>:
    9556:	12 01       	.word 0x112
    9558:	00 02       	.word 0x200
    955a:	00 00       	.word 0
    955c:	00 40       	.word 0x4000
    955e:	66 66       	.word 0x6666
    9560:	03 00       	.word 0x3
    9562:	00 00       	.word 0
    9564:	01 02       	.word 0x201
    9566:	00 01       	.word 0x100

00009568 <_Configuration1>:
    9568:	09 02       	.word 0x209
    956a:	12 00       	.word 0x12
    956c:	01 01       	.word 0x101
    956e:	00 a0       	.word 0xa000
    9570:	32 09       	.word 0x932
    9572:	04 00       	.word 0x4
    9574:	00 00       	.word 0
    9576:	ff 00       	.word 0xff
    9578:	ff 00       	.word 0xff

0000957a <_String0>:
    957a:	04 03       	.word 0x304
    957c:	09 04       	.word 0x409

0000957e <_String1>:
    957e:	1a 03       	.word 0x31a
    9580:	4f 00       	.word 0x4f
    9582:	6c 00       	.word 0x6c
    9584:	69 00       	.word 0x69
    9586:	6e 00       	.word 0x6e
    9588:	20 00       	.word 0x20
    958a:	43 00       	.word 0x43
    958c:	6f 00       	.word 0x6f
    958e:	6c 00       	.word 0x6c
    9590:	6c 00       	.word 0x6c
    9592:	65 00       	.word 0x65
    9594:	67 00       	.word 0x67
    9596:	65 00       	.word 0x65

00009598 <_String2>:
    9598:	44 03       	.word 0x344
    959a:	45 00       	.word 0x45
    959c:	6c 00       	.word 0x6c
    959e:	65 00       	.word 0x65
    95a0:	63 00       	.word 0x63
    95a2:	61 00       	.word 0x61
    95a4:	6e 00       	.word 0x6e
    95a6:	69 00       	.word 0x69
    95a8:	73 00       	.word 0x73
    95aa:	6d 00       	.word 0x6d
    95ac:	73 00       	.word 0x73
    95ae:	20 00       	.word 0x20
    95b0:	4d 00       	.word 0x4d
    95b2:	69 00       	.word 0x69
    95b4:	6e 00       	.word 0x6e
    95b6:	69 00       	.word 0x69
    95b8:	70 00       	.word 0x70
    95ba:	72 00       	.word 0x72
    95bc:	6f 00       	.word 0x6f
    95be:	6a 00       	.word 0x6a
    95c0:	65 00       	.word 0x65
    95c2:	63 00       	.word 0x63
    95c4:	74 00       	.word 0x74
    95c6:	20 00       	.word 0x20
    95c8:	32 00       	.word 0x32
    95ca:	20 00       	.word 0x20
    95cc:	46 00       	.word 0x46
    95ce:	69 00       	.word 0x69
    95d0:	72 00       	.word 0x72
    95d2:	6d 00       	.word 0x6d
    95d4:	77 00       	.word 0x77
    95d6:	61 00       	.word 0x61
    95d8:	72 00       	.word 0x72
    95da:	65 00       	.word 0x65
Disassembly of section .text:

000015dc <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    15dc:	04 00 fa    	lnk       #0x4
    15de:	00 0f 78    	mov.w     w0, [w14]
    15e0:	21 47 98    	mov.b     w1, [w14+2]
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    15e2:	00 00 00    	nop       

000015e4 <.L2>:
    15e4:	1e 00 78    	mov.w     [w14], w0
    15e6:	10 00 90    	mov.w     [w0+2], w0
    15e8:	90 00 78    	mov.w     [w0], w1
    15ea:	00 20 20    	mov.w     #0x200, w0
    15ec:	00 80 60    	and.w     w1, w0, w0
    15ee:	00 00 e0    	cp0.w     w0
    15f0:	f9 ff 3a    	bra       NZ, 0x15e4 <.L2>
    *(self->UxTXREG) = (uint16_t)ch;
    15f2:	1e 00 78    	mov.w     [w14], w0
    15f4:	20 00 90    	mov.w     [w0+4], w0
    15f6:	ae 40 90    	mov.b     [w14+2], w1
    15f8:	81 80 fb    	ze        w1, w1
    15fa:	01 08 78    	mov.w     w1, [w0]
}
    15fc:	00 80 fa    	ulnk      
    15fe:	00 00 06    	return    

00001600 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1600:	02 00 fa    	lnk       #0x2
    1602:	00 0f 78    	mov.w     w0, [w14]
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    1604:	00 00 00    	nop       

00001606 <.L4>:
    1606:	1e 00 78    	mov.w     [w14], w0
    1608:	10 00 90    	mov.w     [w0+2], w0
    160a:	10 00 78    	mov.w     [w0], w0
    160c:	61 00 60    	and.w     w0, #0x1, w0
    160e:	00 00 e0    	cp0.w     w0
    1610:	fa ff 32    	bra       Z, 0x1606 <.L4>
    return (uint8_t)(*(self->UxRXREG));
    1612:	1e 00 78    	mov.w     [w14], w0
    1614:	30 00 90    	mov.w     [w0+6], w0
    1616:	10 00 78    	mov.w     [w0], w0
    1618:	00 40 78    	mov.b     w0, w0
}
    161a:	00 80 fa    	ulnk      
    161c:	00 00 06    	return    

0000161e <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    161e:	04 00 fa    	lnk       #0x4
    1620:	00 0f 78    	mov.w     w0, [w14]
    1622:	21 47 98    	mov.b     w1, [w14+2]
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    1624:	00 00 00    	nop       

00001626 <.L6>:
    1626:	1e 00 78    	mov.w     [w14], w0
    1628:	d0 10 90    	mov.w     [w0+42], w1
    162a:	1e 00 78    	mov.w     [w14], w0
    162c:	20 10 90    	mov.w     [w0+36], w0
    162e:	80 8f 50    	sub.w     w1, w0, [w15]
    1630:	fa ff 32    	bra       Z, 0x1626 <.L6>
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    1632:	ff 3f fc    	disi      #0x3fff
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    1634:	1e 00 78    	mov.w     [w14], w0
    1636:	90 10 90    	mov.w     [w0+34], w1
    1638:	1e 00 78    	mov.w     [w14], w0
    163a:	40 10 90    	mov.w     [w0+40], w0
    163c:	00 80 40    	add.w     w1, w0, w0
    163e:	ae 40 90    	mov.b     [w14+2], w1
    1640:	01 48 78    	mov.b     w1, [w0]
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    1642:	1e 00 78    	mov.w     [w14], w0
    1644:	40 10 90    	mov.w     [w0+40], w0
    1646:	80 00 e8    	inc.w     w0, w1
    1648:	1e 00 78    	mov.w     [w14], w0
    164a:	20 10 90    	mov.w     [w0+36], w0
    164c:	00 01 78    	mov.w     w0, w2
    164e:	11 00 09    	repeat    #0x11
    1650:	82 80 d8    	div.uw    w1, w2
    1652:	80 00 fd    	exch      w0, w1
    1654:	80 00 78    	mov.w     w0, w1
    1656:	1e 00 78    	mov.w     [w14], w0
    1658:	41 10 98    	mov.w     w1, [w0+40]
    self->TXbuffer.count++;
    165a:	1e 00 78    	mov.w     [w14], w0
    165c:	50 10 90    	mov.w     [w0+42], w0
    165e:	80 00 e8    	inc.w     w0, w1
    1660:	1e 00 78    	mov.w     [w14], w0
    1662:	51 10 98    	mov.w     w1, [w0+42]
    enable_interrupts();
    1664:	52 20 ef    	clr.w     0x52
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    1666:	1e 00 78    	mov.w     [w14], w0
    1668:	d0 10 90    	mov.w     [w0+42], w1
    166a:	1e 00 78    	mov.w     [w14], w0
    166c:	30 18 90    	mov.w     [w0+54], w0
    166e:	80 8f 50    	sub.w     w1, w0, [w15]
    1670:	07 00 39    	bra       NC, 0x1680 <.L5>
        bitset(self->UxSTA, 10);                    // enough, enable data
    1672:	1e 00 78    	mov.w     [w14], w0
    1674:	10 00 90    	mov.w     [w0+2], w0
    1676:	9e 00 78    	mov.w     [w14], w1
    1678:	91 00 90    	mov.w     [w1+2], w1
    167a:	91 00 78    	mov.w     [w1], w1
    167c:	01 a0 a0    	bset.w    w1, #0xa
    167e:	01 08 78    	mov.w     w1, [w0]

00001680 <.L5>:
                                                    // transmission
}
    1680:	00 80 fa    	ulnk      
    1682:	00 00 06    	return    

00001684 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    1684:	04 00 fa    	lnk       #0x4
    1686:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1688:	1e 00 90    	mov.w     [w14+2], w0
    168a:	50 00 90    	mov.w     [w0+10], w0
    168c:	9e 00 90    	mov.w     [w14+2], w1
    168e:	d1 00 90    	mov.w     [w1+10], w1
    1690:	11 01 78    	mov.w     [w1], w2
    1692:	9e 00 90    	mov.w     [w14+2], w1
    1694:	e1 48 90    	mov.b     [w1+14], w1
    1696:	81 80 fb    	ze        w1, w1
    1698:	13 00 20    	mov.w     #0x1, w3
    169a:	81 18 dd    	sl.w      w3, w1, w1
    169c:	81 80 ea    	com.w     w1, w1
    169e:	81 00 61    	and.w     w2, w1, w1
    16a0:	01 08 78    	mov.w     w1, [w0]
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    16a2:	1e 00 90    	mov.w     [w14+2], w0
    16a4:	50 10 90    	mov.w     [w0+42], w0
    16a6:	00 00 e0    	cp0.w     w0
    16a8:	26 00 3a    	bra       NZ, 0x16f6 <.L13>
        bitclear(self->UxSTA, 10);      // disable data transmission
    16aa:	1e 00 90    	mov.w     [w14+2], w0
    16ac:	10 00 90    	mov.w     [w0+2], w0
    16ae:	9e 00 90    	mov.w     [w14+2], w1
    16b0:	91 00 90    	mov.w     [w1+2], w1
    16b2:	91 00 78    	mov.w     [w1], w1
    16b4:	01 a0 a1    	bclr.w    w1, #0xa
    16b6:	01 08 78    	mov.w     w1, [w0]
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    16b8:	1f 00 37    	bra       0x16f8 <.L10>

000016ba <.L12>:
        disable_interrupts();
    16ba:	ff 3f fc    	disi      #0x3fff
        ch = self->TXbuffer.data[self->TXbuffer.head];
    16bc:	1e 00 90    	mov.w     [w14+2], w0
    16be:	90 10 90    	mov.w     [w0+34], w1
    16c0:	1e 00 90    	mov.w     [w14+2], w0
    16c2:	30 10 90    	mov.w     [w0+38], w0
    16c4:	00 80 40    	add.w     w1, w0, w0
    16c6:	10 4f 78    	mov.b     [w0], [w14]
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    16c8:	1e 00 90    	mov.w     [w14+2], w0
    16ca:	30 10 90    	mov.w     [w0+38], w0
    16cc:	80 00 e8    	inc.w     w0, w1
    16ce:	1e 00 90    	mov.w     [w14+2], w0
    16d0:	20 10 90    	mov.w     [w0+36], w0
    16d2:	00 01 78    	mov.w     w0, w2
    16d4:	11 00 09    	repeat    #0x11
    16d6:	82 80 d8    	div.uw    w1, w2
    16d8:	80 00 fd    	exch      w0, w1
    16da:	80 00 78    	mov.w     w0, w1
    16dc:	1e 00 90    	mov.w     [w14+2], w0
    16de:	31 10 98    	mov.w     w1, [w0+38]
        self->TXbuffer.count--;
    16e0:	1e 00 90    	mov.w     [w14+2], w0
    16e2:	50 10 90    	mov.w     [w0+42], w0
    16e4:	80 00 e9    	dec.w     w0, w1
    16e6:	1e 00 90    	mov.w     [w14+2], w0
    16e8:	51 10 98    	mov.w     w1, [w0+42]
        enable_interrupts();
    16ea:	52 20 ef    	clr.w     0x52
        *(self->UxTXREG) = (uint16_t)ch;
    16ec:	1e 00 90    	mov.w     [w14+2], w0
    16ee:	20 00 90    	mov.w     [w0+4], w0
    16f0:	9e 80 fb    	ze        [w14], w1
    16f2:	01 08 78    	mov.w     w1, [w0]
    16f4:	01 00 37    	bra       0x16f8 <.L10>

000016f6 <.L13>:
    16f6:	00 00 00    	nop       

000016f8 <.L10>:
    16f8:	1e 00 90    	mov.w     [w14+2], w0
    16fa:	10 00 90    	mov.w     [w0+2], w0
    16fc:	90 00 78    	mov.w     [w0], w1
    16fe:	00 20 20    	mov.w     #0x200, w0
    1700:	00 80 60    	and.w     w1, w0, w0
    1702:	00 00 e0    	cp0.w     w0
    1704:	04 00 3a    	bra       NZ, 0x170e <.L8>
    1706:	1e 00 90    	mov.w     [w14+2], w0
    1708:	50 10 90    	mov.w     [w0+42], w0
    170a:	00 00 e0    	cp0.w     w0
    170c:	d6 ff 3a    	bra       NZ, 0x16ba <.L12>

0000170e <.L8>:
    }
}
    170e:	00 80 fa    	ulnk      
    1710:	00 00 06    	return    

00001712 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1712:	04 00 fa    	lnk       #0x4
    1714:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1716:	00 00 00    	nop       

00001718 <.L15>:
    1718:	1e 00 90    	mov.w     [w14+2], w0
    171a:	20 18 90    	mov.w     [w0+52], w0
    171c:	00 00 e0    	cp0.w     w0
    171e:	fc ff 32    	bra       Z, 0x1718 <.L15>
    disable_interrupts();
    1720:	ff 3f fc    	disi      #0x3fff
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1722:	1e 00 90    	mov.w     [w14+2], w0
    1724:	e0 10 90    	mov.w     [w0+44], w1
    1726:	1e 00 90    	mov.w     [w14+2], w0
    1728:	00 18 90    	mov.w     [w0+48], w0
    172a:	00 80 40    	add.w     w1, w0, w0
    172c:	10 4f 78    	mov.b     [w0], [w14]
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    172e:	1e 00 90    	mov.w     [w14+2], w0
    1730:	00 18 90    	mov.w     [w0+48], w0
    1732:	80 00 e8    	inc.w     w0, w1
    1734:	1e 00 90    	mov.w     [w14+2], w0
    1736:	70 10 90    	mov.w     [w0+46], w0
    1738:	00 01 78    	mov.w     w0, w2
    173a:	11 00 09    	repeat    #0x11
    173c:	82 80 d8    	div.uw    w1, w2
    173e:	80 00 fd    	exch      w0, w1
    1740:	80 00 78    	mov.w     w0, w1
    1742:	1e 00 90    	mov.w     [w14+2], w0
    1744:	01 18 98    	mov.w     w1, [w0+48]
    self->RXbuffer.count--;
    1746:	1e 00 90    	mov.w     [w14+2], w0
    1748:	20 18 90    	mov.w     [w0+52], w0
    174a:	80 00 e9    	dec.w     w0, w1
    174c:	1e 00 90    	mov.w     [w14+2], w0
    174e:	21 18 98    	mov.w     w1, [w0+52]
    enable_interrupts();
    1750:	52 20 ef    	clr.w     0x52
    return ch;
    1752:	1e 40 78    	mov.b     [w14], w0
}
    1754:	00 80 fa    	ulnk      
    1756:	00 00 06    	return    

00001758 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    1758:	02 00 fa    	lnk       #0x2
    175a:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    175c:	1e 00 78    	mov.w     [w14], w0
    175e:	50 00 90    	mov.w     [w0+10], w0
    1760:	9e 00 78    	mov.w     [w14], w1
    1762:	d1 00 90    	mov.w     [w1+10], w1
    1764:	11 01 78    	mov.w     [w1], w2
    1766:	9e 00 78    	mov.w     [w14], w1
    1768:	f1 48 90    	mov.b     [w1+15], w1
    176a:	81 80 fb    	ze        w1, w1
    176c:	13 00 20    	mov.w     #0x1, w3
    176e:	81 18 dd    	sl.w      w3, w1, w1
    1770:	81 80 ea    	com.w     w1, w1
    1772:	81 00 61    	and.w     w2, w1, w1
    1774:	01 08 78    	mov.w     w1, [w0]
    while ((bitread(self->UxSTA, 0)==1) && 
    1776:	1d 00 37    	bra       0x17b2 <.L17>

00001778 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    1778:	ff 3f fc    	disi      #0x3fff
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    177a:	1e 00 78    	mov.w     [w14], w0
    177c:	e0 10 90    	mov.w     [w0+44], w1
    177e:	1e 00 78    	mov.w     [w14], w0
    1780:	10 18 90    	mov.w     [w0+50], w0
    1782:	00 80 40    	add.w     w1, w0, w0
    1784:	9e 00 78    	mov.w     [w14], w1
    1786:	b1 00 90    	mov.w     [w1+6], w1
    1788:	91 00 78    	mov.w     [w1], w1
    178a:	81 40 78    	mov.b     w1, w1
    178c:	01 48 78    	mov.b     w1, [w0]
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    178e:	1e 00 78    	mov.w     [w14], w0
    1790:	10 18 90    	mov.w     [w0+50], w0
    1792:	80 00 e8    	inc.w     w0, w1
    1794:	1e 00 78    	mov.w     [w14], w0
    1796:	70 10 90    	mov.w     [w0+46], w0
    1798:	00 01 78    	mov.w     w0, w2
    179a:	11 00 09    	repeat    #0x11
    179c:	82 80 d8    	div.uw    w1, w2
    179e:	80 00 fd    	exch      w0, w1
    17a0:	80 00 78    	mov.w     w0, w1
    17a2:	1e 00 78    	mov.w     [w14], w0
    17a4:	11 18 98    	mov.w     w1, [w0+50]
        self->RXbuffer.count++;
    17a6:	1e 00 78    	mov.w     [w14], w0
    17a8:	20 18 90    	mov.w     [w0+52], w0
    17aa:	80 00 e8    	inc.w     w0, w1
    17ac:	1e 00 78    	mov.w     [w14], w0
    17ae:	21 18 98    	mov.w     w1, [w0+52]
        enable_interrupts();
    17b0:	52 20 ef    	clr.w     0x52

000017b2 <.L17>:
    17b2:	1e 00 78    	mov.w     [w14], w0
    17b4:	10 00 90    	mov.w     [w0+2], w0
    17b6:	10 00 78    	mov.w     [w0], w0
    17b8:	61 00 60    	and.w     w0, #0x1, w0
    17ba:	00 40 78    	mov.b     w0, w0
    17bc:	00 04 e0    	cp0.b     w0
    17be:	06 00 32    	bra       Z, 0x17cc <.L16>
    17c0:	1e 00 78    	mov.w     [w14], w0
    17c2:	a0 18 90    	mov.w     [w0+52], w1
    17c4:	1e 00 78    	mov.w     [w14], w0
    17c6:	70 10 90    	mov.w     [w0+46], w0
    17c8:	80 8f 50    	sub.w     w1, w0, [w15]
    17ca:	d6 ff 3a    	bra       NZ, 0x1778 <.L19>

000017cc <.L16>:
    }
}
    17cc:	00 80 fa    	ulnk      
    17ce:	00 00 06    	return    

000017d0 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    17d0:	36 00 f8    	push      0x36
    17d2:	80 9f be    	mov.d     w0, [w15++]
    17d4:	82 9f be    	mov.d     w2, [w15++]
    17d6:	84 9f be    	mov.d     w4, [w15++]
    17d8:	86 9f be    	mov.d     w6, [w15++]
    17da:	32 00 f8    	push      0x32
    17dc:	34 00 f8    	push      0x34
    17de:	10 00 20    	mov.w     #0x1, w0
    17e0:	a0 01 88    	mov.w     w0, 0x34
    17e2:	00 20 20    	mov.w     #0x200, w0
    17e4:	90 01 88    	mov.w     w0, 0x32
    17e6:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart1);
    17e8:	20 9f 20    	mov.w     #0x9f2, w0
    17ea:	4c ff 07    	rcall     0x1684 <___serviceTxInterrupt> <L0> <.LFB3> <.LFE2>
}
    17ec:	00 80 fa    	ulnk      
    17ee:	34 00 f9    	pop       0x34
    17f0:	32 00 f9    	pop       0x32
    17f2:	4f 03 be    	mov.d     [--w15], w6
    17f4:	4f 02 be    	mov.d     [--w15], w4
    17f6:	4f 01 be    	mov.d     [--w15], w2
    17f8:	4f 00 be    	mov.d     [--w15], w0
    17fa:	36 00 f9    	pop       0x36
    17fc:	00 40 06    	retfie    

000017fe <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    17fe:	36 00 f8    	push      0x36
    1800:	80 9f be    	mov.d     w0, [w15++]
    1802:	82 9f be    	mov.d     w2, [w15++]
    1804:	84 9f be    	mov.d     w4, [w15++]
    1806:	86 9f be    	mov.d     w6, [w15++]
    1808:	32 00 f8    	push      0x32
    180a:	34 00 f8    	push      0x34
    180c:	10 00 20    	mov.w     #0x1, w0
    180e:	a0 01 88    	mov.w     w0, 0x34
    1810:	00 20 20    	mov.w     #0x200, w0
    1812:	90 01 88    	mov.w     w0, 0x32
    1814:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart1);
    1816:	20 9f 20    	mov.w     #0x9f2, w0
    1818:	9f ff 07    	rcall     0x1758 <___serviceRxInterrupt> <L0> <.LFB5> <.LFE4>
}
    181a:	00 80 fa    	ulnk      
    181c:	34 00 f9    	pop       0x34
    181e:	32 00 f9    	pop       0x32
    1820:	4f 03 be    	mov.d     [--w15], w6
    1822:	4f 02 be    	mov.d     [--w15], w4
    1824:	4f 01 be    	mov.d     [--w15], w2
    1826:	4f 00 be    	mov.d     [--w15], w0
    1828:	36 00 f9    	pop       0x36
    182a:	00 40 06    	retfie    

0000182c <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    182c:	36 00 f8    	push      0x36
    182e:	80 9f be    	mov.d     w0, [w15++]
    1830:	82 9f be    	mov.d     w2, [w15++]
    1832:	84 9f be    	mov.d     w4, [w15++]
    1834:	86 9f be    	mov.d     w6, [w15++]
    1836:	32 00 f8    	push      0x32
    1838:	34 00 f8    	push      0x34
    183a:	10 00 20    	mov.w     #0x1, w0
    183c:	a0 01 88    	mov.w     w0, 0x34
    183e:	00 20 20    	mov.w     #0x200, w0
    1840:	90 01 88    	mov.w     w0, 0x32
    1842:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart2);
    1844:	e0 a2 20    	mov.w     #0xa2e, w0
    1846:	1e ff 07    	rcall     0x1684 <___serviceTxInterrupt> <L0> <.LFB3> <.LFE2>
}
    1848:	00 80 fa    	ulnk      
    184a:	34 00 f9    	pop       0x34
    184c:	32 00 f9    	pop       0x32
    184e:	4f 03 be    	mov.d     [--w15], w6
    1850:	4f 02 be    	mov.d     [--w15], w4
    1852:	4f 01 be    	mov.d     [--w15], w2
    1854:	4f 00 be    	mov.d     [--w15], w0
    1856:	36 00 f9    	pop       0x36
    1858:	00 40 06    	retfie    

0000185a <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    185a:	36 00 f8    	push      0x36
    185c:	80 9f be    	mov.d     w0, [w15++]
    185e:	82 9f be    	mov.d     w2, [w15++]
    1860:	84 9f be    	mov.d     w4, [w15++]
    1862:	86 9f be    	mov.d     w6, [w15++]
    1864:	32 00 f8    	push      0x32
    1866:	34 00 f8    	push      0x34
    1868:	10 00 20    	mov.w     #0x1, w0
    186a:	a0 01 88    	mov.w     w0, 0x34
    186c:	00 20 20    	mov.w     #0x200, w0
    186e:	90 01 88    	mov.w     w0, 0x32
    1870:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart2);
    1872:	e0 a2 20    	mov.w     #0xa2e, w0
    1874:	71 ff 07    	rcall     0x1758 <___serviceRxInterrupt> <L0> <.LFB5> <.LFE4>
}
    1876:	00 80 fa    	ulnk      
    1878:	34 00 f9    	pop       0x34
    187a:	32 00 f9    	pop       0x32
    187c:	4f 03 be    	mov.d     [--w15], w6
    187e:	4f 02 be    	mov.d     [--w15], w4
    1880:	4f 01 be    	mov.d     [--w15], w2
    1882:	4f 00 be    	mov.d     [--w15], w0
    1884:	36 00 f9    	pop       0x36
    1886:	00 40 06    	retfie    

00001888 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    1888:	36 00 f8    	push      0x36
    188a:	80 9f be    	mov.d     w0, [w15++]
    188c:	82 9f be    	mov.d     w2, [w15++]
    188e:	84 9f be    	mov.d     w4, [w15++]
    1890:	86 9f be    	mov.d     w6, [w15++]
    1892:	32 00 f8    	push      0x32
    1894:	34 00 f8    	push      0x34
    1896:	10 00 20    	mov.w     #0x1, w0
    1898:	a0 01 88    	mov.w     w0, 0x34
    189a:	00 20 20    	mov.w     #0x200, w0
    189c:	90 01 88    	mov.w     w0, 0x32
    189e:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart3);
    18a0:	a0 a6 20    	mov.w     #0xa6a, w0
    18a2:	f0 fe 07    	rcall     0x1684 <___serviceTxInterrupt> <L0> <.LFB3> <.LFE2>
}
    18a4:	00 80 fa    	ulnk      
    18a6:	34 00 f9    	pop       0x34
    18a8:	32 00 f9    	pop       0x32
    18aa:	4f 03 be    	mov.d     [--w15], w6
    18ac:	4f 02 be    	mov.d     [--w15], w4
    18ae:	4f 01 be    	mov.d     [--w15], w2
    18b0:	4f 00 be    	mov.d     [--w15], w0
    18b2:	36 00 f9    	pop       0x36
    18b4:	00 40 06    	retfie    

000018b6 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    18b6:	36 00 f8    	push      0x36
    18b8:	80 9f be    	mov.d     w0, [w15++]
    18ba:	82 9f be    	mov.d     w2, [w15++]
    18bc:	84 9f be    	mov.d     w4, [w15++]
    18be:	86 9f be    	mov.d     w6, [w15++]
    18c0:	32 00 f8    	push      0x32
    18c2:	34 00 f8    	push      0x34
    18c4:	10 00 20    	mov.w     #0x1, w0
    18c6:	a0 01 88    	mov.w     w0, 0x34
    18c8:	00 20 20    	mov.w     #0x200, w0
    18ca:	90 01 88    	mov.w     w0, 0x32
    18cc:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart3);
    18ce:	a0 a6 20    	mov.w     #0xa6a, w0
    18d0:	43 ff 07    	rcall     0x1758 <___serviceRxInterrupt> <L0> <.LFB5> <.LFE4>
}
    18d2:	00 80 fa    	ulnk      
    18d4:	34 00 f9    	pop       0x34
    18d6:	32 00 f9    	pop       0x32
    18d8:	4f 03 be    	mov.d     [--w15], w6
    18da:	4f 02 be    	mov.d     [--w15], w4
    18dc:	4f 01 be    	mov.d     [--w15], w2
    18de:	4f 00 be    	mov.d     [--w15], w0
    18e0:	36 00 f9    	pop       0x36
    18e2:	00 40 06    	retfie    

000018e4 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    18e4:	36 00 f8    	push      0x36
    18e6:	80 9f be    	mov.d     w0, [w15++]
    18e8:	82 9f be    	mov.d     w2, [w15++]
    18ea:	84 9f be    	mov.d     w4, [w15++]
    18ec:	86 9f be    	mov.d     w6, [w15++]
    18ee:	32 00 f8    	push      0x32
    18f0:	34 00 f8    	push      0x34
    18f2:	10 00 20    	mov.w     #0x1, w0
    18f4:	a0 01 88    	mov.w     w0, 0x34
    18f6:	00 20 20    	mov.w     #0x200, w0
    18f8:	90 01 88    	mov.w     w0, 0x32
    18fa:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart4);
    18fc:	60 aa 20    	mov.w     #0xaa6, w0
    18fe:	c2 fe 07    	rcall     0x1684 <___serviceTxInterrupt> <L0> <.LFB3> <.LFE2>
}
    1900:	00 80 fa    	ulnk      
    1902:	34 00 f9    	pop       0x34
    1904:	32 00 f9    	pop       0x32
    1906:	4f 03 be    	mov.d     [--w15], w6
    1908:	4f 02 be    	mov.d     [--w15], w4
    190a:	4f 01 be    	mov.d     [--w15], w2
    190c:	4f 00 be    	mov.d     [--w15], w0
    190e:	36 00 f9    	pop       0x36
    1910:	00 40 06    	retfie    

00001912 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    1912:	36 00 f8    	push      0x36
    1914:	80 9f be    	mov.d     w0, [w15++]
    1916:	82 9f be    	mov.d     w2, [w15++]
    1918:	84 9f be    	mov.d     w4, [w15++]
    191a:	86 9f be    	mov.d     w6, [w15++]
    191c:	32 00 f8    	push      0x32
    191e:	34 00 f8    	push      0x34
    1920:	10 00 20    	mov.w     #0x1, w0
    1922:	a0 01 88    	mov.w     w0, 0x34
    1924:	00 20 20    	mov.w     #0x200, w0
    1926:	90 01 88    	mov.w     w0, 0x32
    1928:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart4);
    192a:	60 aa 20    	mov.w     #0xaa6, w0
    192c:	15 ff 07    	rcall     0x1758 <___serviceRxInterrupt> <L0> <.LFB5> <.LFE4>
}
    192e:	00 80 fa    	ulnk      
    1930:	34 00 f9    	pop       0x34
    1932:	32 00 f9    	pop       0x32
    1934:	4f 03 be    	mov.d     [--w15], w6
    1936:	4f 02 be    	mov.d     [--w15], w4
    1938:	4f 01 be    	mov.d     [--w15], w2
    193a:	4f 00 be    	mov.d     [--w15], w0
    193c:	36 00 f9    	pop       0x36
    193e:	00 40 06    	retfie    

00001940 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    1940:	08 00 fa    	lnk       #0x8
    1942:	10 07 98    	mov.w     w0, [w14+2]
    1944:	21 07 98    	mov.w     w1, [w14+4]
    1946:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    1948:	1e 00 90    	mov.w     [w14+2], w0
    194a:	00 00 e0    	cp0.w     w0
    194c:	25 00 35    	bra       LT, 0x1998 <.L37>
    194e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1950:	03 00 34    	bra       LE, 0x1958 <.L30>
    1952:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1954:	11 00 32    	bra       Z, 0x1978 <.L31>
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    1956:	21 00 37    	bra       0x199a <.L34>

00001958 <.L30>:
    1958:	00 00 eb    	clr.w     w0
    195a:	00 0f 78    	mov.w     w0, [w14]
    195c:	08 00 37    	bra       0x196e <.L32>

0000195e <.L33>:
    195e:	2e 00 90    	mov.w     [w14+4], w0
    1960:	90 40 78    	mov.b     [w0], w1
    1962:	2e 00 90    	mov.w     [w14+4], w0
    1964:	00 00 e8    	inc.w     w0, w0
    1966:	20 07 98    	mov.w     w0, [w14+4]
    1968:	b0 41 80    	mov.w     0x836, w0
    196a:	48 04 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    196c:	1e 0f e8    	inc.w     [w14], [w14]

0000196e <.L32>:
    196e:	9e 00 78    	mov.w     [w14], w1
    1970:	3e 00 90    	mov.w     [w14+6], w0
    1972:	80 8f 50    	sub.w     w1, w0, [w15]
    1974:	f4 ff 39    	bra       NC, 0x195e <.L33>
    1976:	11 00 37    	bra       0x199a <.L34>

00001978 <.L31>:
    1978:	00 00 eb    	clr.w     w0
    197a:	00 0f 78    	mov.w     w0, [w14]
    197c:	08 00 37    	bra       0x198e <.L35>

0000197e <.L36>:
    197e:	2e 00 90    	mov.w     [w14+4], w0
    1980:	90 40 78    	mov.b     [w0], w1
    1982:	2e 00 90    	mov.w     [w14+4], w0
    1984:	00 00 e8    	inc.w     w0, w0
    1986:	20 07 98    	mov.w     w0, [w14+4]
    1988:	c0 41 80    	mov.w     0x838, w0
    198a:	38 04 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    198c:	1e 0f e8    	inc.w     [w14], [w14]

0000198e <.L35>:
    198e:	9e 00 78    	mov.w     [w14], w1
    1990:	3e 00 90    	mov.w     [w14+6], w0
    1992:	80 8f 50    	sub.w     w1, w0, [w15]
    1994:	f4 ff 39    	bra       NC, 0x197e <.L36>
    1996:	01 00 37    	bra       0x199a <.L34>

00001998 <.L37>:
    1998:	00 00 00    	nop       

0000199a <.L34>:
    }
    return len;
    199a:	3e 00 90    	mov.w     [w14+6], w0
}
    199c:	00 80 fa    	ulnk      
    199e:	00 00 06    	return    

000019a0 <_init_uart>:

void init_uart(void) {
    19a0:	00 00 fa    	lnk       #0x0
    init_pin();
    19a2:	c6 07 07    	rcall     0x2930 <_init_pin> <L0> <.LFB3> <.LFE2>

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    19a4:	40 6d 20    	mov.w     #0x6d4, w0
    19a6:	80 1f 78    	mov.w     w0, [w15++]
    19a8:	57 01 20    	mov.w     #0x15, w7
    19aa:	86 c0 b3    	mov.b     #0x8, w6
    19ac:	80 82 eb    	setm.w    w5
    19ae:	64 c0 b3    	mov.b     #0x6, w4
    19b0:	80 01 eb    	clr.w     w3
    19b2:	02 2f 20    	mov.w     #0x2f0, w2
    19b4:	21 2f 20    	mov.w     #0x2f2, w1
    19b6:	20 ae 20    	mov.w     #0xae2, w0
    19b8:	cf 08 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    19ba:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    19bc:	a0 6d 20    	mov.w     #0x6da, w0
    19be:	80 1f 78    	mov.w     w0, [w15++]
    19c0:	a7 01 20    	mov.w     #0x1a, w7
    19c2:	00 43 eb    	clr.b     w6
    19c4:	80 82 eb    	setm.w    w5
    19c6:	74 c0 b3    	mov.b     #0x7, w4
    19c8:	80 01 eb    	clr.w     w3
    19ca:	02 2f 20    	mov.w     #0x2f0, w2
    19cc:	21 2f 20    	mov.w     #0x2f2, w1
    19ce:	80 af 20    	mov.w     #0xaf8, w0
    19d0:	c3 08 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    19d2:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    19d4:	40 00 20    	mov.w     #0x4, w0
    19d6:	80 1f 78    	mov.w     w0, [w15++]
    19d8:	30 00 20    	mov.w     #0x3, w0
    19da:	80 1f 78    	mov.w     w0, [w15++]
    19dc:	80 c0 b3    	mov.b     #0x8, w0
    19de:	80 1f 78    	mov.w     w0, [w15++]
    19e0:	00 40 eb    	clr.b     w0
    19e2:	80 1f 78    	mov.w     w0, [w15++]
    19e4:	40 6a 20    	mov.w     #0x6a4, w0
    19e6:	80 1f 78    	mov.w     w0, [w15++]
    19e8:	40 6a 20    	mov.w     #0x6a4, w0
    19ea:	80 1f 78    	mov.w     w0, [w15++]
    19ec:	b0 c0 b3    	mov.b     #0xb, w0
    19ee:	80 1f 78    	mov.w     w0, [w15++]
    19f0:	c0 c0 b3    	mov.b     #0xc, w0
    19f2:	80 1f 78    	mov.w     w0, [w15++]
    19f4:	47 09 20    	mov.w     #0x94, w7
    19f6:	46 08 20    	mov.w     #0x84, w6
    19f8:	85 22 20    	mov.w     #0x228, w5
    19fa:	64 22 20    	mov.w     #0x226, w4
    19fc:	43 22 20    	mov.w     #0x224, w3
    19fe:	22 22 20    	mov.w     #0x222, w2
    1a00:	01 22 20    	mov.w     #0x220, w1
    1a02:	20 9f 20    	mov.w     #0x9f2, w0
    1a04:	6b 00 07    	rcall     0x1adc <_uart_init> <L0> <.LFB16> <.LFE15>
    1a06:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    1a08:	60 00 20    	mov.w     #0x6, w0
    1a0a:	80 1f 78    	mov.w     w0, [w15++]
    1a0c:	50 00 20    	mov.w     #0x5, w0
    1a0e:	80 1f 78    	mov.w     w0, [w15++]
    1a10:	80 c0 b3    	mov.b     #0x8, w0
    1a12:	80 1f 78    	mov.w     w0, [w15++]
    1a14:	00 40 eb    	clr.b     w0
    1a16:	80 1f 78    	mov.w     w0, [w15++]
    1a18:	60 6a 20    	mov.w     #0x6a6, w0
    1a1a:	80 1f 78    	mov.w     w0, [w15++]
    1a1c:	60 6a 20    	mov.w     #0x6a6, w0
    1a1e:	80 1f 78    	mov.w     w0, [w15++]
    1a20:	e0 c0 b3    	mov.b     #0xe, w0
    1a22:	80 1f 78    	mov.w     w0, [w15++]
    1a24:	f0 c0 b3    	mov.b     #0xf, w0
    1a26:	80 1f 78    	mov.w     w0, [w15++]
    1a28:	67 09 20    	mov.w     #0x96, w7
    1a2a:	66 08 20    	mov.w     #0x86, w6
    1a2c:	85 23 20    	mov.w     #0x238, w5
    1a2e:	64 23 20    	mov.w     #0x236, w4
    1a30:	43 23 20    	mov.w     #0x234, w3
    1a32:	22 23 20    	mov.w     #0x232, w2
    1a34:	01 23 20    	mov.w     #0x230, w1
    1a36:	e0 a2 20    	mov.w     #0xa2e, w0
    1a38:	51 00 07    	rcall     0x1adc <_uart_init> <L0> <.LFB16> <.LFE15>
    1a3a:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    1a3c:	d0 01 20    	mov.w     #0x1d, w0
    1a3e:	80 1f 78    	mov.w     w0, [w15++]
    1a40:	c0 01 20    	mov.w     #0x1c, w0
    1a42:	80 1f 78    	mov.w     w0, [w15++]
    1a44:	80 c0 b3    	mov.b     #0x8, w0
    1a46:	80 1f 78    	mov.w     w0, [w15++]
    1a48:	80 c0 b3    	mov.b     #0x8, w0
    1a4a:	80 1f 78    	mov.w     w0, [w15++]
    1a4c:	a0 6a 20    	mov.w     #0x6aa, w0
    1a4e:	80 1f 78    	mov.w     w0, [w15++]
    1a50:	20 6a 20    	mov.w     #0x6a2, w0
    1a52:	80 1f 78    	mov.w     w0, [w15++]
    1a54:	20 c0 b3    	mov.b     #0x2, w0
    1a56:	80 1f 78    	mov.w     w0, [w15++]
    1a58:	30 c0 b3    	mov.b     #0x3, w0
    1a5a:	80 1f 78    	mov.w     w0, [w15++]
    1a5c:	e7 09 20    	mov.w     #0x9e, w7
    1a5e:	e6 08 20    	mov.w     #0x8e, w6
    1a60:	85 25 20    	mov.w     #0x258, w5
    1a62:	64 25 20    	mov.w     #0x256, w4
    1a64:	43 25 20    	mov.w     #0x254, w3
    1a66:	22 25 20    	mov.w     #0x252, w2
    1a68:	01 25 20    	mov.w     #0x250, w1
    1a6a:	a0 a6 20    	mov.w     #0xa6a, w0
    1a6c:	37 00 07    	rcall     0x1adc <_uart_init> <L0> <.LFB16> <.LFE15>
    1a6e:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    1a70:	f0 01 20    	mov.w     #0x1f, w0
    1a72:	80 1f 78    	mov.w     w0, [w15++]
    1a74:	e0 01 20    	mov.w     #0x1e, w0
    1a76:	80 1f 78    	mov.w     w0, [w15++]
    1a78:	80 c0 b3    	mov.b     #0x8, w0
    1a7a:	80 1f 78    	mov.w     w0, [w15++]
    1a7c:	00 40 eb    	clr.b     w0
    1a7e:	80 1f 78    	mov.w     w0, [w15++]
    1a80:	60 6b 20    	mov.w     #0x6b6, w0
    1a82:	80 1f 78    	mov.w     w0, [w15++]
    1a84:	60 6b 20    	mov.w     #0x6b6, w0
    1a86:	80 1f 78    	mov.w     w0, [w15++]
    1a88:	80 c0 b3    	mov.b     #0x8, w0
    1a8a:	80 1f 78    	mov.w     w0, [w15++]
    1a8c:	90 c0 b3    	mov.b     #0x9, w0
    1a8e:	80 1f 78    	mov.w     w0, [w15++]
    1a90:	e7 09 20    	mov.w     #0x9e, w7
    1a92:	e6 08 20    	mov.w     #0x8e, w6
    1a94:	85 2b 20    	mov.w     #0x2b8, w5
    1a96:	64 2b 20    	mov.w     #0x2b6, w4
    1a98:	43 2b 20    	mov.w     #0x2b4, w3
    1a9a:	22 2b 20    	mov.w     #0x2b2, w2
    1a9c:	01 2b 20    	mov.w     #0x2b0, w1
    1a9e:	60 aa 20    	mov.w     #0xaa6, w0
    1aa0:	1d 00 07    	rcall     0x1adc <_uart_init> <L0> <.LFB16> <.LFE15>
    1aa2:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    1aa4:	00 00 eb    	clr.w     w0
    1aa6:	80 1f 78    	mov.w     w0, [w15++]
    1aa8:	00 00 eb    	clr.w     w0
    1aaa:	80 1f 78    	mov.w     w0, [w15++]
    1aac:	00 00 eb    	clr.w     w0
    1aae:	80 1f 78    	mov.w     w0, [w15++]
    1ab0:	00 00 eb    	clr.w     w0
    1ab2:	80 1f 78    	mov.w     w0, [w15++]
    1ab4:	00 00 eb    	clr.w     w0
    1ab6:	80 1f 78    	mov.w     w0, [w15++]
    1ab8:	10 00 20    	mov.w     #0x1, w0
    1aba:	80 1f 78    	mov.w     w0, [w15++]
    1abc:	e5 c4 b3    	mov.b     #0x4e, w5
    1abe:	06 00 20    	mov.w     #0x0, w6
    1ac0:	67 69 24    	mov.w     #0x4696, w7
    1ac2:	00 02 eb    	clr.w     w4
    1ac4:	80 01 eb    	clr.w     w3
    1ac6:	82 af 20    	mov.w     #0xaf8, w2
    1ac8:	21 ae 20    	mov.w     #0xae2, w1
    1aca:	20 9f 20    	mov.w     #0x9f2, w0
    1acc:	72 00 07    	rcall     0x1bb2 <_uart_open> <L0> <.LFB17> <.LFE16>
    1ace:	ec 87 57    	sub.w     w15, #0xc, w15
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1ad0:	20 9f 20    	mov.w     #0x9f2, w0
    1ad2:	b0 41 88    	mov.w     w0, 0x836
    _stderr = &uart1;
    1ad4:	20 9f 20    	mov.w     #0x9f2, w0
    1ad6:	c0 41 88    	mov.w     w0, 0x838
}
    1ad8:	00 80 fa    	ulnk      
    1ada:	00 00 06    	return    

00001adc <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1adc:	10 00 fa    	lnk       #0x10
    1ade:	00 0f 78    	mov.w     w0, [w14]
    1ae0:	11 07 98    	mov.w     w1, [w14+2]
    1ae2:	22 07 98    	mov.w     w2, [w14+4]
    1ae4:	33 07 98    	mov.w     w3, [w14+6]
    1ae6:	44 07 98    	mov.w     w4, [w14+8]
    1ae8:	55 07 98    	mov.w     w5, [w14+10]
    1aea:	66 07 98    	mov.w     w6, [w14+12]
    1aec:	77 07 98    	mov.w     w7, [w14+14]
    self->UxMODE = UxMODE;
    1aee:	1e 00 78    	mov.w     [w14], w0
    1af0:	9e 00 90    	mov.w     [w14+2], w1
    1af2:	01 08 78    	mov.w     w1, [w0]
    self->UxSTA = UxSTA;
    1af4:	1e 00 78    	mov.w     [w14], w0
    1af6:	ae 00 90    	mov.w     [w14+4], w1
    1af8:	11 00 98    	mov.w     w1, [w0+2]
    self->UxTXREG = UxTXREG;
    1afa:	1e 00 78    	mov.w     [w14], w0
    1afc:	be 00 90    	mov.w     [w14+6], w1
    1afe:	21 00 98    	mov.w     w1, [w0+4]
    self->UxRXREG = UxRXREG;
    1b00:	1e 00 78    	mov.w     [w14], w0
    1b02:	ce 00 90    	mov.w     [w14+8], w1
    1b04:	31 00 98    	mov.w     w1, [w0+6]
    self->UxBRG = UxBRG;
    1b06:	1e 00 78    	mov.w     [w14], w0
    1b08:	de 00 90    	mov.w     [w14+10], w1
    1b0a:	41 00 98    	mov.w     w1, [w0+8]
    self->IFSy = IFSy;
    1b0c:	1e 00 78    	mov.w     [w14], w0
    1b0e:	ee 00 90    	mov.w     [w14+12], w1
    1b10:	51 00 98    	mov.w     w1, [w0+10]
    self->IECy = IECy;
    1b12:	1e 00 78    	mov.w     [w14], w0
    1b14:	fe 00 90    	mov.w     [w14+14], w1
    1b16:	61 00 98    	mov.w     w1, [w0+12]
    self->UxTXIF = UxTXIF;
    1b18:	1e 00 78    	mov.w     [w14], w0
    1b1a:	8e f8 97    	mov.b     [w14-8], w1
    1b1c:	61 48 98    	mov.b     w1, [w0+14]
    self->UxRXIF = UxRXIF;
    1b1e:	1e 00 78    	mov.w     [w14], w0
    1b20:	ee f0 97    	mov.b     [w14-10], w1
    1b22:	71 48 98    	mov.b     w1, [w0+15]
    self->RXrpinr = RXrpinr;
    1b24:	1e 00 78    	mov.w     [w14], w0
    1b26:	ae b8 97    	mov.w     [w14-12], w1
    1b28:	01 08 98    	mov.w     w1, [w0+16]
    self->CTSrpinr = CTSrpinr;
    1b2a:	1e 00 78    	mov.w     [w14], w0
    1b2c:	9e b8 97    	mov.w     [w14-14], w1
    1b2e:	11 08 98    	mov.w     w1, [w0+18]
    self->RXrpshift = RXrpshift;
    1b30:	1e 00 78    	mov.w     [w14], w0
    1b32:	8e f0 97    	mov.b     [w14-16], w1
    1b34:	41 50 98    	mov.b     w1, [w0+20]
    self->CTSrpshift = CTSrpshift;
    1b36:	1e 00 78    	mov.w     [w14], w0
    1b38:	ee e8 97    	mov.b     [w14-18], w1
    1b3a:	51 50 98    	mov.b     w1, [w0+21]
    self->TXrpnum = TXrpnum;
    1b3c:	1e 00 78    	mov.w     [w14], w0
    1b3e:	ee b0 97    	mov.w     [w14-20], w1
    1b40:	31 08 98    	mov.w     w1, [w0+22]
    self->RTSrpnum = RTSrpnum;
    1b42:	1e 00 78    	mov.w     [w14], w0
    1b44:	de b0 97    	mov.w     [w14-22], w1
    1b46:	41 08 98    	mov.w     w1, [w0+24]
    self->TX = NULL;
    1b48:	1e 00 78    	mov.w     [w14], w0
    1b4a:	80 00 eb    	clr.w     w1
    1b4c:	51 08 98    	mov.w     w1, [w0+26]
    self->RX = NULL;
    1b4e:	1e 00 78    	mov.w     [w14], w0
    1b50:	80 00 eb    	clr.w     w1
    1b52:	61 08 98    	mov.w     w1, [w0+28]
    self->RTS = NULL;
    1b54:	1e 00 78    	mov.w     [w14], w0
    1b56:	80 00 eb    	clr.w     w1
    1b58:	71 08 98    	mov.w     w1, [w0+30]
    self->CTS = NULL;
    1b5a:	1e 00 78    	mov.w     [w14], w0
    1b5c:	80 00 eb    	clr.w     w1
    1b5e:	01 10 98    	mov.w     w1, [w0+32]
    self->TXbuffer.data = NULL;
    1b60:	1e 00 78    	mov.w     [w14], w0
    1b62:	80 00 eb    	clr.w     w1
    1b64:	11 10 98    	mov.w     w1, [w0+34]
    self->TXbuffer.length = 0;
    1b66:	1e 00 78    	mov.w     [w14], w0
    1b68:	80 00 eb    	clr.w     w1
    1b6a:	21 10 98    	mov.w     w1, [w0+36]
    self->TXbuffer.head = 0;
    1b6c:	1e 00 78    	mov.w     [w14], w0
    1b6e:	80 00 eb    	clr.w     w1
    1b70:	31 10 98    	mov.w     w1, [w0+38]
    self->TXbuffer.tail = 0;
    1b72:	1e 00 78    	mov.w     [w14], w0
    1b74:	80 00 eb    	clr.w     w1
    1b76:	41 10 98    	mov.w     w1, [w0+40]
    self->TXbuffer.count = 0;
    1b78:	1e 00 78    	mov.w     [w14], w0
    1b7a:	80 00 eb    	clr.w     w1
    1b7c:	51 10 98    	mov.w     w1, [w0+42]
    self->RXbuffer.data = NULL;
    1b7e:	1e 00 78    	mov.w     [w14], w0
    1b80:	80 00 eb    	clr.w     w1
    1b82:	61 10 98    	mov.w     w1, [w0+44]
    self->RXbuffer.length = 0;
    1b84:	1e 00 78    	mov.w     [w14], w0
    1b86:	80 00 eb    	clr.w     w1
    1b88:	71 10 98    	mov.w     w1, [w0+46]
    self->RXbuffer.head = 0;
    1b8a:	1e 00 78    	mov.w     [w14], w0
    1b8c:	80 00 eb    	clr.w     w1
    1b8e:	01 18 98    	mov.w     w1, [w0+48]
    self->RXbuffer.tail = 0;
    1b90:	1e 00 78    	mov.w     [w14], w0
    1b92:	80 00 eb    	clr.w     w1
    1b94:	11 18 98    	mov.w     w1, [w0+50]
    self->RXbuffer.count = 0;
    1b96:	1e 00 78    	mov.w     [w14], w0
    1b98:	80 00 eb    	clr.w     w1
    1b9a:	21 18 98    	mov.w     w1, [w0+52]
    self->TXthreshold = 1;
    1b9c:	1e 00 78    	mov.w     [w14], w0
    1b9e:	11 00 20    	mov.w     #0x1, w1
    1ba0:	31 18 98    	mov.w     w1, [w0+54]
    self->putc = NULL;
    1ba2:	1e 00 78    	mov.w     [w14], w0
    1ba4:	80 00 eb    	clr.w     w1
    1ba6:	41 18 98    	mov.w     w1, [w0+56]
    self->getc = NULL;
    1ba8:	1e 00 78    	mov.w     [w14], w0
    1baa:	80 00 eb    	clr.w     w1
    1bac:	51 18 98    	mov.w     w1, [w0+58]
}
    1bae:	00 80 fa    	ulnk      
    1bb0:	00 00 06    	return    

00001bb2 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1bb2:	10 00 fa    	lnk       #0x10
    1bb4:	88 1f 78    	mov.w     w8, [w15++]
    1bb6:	00 0f 78    	mov.w     w0, [w14]
    1bb8:	11 07 98    	mov.w     w1, [w14+2]
    1bba:	22 07 98    	mov.w     w2, [w14+4]
    1bbc:	33 07 98    	mov.w     w3, [w14+6]
    1bbe:	44 07 98    	mov.w     w4, [w14+8]
    1bc0:	56 07 98    	mov.w     w6, [w14+10]
    1bc2:	67 07 98    	mov.w     w7, [w14+12]
    1bc4:	65 4f 98    	mov.b     w5, [w14+14]
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1bc6:	1e 00 78    	mov.w     [w14], w0
    1bc8:	10 00 78    	mov.w     [w0], w0
    1bca:	80 00 eb    	clr.w     w1
    1bcc:	01 08 78    	mov.w     w1, [w0]
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1bce:	1e 00 90    	mov.w     [w14+2], w0
    1bd0:	60 00 90    	mov.w     [w0+12], w0
    1bd2:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1bd4:	0c 02 32    	bra       Z, 0x1fee <.L73>
    1bd6:	2e 00 90    	mov.w     [w14+4], w0
    1bd8:	60 00 90    	mov.w     [w0+12], w0
    1bda:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1bdc:	0a 02 32    	bra       Z, 0x1ff2 <.L74>
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1bde:	1e 00 90    	mov.w     [w14+2], w0
    1be0:	00 08 90    	mov.w     [w0+16], w0
    1be2:	00 00 e0    	cp0.w     w0
    1be4:	69 00 3a    	bra       NZ, 0x1cb8 <.L44>
    1be6:	2e 00 90    	mov.w     [w14+4], w0
    1be8:	00 08 90    	mov.w     [w0+16], w0
    1bea:	00 00 e0    	cp0.w     w0
    1bec:	65 00 3a    	bra       NZ, 0x1cb8 <.L44>
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1bee:	1e 00 90    	mov.w     [w14+2], w0
    1bf0:	06 08 07    	rcall     0x2bfe <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_set(TX);
    1bf2:	1e 00 90    	mov.w     [w14+2], w0
    1bf4:	61 08 07    	rcall     0x2cb8 <_pin_set> <L0> <.LFB8> <.LFE7>
        pin_digitalIn(RX);
    1bf6:	2e 00 90    	mov.w     [w14+4], w0
    1bf8:	db 07 07    	rcall     0x2bb0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
        self->TX = TX;
    1bfa:	1e 00 78    	mov.w     [w14], w0
    1bfc:	9e 00 90    	mov.w     [w14+2], w1
    1bfe:	51 08 98    	mov.w     w1, [w0+26]
        TX->owner = (void *)self;
    1c00:	1e 00 90    	mov.w     [w14+2], w0
    1c02:	9e 00 78    	mov.w     [w14], w1
    1c04:	01 08 98    	mov.w     w1, [w0+16]
        TX->write = NULL;
    1c06:	1e 00 90    	mov.w     [w14+2], w0
    1c08:	80 00 eb    	clr.w     w1
    1c0a:	11 08 98    	mov.w     w1, [w0+18]
        TX->read = NULL;
    1c0c:	1e 00 90    	mov.w     [w14+2], w0
    1c0e:	80 00 eb    	clr.w     w1
    1c10:	21 08 98    	mov.w     w1, [w0+20]
        self->RX = RX;
    1c12:	1e 00 78    	mov.w     [w14], w0
    1c14:	ae 00 90    	mov.w     [w14+4], w1
    1c16:	61 08 98    	mov.w     w1, [w0+28]
        RX->owner = (void *)self;
    1c18:	2e 00 90    	mov.w     [w14+4], w0
    1c1a:	9e 00 78    	mov.w     [w14], w1
    1c1c:	01 08 98    	mov.w     w1, [w0+16]
        RX->write = NULL;
    1c1e:	2e 00 90    	mov.w     [w14+4], w0
    1c20:	80 00 eb    	clr.w     w1
    1c22:	11 08 98    	mov.w     w1, [w0+18]
        RX->read = NULL;
    1c24:	2e 00 90    	mov.w     [w14+4], w0
    1c26:	80 00 eb    	clr.w     w1
    1c28:	21 08 98    	mov.w     w1, [w0+20]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1c2a:	11 3a 80    	mov.w     0x742, w1
    1c2c:	f0 0b 20    	mov.w     #0xbf, w0
    1c2e:	00 81 60    	and.w     w1, w0, w2
    1c30:	60 04 20    	mov.w     #0x46, w0
    1c32:	71 05 20    	mov.w     #0x57, w1
    1c34:	23 74 20    	mov.w     #0x742, w3
    1c36:	80 49 78    	mov.b     w0, [w3]
    1c38:	81 49 78    	mov.b     w1, [w3]
    1c3a:	82 49 78    	mov.b     w2, [w3]
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1c3c:	1e 00 90    	mov.w     [w14+2], w0
    1c3e:	70 00 90    	mov.w     [w0+14], w0
    1c40:	9e 00 90    	mov.w     [w14+2], w1
    1c42:	f1 00 90    	mov.w     [w1+14], w1
    1c44:	11 01 78    	mov.w     [w1], w2
    1c46:	9e 00 90    	mov.w     [w14+2], w1
    1c48:	a1 48 90    	mov.b     [w1+10], w1
    1c4a:	81 80 fb    	ze        w1, w1
    1c4c:	f3 03 20    	mov.w     #0x3f, w3
    1c4e:	81 18 dd    	sl.w      w3, w1, w1
    1c50:	81 80 ea    	com.w     w1, w1
    1c52:	81 00 61    	and.w     w2, w1, w1
    1c54:	01 08 78    	mov.w     w1, [w0]
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1c56:	1e 00 90    	mov.w     [w14+2], w0
    1c58:	70 00 90    	mov.w     [w0+14], w0
    1c5a:	9e 00 90    	mov.w     [w14+2], w1
    1c5c:	f1 00 90    	mov.w     [w1+14], w1
    1c5e:	11 01 78    	mov.w     [w1], w2
    1c60:	9e 00 78    	mov.w     [w14], w1
    1c62:	b1 09 90    	mov.w     [w1+22], w3
    1c64:	9e 00 90    	mov.w     [w14+2], w1
    1c66:	a1 48 90    	mov.b     [w1+10], w1
    1c68:	81 80 fb    	ze        w1, w1
    1c6a:	81 18 dd    	sl.w      w3, w1, w1
    1c6c:	82 80 70    	ior.w     w1, w2, w1
    1c6e:	01 08 78    	mov.w     w1, [w0]
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1c70:	1e 00 78    	mov.w     [w14], w0
    1c72:	00 08 90    	mov.w     [w0+16], w0
    1c74:	9e 00 78    	mov.w     [w14], w1
    1c76:	81 08 90    	mov.w     [w1+16], w1
    1c78:	11 01 78    	mov.w     [w1], w2
    1c7a:	9e 00 78    	mov.w     [w14], w1
    1c7c:	c1 50 90    	mov.b     [w1+20], w1
    1c7e:	81 80 fb    	ze        w1, w1
    1c80:	f3 03 20    	mov.w     #0x3f, w3
    1c82:	81 18 dd    	sl.w      w3, w1, w1
    1c84:	81 80 ea    	com.w     w1, w1
    1c86:	81 00 61    	and.w     w2, w1, w1
    1c88:	01 08 78    	mov.w     w1, [w0]
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1c8a:	1e 00 78    	mov.w     [w14], w0
    1c8c:	00 08 90    	mov.w     [w0+16], w0
    1c8e:	9e 00 78    	mov.w     [w14], w1
    1c90:	81 08 90    	mov.w     [w1+16], w1
    1c92:	11 01 78    	mov.w     [w1], w2
    1c94:	ae 00 90    	mov.w     [w14+4], w1
    1c96:	e1 01 90    	mov.w     [w1+12], w3
    1c98:	9e 00 78    	mov.w     [w14], w1
    1c9a:	c1 50 90    	mov.b     [w1+20], w1
    1c9c:	81 80 fb    	ze        w1, w1
    1c9e:	81 18 dd    	sl.w      w3, w1, w1
    1ca0:	82 80 70    	ior.w     w1, w2, w1
    1ca2:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    1ca4:	10 3a 80    	mov.w     0x742, w0
    1ca6:	00 01 78    	mov.w     w0, w2
    1ca8:	02 60 a0    	bset.w    w2, #0x6
    1caa:	60 04 20    	mov.w     #0x46, w0
    1cac:	71 05 20    	mov.w     #0x57, w1
    1cae:	23 74 20    	mov.w     #0x742, w3
    1cb0:	80 49 78    	mov.b     w0, [w3]
    1cb2:	81 49 78    	mov.b     w1, [w3]
    1cb4:	82 49 78    	mov.b     w2, [w3]
    1cb6:	0a 00 37    	bra       0x1ccc <.L45>

00001cb8 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1cb8:	1e 00 78    	mov.w     [w14], w0
    1cba:	d0 08 90    	mov.w     [w0+26], w1
    1cbc:	1e 00 90    	mov.w     [w14+2], w0
    1cbe:	80 8f 50    	sub.w     w1, w0, [w15]
    1cc0:	9a 01 3a    	bra       NZ, 0x1ff6 <.L75>
    1cc2:	1e 00 78    	mov.w     [w14], w0
    1cc4:	e0 08 90    	mov.w     [w0+28], w1
    1cc6:	2e 00 90    	mov.w     [w14+4], w0
    1cc8:	80 8f 50    	sub.w     w1, w0, [w15]
    1cca:	97 01 3a    	bra       NZ, 0x1ffa <.L76>

00001ccc <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1ccc:	3e 00 90    	mov.w     [w14+6], w0
    1cce:	00 00 e0    	cp0.w     w0
    1cd0:	87 00 32    	bra       Z, 0x1de0 <.L47>
    1cd2:	4e 00 90    	mov.w     [w14+8], w0
    1cd4:	00 00 e0    	cp0.w     w0
    1cd6:	84 00 32    	bra       Z, 0x1de0 <.L47>
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1cd8:	3e 00 90    	mov.w     [w14+6], w0
    1cda:	60 00 90    	mov.w     [w0+12], w0
    1cdc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1cde:	8f 01 32    	bra       Z, 0x1ffe <.L77>
    1ce0:	4e 00 90    	mov.w     [w14+8], w0
    1ce2:	60 00 90    	mov.w     [w0+12], w0
    1ce4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1ce6:	8d 01 32    	bra       Z, 0x2002 <.L78>
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1ce8:	3e 00 90    	mov.w     [w14+6], w0
    1cea:	00 08 90    	mov.w     [w0+16], w0
    1cec:	00 00 e0    	cp0.w     w0
    1cee:	69 00 3a    	bra       NZ, 0x1dc2 <.L50>
    1cf0:	4e 00 90    	mov.w     [w14+8], w0
    1cf2:	00 08 90    	mov.w     [w0+16], w0
    1cf4:	00 00 e0    	cp0.w     w0
    1cf6:	65 00 3a    	bra       NZ, 0x1dc2 <.L50>
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1cf8:	3e 00 90    	mov.w     [w14+6], w0
    1cfa:	81 07 07    	rcall     0x2bfe <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
            pin_set(RTS);
    1cfc:	3e 00 90    	mov.w     [w14+6], w0
    1cfe:	dc 07 07    	rcall     0x2cb8 <_pin_set> <L0> <.LFB8> <.LFE7>
            pin_digitalIn(CTS);
    1d00:	4e 00 90    	mov.w     [w14+8], w0
    1d02:	56 07 07    	rcall     0x2bb0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
            self->RTS = RTS;
    1d04:	1e 00 78    	mov.w     [w14], w0
    1d06:	be 00 90    	mov.w     [w14+6], w1
    1d08:	71 08 98    	mov.w     w1, [w0+30]
            RTS->owner = (void *)self;
    1d0a:	3e 00 90    	mov.w     [w14+6], w0
    1d0c:	9e 00 78    	mov.w     [w14], w1
    1d0e:	01 08 98    	mov.w     w1, [w0+16]
            RTS->write = NULL;
    1d10:	3e 00 90    	mov.w     [w14+6], w0
    1d12:	80 00 eb    	clr.w     w1
    1d14:	11 08 98    	mov.w     w1, [w0+18]
            RTS->read = NULL;
    1d16:	3e 00 90    	mov.w     [w14+6], w0
    1d18:	80 00 eb    	clr.w     w1
    1d1a:	21 08 98    	mov.w     w1, [w0+20]
            self->CTS = CTS;
    1d1c:	1e 00 78    	mov.w     [w14], w0
    1d1e:	ce 00 90    	mov.w     [w14+8], w1
    1d20:	01 10 98    	mov.w     w1, [w0+32]
            CTS->owner = (void *)self;
    1d22:	4e 00 90    	mov.w     [w14+8], w0
    1d24:	9e 00 78    	mov.w     [w14], w1
    1d26:	01 08 98    	mov.w     w1, [w0+16]
            CTS->write = NULL;
    1d28:	4e 00 90    	mov.w     [w14+8], w0
    1d2a:	80 00 eb    	clr.w     w1
    1d2c:	11 08 98    	mov.w     w1, [w0+18]
            CTS->read = NULL;
    1d2e:	4e 00 90    	mov.w     [w14+8], w0
    1d30:	80 00 eb    	clr.w     w1
    1d32:	21 08 98    	mov.w     w1, [w0+20]
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1d34:	11 3a 80    	mov.w     0x742, w1
    1d36:	f0 0b 20    	mov.w     #0xbf, w0
    1d38:	00 81 60    	and.w     w1, w0, w2
    1d3a:	60 04 20    	mov.w     #0x46, w0
    1d3c:	71 05 20    	mov.w     #0x57, w1
    1d3e:	23 74 20    	mov.w     #0x742, w3
    1d40:	80 49 78    	mov.b     w0, [w3]
    1d42:	81 49 78    	mov.b     w1, [w3]
    1d44:	82 49 78    	mov.b     w2, [w3]
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1d46:	3e 00 90    	mov.w     [w14+6], w0
    1d48:	70 00 90    	mov.w     [w0+14], w0
    1d4a:	be 00 90    	mov.w     [w14+6], w1
    1d4c:	f1 00 90    	mov.w     [w1+14], w1
    1d4e:	11 01 78    	mov.w     [w1], w2
    1d50:	be 00 90    	mov.w     [w14+6], w1
    1d52:	a1 48 90    	mov.b     [w1+10], w1
    1d54:	81 80 fb    	ze        w1, w1
    1d56:	f3 03 20    	mov.w     #0x3f, w3
    1d58:	81 18 dd    	sl.w      w3, w1, w1
    1d5a:	81 80 ea    	com.w     w1, w1
    1d5c:	81 00 61    	and.w     w2, w1, w1
    1d5e:	01 08 78    	mov.w     w1, [w0]
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1d60:	3e 00 90    	mov.w     [w14+6], w0
    1d62:	70 00 90    	mov.w     [w0+14], w0
    1d64:	be 00 90    	mov.w     [w14+6], w1
    1d66:	f1 00 90    	mov.w     [w1+14], w1
    1d68:	11 01 78    	mov.w     [w1], w2
    1d6a:	9e 00 78    	mov.w     [w14], w1
    1d6c:	c1 09 90    	mov.w     [w1+24], w3
    1d6e:	be 00 90    	mov.w     [w14+6], w1
    1d70:	a1 48 90    	mov.b     [w1+10], w1
    1d72:	81 80 fb    	ze        w1, w1
    1d74:	81 18 dd    	sl.w      w3, w1, w1
    1d76:	82 80 70    	ior.w     w1, w2, w1
    1d78:	01 08 78    	mov.w     w1, [w0]
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1d7a:	1e 00 78    	mov.w     [w14], w0
    1d7c:	10 08 90    	mov.w     [w0+18], w0
    1d7e:	9e 00 78    	mov.w     [w14], w1
    1d80:	91 08 90    	mov.w     [w1+18], w1
    1d82:	11 01 78    	mov.w     [w1], w2
    1d84:	9e 00 78    	mov.w     [w14], w1
    1d86:	d1 50 90    	mov.b     [w1+21], w1
    1d88:	81 80 fb    	ze        w1, w1
    1d8a:	f3 03 20    	mov.w     #0x3f, w3
    1d8c:	81 18 dd    	sl.w      w3, w1, w1
    1d8e:	81 80 ea    	com.w     w1, w1
    1d90:	81 00 61    	and.w     w2, w1, w1
    1d92:	01 08 78    	mov.w     w1, [w0]

00001d94 <.L0>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1d94:	1e 00 78    	mov.w     [w14], w0
    1d96:	10 08 90    	mov.w     [w0+18], w0
    1d98:	9e 00 78    	mov.w     [w14], w1
    1d9a:	91 08 90    	mov.w     [w1+18], w1
    1d9c:	11 01 78    	mov.w     [w1], w2
    1d9e:	ce 00 90    	mov.w     [w14+8], w1
    1da0:	e1 01 90    	mov.w     [w1+12], w3
    1da2:	9e 00 78    	mov.w     [w14], w1
    1da4:	d1 50 90    	mov.b     [w1+21], w1
    1da6:	81 80 fb    	ze        w1, w1
    1da8:	81 18 dd    	sl.w      w3, w1, w1
    1daa:	82 80 70    	ior.w     w1, w2, w1
    1dac:	01 08 78    	mov.w     w1, [w0]

00001dae <.L0>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1dae:	10 3a 80    	mov.w     0x742, w0
    1db0:	00 01 78    	mov.w     w0, w2
    1db2:	02 60 a0    	bset.w    w2, #0x6
    1db4:	60 04 20    	mov.w     #0x46, w0
    1db6:	71 05 20    	mov.w     #0x57, w1
    1db8:	23 74 20    	mov.w     #0x742, w3
    1dba:	80 49 78    	mov.b     w0, [w3]
    1dbc:	81 49 78    	mov.b     w1, [w3]
    1dbe:	82 49 78    	mov.b     w2, [w3]
    1dc0:	0a 00 37    	bra       0x1dd6 <.L51>

00001dc2 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1dc2:	1e 00 78    	mov.w     [w14], w0
    1dc4:	f0 08 90    	mov.w     [w0+30], w1
    1dc6:	3e 00 90    	mov.w     [w14+6], w0
    1dc8:	80 8f 50    	sub.w     w1, w0, [w15]
    1dca:	1d 01 3a    	bra       NZ, 0x2006 <.L79>
    1dcc:	1e 00 78    	mov.w     [w14], w0
    1dce:	80 10 90    	mov.w     [w0+32], w1
    1dd0:	4e 00 90    	mov.w     [w14+8], w0
    1dd2:	80 8f 50    	sub.w     w1, w0, [w15]
    1dd4:	1a 01 3a    	bra       NZ, 0x200a <.L80>

00001dd6 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1dd6:	1e 00 78    	mov.w     [w14], w0
    1dd8:	10 00 78    	mov.w     [w0], w0
    1dda:	01 20 20    	mov.w     #0x200, w1
    1ddc:	01 08 78    	mov.w     w1, [w0]
    1dde:	06 00 37    	bra       0x1dec <.L53>

00001de0 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1de0:	3e 00 90    	mov.w     [w14+6], w0
    1de2:	00 00 e0    	cp0.w     w0
    1de4:	14 01 3a    	bra       NZ, 0x200e <.L81>
    1de6:	4e 00 90    	mov.w     [w14+8], w0
    1de8:	00 00 e0    	cp0.w     w0
    1dea:	13 01 3a    	bra       NZ, 0x2012 <.L82>

00001dec <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1dec:	18 c0 b3    	mov.b     #0x1, w8
    1dee:	02 40 22    	mov.w     #0x2400, w2
    1df0:	43 a7 24    	mov.w     #0x4a74, w3
    1df2:	5e 00 90    	mov.w     [w14+10], w0
    1df4:	ee 00 90    	mov.w     [w14+12], w1
    1df6:	bf fa 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    1df8:	00 00 e0    	cp0.w     w0
    1dfa:	01 00 3c    	bra       GT, 0x1dfe <.L55>
    1dfc:	00 44 eb    	clr.b     w8

00001dfe <.L55>:
    1dfe:	08 04 e0    	cp0.b     w8
    1e00:	04 00 32    	bra       Z, 0x1e0a <.L56>
        baudrate = FCY/4.;
    1e02:	00 40 22    	mov.w     #0x2400, w0
    1e04:	41 a7 24    	mov.w     #0x4a74, w1
    1e06:	50 07 98    	mov.w     w0, [w14+10]
    1e08:	61 07 98    	mov.w     w1, [w14+12]

00001e0a <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1e0a:	18 c0 b3    	mov.b     #0x1, w8
    1e0c:	02 40 22    	mov.w     #0x2400, w2
    1e0e:	43 17 24    	mov.w     #0x4174, w3
    1e10:	5e 00 90    	mov.w     [w14+10], w0
    1e12:	ee 00 90    	mov.w     [w14+12], w1
    1e14:	ae fa 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    1e16:	00 00 e0    	cp0.w     w0
    1e18:	01 00 35    	bra       LT, 0x1e1c <.L57>
    1e1a:	00 44 eb    	clr.b     w8

00001e1c <.L57>:
    1e1c:	08 04 e0    	cp0.b     w8
    1e1e:	04 00 32    	bra       Z, 0x1e28 <.L58>
        baudrate = FCY/(16.*65536.);
    1e20:	00 40 22    	mov.w     #0x2400, w0
    1e22:	41 17 24    	mov.w     #0x4174, w1
    1e24:	50 07 98    	mov.w     w0, [w14+10]
    1e26:	61 07 98    	mov.w     w1, [w14+12]

00001e28 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1e28:	18 c0 b3    	mov.b     #0x1, w8
    1e2a:	02 40 22    	mov.w     #0x2400, w2
    1e2c:	43 27 24    	mov.w     #0x4274, w3
    1e2e:	5e 00 90    	mov.w     [w14+10], w0
    1e30:	ee 00 90    	mov.w     [w14+12], w1
    1e32:	9f fa 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    1e34:	00 00 e0    	cp0.w     w0
    1e36:	01 00 34    	bra       LE, 0x1e3a <.L59>
    1e38:	00 44 eb    	clr.b     w8

00001e3a <.L59>:
    1e3a:	08 04 e0    	cp0.b     w8
    1e3c:	0f 00 32    	bra       Z, 0x1e5c <.L60>
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1e3e:	1e 00 78    	mov.w     [w14], w0
    1e40:	40 04 90    	mov.w     [w0+8], w8
    1e42:	5e 01 90    	mov.w     [w14+10], w2
    1e44:	ee 01 90    	mov.w     [w14+12], w3
    1e46:	00 40 22    	mov.w     #0x2400, w0
    1e48:	41 97 24    	mov.w     #0x4974, w1
    1e4a:	51 fa 07    	rcall     0x12ee <___divsf3>
    1e4c:	02 00 20    	mov.w     #0x0, w2
    1e4e:	03 f0 23    	mov.w     #0x3f00, w3
    1e50:	f1 f9 07    	rcall     0x1234 <___addsf3>
    1e52:	93 fa 07    	rcall     0x137a <___fixunssfsi>
    1e54:	00 00 78    	mov.w     w0, w0
    1e56:	00 00 e9    	dec.w     w0, w0
    1e58:	00 0c 78    	mov.w     w0, [w8]
    1e5a:	15 00 37    	bra       0x1e86 <.L61>

00001e5c <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1e5c:	1e 00 78    	mov.w     [w14], w0
    1e5e:	10 00 78    	mov.w     [w0], w0
    1e60:	9e 00 78    	mov.w     [w14], w1
    1e62:	91 00 78    	mov.w     [w1], w1
    1e64:	91 00 78    	mov.w     [w1], w1
    1e66:	01 30 a0    	bset.w    w1, #0x3
    1e68:	01 08 78    	mov.w     w1, [w0]
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1e6a:	1e 00 78    	mov.w     [w14], w0
    1e6c:	40 04 90    	mov.w     [w0+8], w8
    1e6e:	5e 01 90    	mov.w     [w14+10], w2
    1e70:	ee 01 90    	mov.w     [w14+12], w3
    1e72:	00 40 22    	mov.w     #0x2400, w0
    1e74:	41 a7 24    	mov.w     #0x4a74, w1
    1e76:	3b fa 07    	rcall     0x12ee <___divsf3>
    1e78:	02 00 20    	mov.w     #0x0, w2
    1e7a:	03 f0 23    	mov.w     #0x3f00, w3
    1e7c:	db f9 07    	rcall     0x1234 <___addsf3>
    1e7e:	7d fa 07    	rcall     0x137a <___fixunssfsi>
    1e80:	00 00 78    	mov.w     w0, w0
    1e82:	00 00 e9    	dec.w     w0, w0
    1e84:	00 0c 78    	mov.w     w0, [w8]

00001e86 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1e86:	ee 48 90    	mov.b     [w14+14], w1
    1e88:	50 c4 b3    	mov.b     #0x45, w0
    1e8a:	80 cf 50    	sub.b     w1, w0, [w15]
    1e8c:	04 00 32    	bra       Z, 0x1e96 <.L62>
    1e8e:	ee 48 90    	mov.b     [w14+14], w1
    1e90:	50 c6 b3    	mov.b     #0x65, w0
    1e92:	80 cf 50    	sub.b     w1, w0, [w15]
    1e94:	08 00 3a    	bra       NZ, 0x1ea6 <.L63>

00001e96 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1e96:	1e 00 78    	mov.w     [w14], w0
    1e98:	10 00 78    	mov.w     [w0], w0
    1e9a:	9e 00 78    	mov.w     [w14], w1
    1e9c:	91 00 78    	mov.w     [w1], w1
    1e9e:	91 00 78    	mov.w     [w1], w1
    1ea0:	01 10 a0    	bset.w    w1, #0x1
    1ea2:	01 08 78    	mov.w     w1, [w0]
    1ea4:	18 00 37    	bra       0x1ed6 <.L64>

00001ea6 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1ea6:	ee 48 90    	mov.b     [w14+14], w1
    1ea8:	f0 c4 b3    	mov.b     #0x4f, w0
    1eaa:	80 cf 50    	sub.b     w1, w0, [w15]
    1eac:	04 00 32    	bra       Z, 0x1eb6 <.L65>
    1eae:	ee 48 90    	mov.b     [w14+14], w1
    1eb0:	f0 c6 b3    	mov.b     #0x6f, w0
    1eb2:	80 cf 50    	sub.b     w1, w0, [w15]
    1eb4:	08 00 3a    	bra       NZ, 0x1ec6 <.L66>

00001eb6 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1eb6:	1e 00 78    	mov.w     [w14], w0
    1eb8:	10 00 78    	mov.w     [w0], w0
    1eba:	9e 00 78    	mov.w     [w14], w1
    1ebc:	91 00 78    	mov.w     [w1], w1
    1ebe:	91 00 78    	mov.w     [w1], w1
    1ec0:	01 20 a0    	bset.w    w1, #0x2
    1ec2:	01 08 78    	mov.w     w1, [w0]
    1ec4:	08 00 37    	bra       0x1ed6 <.L64>

00001ec6 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1ec6:	ee 48 90    	mov.b     [w14+14], w1
    1ec8:	e0 c4 b3    	mov.b     #0x4e, w0
    1eca:	80 cf 50    	sub.b     w1, w0, [w15]
    1ecc:	04 00 32    	bra       Z, 0x1ed6 <.L64>
    1ece:	ee 48 90    	mov.b     [w14+14], w1
    1ed0:	e0 c6 b3    	mov.b     #0x6e, w0
    1ed2:	80 cf 50    	sub.b     w1, w0, [w15]
    1ed4:	a0 00 3a    	bra       NZ, 0x2016 <.L83>

00001ed6 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1ed6:	4e b8 97    	mov.w     [w14-8], w0
    1ed8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1eda:	08 00 3a    	bra       NZ, 0x1eec <.L67>
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1edc:	1e 00 78    	mov.w     [w14], w0
    1ede:	10 00 78    	mov.w     [w0], w0
    1ee0:	9e 00 78    	mov.w     [w14], w1
    1ee2:	91 00 78    	mov.w     [w1], w1
    1ee4:	91 00 78    	mov.w     [w1], w1
    1ee6:	01 00 a0    	bset.w    w1, #0x0
    1ee8:	01 08 78    	mov.w     w1, [w0]
    1eea:	03 00 37    	bra       0x1ef2 <.L68>

00001eec <.L67>:
    } else if (stopbits!=1) {
    1eec:	4e b8 97    	mov.w     [w14-8], w0
    1eee:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1ef0:	94 00 3a    	bra       NZ, 0x201a <.L84>

00001ef2 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1ef2:	2e b8 97    	mov.w     [w14-12], w0
    1ef4:	00 00 e0    	cp0.w     w0
    1ef6:	04 00 3a    	bra       NZ, 0x1f00 <.L69>
        self->putc = __putc_nobuffer;
    1ef8:	1e 00 78    	mov.w     [w14], w0
    1efa:	c1 5d 21    	mov.w     #0x15dc, w1
    1efc:	41 18 98    	mov.w     w1, [w0+56]
    1efe:	35 00 37    	bra       0x1f6a <.L70>

00001f00 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1f00:	1e 00 78    	mov.w     [w14], w0
    1f02:	10 00 90    	mov.w     [w0+2], w0
    1f04:	9e 00 78    	mov.w     [w14], w1
    1f06:	91 00 90    	mov.w     [w1+2], w1
    1f08:	91 00 78    	mov.w     [w1], w1
    1f0a:	01 d0 a0    	bset.w    w1, #0xd
    1f0c:	01 08 78    	mov.w     w1, [w0]
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1f0e:	1e 00 78    	mov.w     [w14], w0
    1f10:	ae b8 97    	mov.w     [w14-12], w1
    1f12:	11 10 98    	mov.w     w1, [w0+34]
        self->TXbuffer.length = TXbufferlen;
    1f14:	1e 00 78    	mov.w     [w14], w0
    1f16:	9e b8 97    	mov.w     [w14-14], w1
    1f18:	21 10 98    	mov.w     w1, [w0+36]
        self->TXbuffer.head = 0;
    1f1a:	1e 00 78    	mov.w     [w14], w0
    1f1c:	80 00 eb    	clr.w     w1
    1f1e:	31 10 98    	mov.w     w1, [w0+38]
        self->TXbuffer.tail = 0;
    1f20:	1e 00 78    	mov.w     [w14], w0
    1f22:	80 00 eb    	clr.w     w1
    1f24:	41 10 98    	mov.w     w1, [w0+40]
        self->TXbuffer.count = 0;
    1f26:	1e 00 78    	mov.w     [w14], w0
    1f28:	80 00 eb    	clr.w     w1
    1f2a:	51 10 98    	mov.w     w1, [w0+42]
        self->TXthreshold = TXthreshold;
    1f2c:	1e 00 78    	mov.w     [w14], w0
    1f2e:	be b8 97    	mov.w     [w14-10], w1
    1f30:	31 18 98    	mov.w     w1, [w0+54]
        self->putc = __putc_buffer;
    1f32:	1e 00 78    	mov.w     [w14], w0
    1f34:	e1 61 21    	mov.w     #0x161e, w1
    1f36:	41 18 98    	mov.w     w1, [w0+56]
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1f38:	1e 00 78    	mov.w     [w14], w0
    1f3a:	50 00 90    	mov.w     [w0+10], w0
    1f3c:	9e 00 78    	mov.w     [w14], w1
    1f3e:	d1 00 90    	mov.w     [w1+10], w1
    1f40:	11 01 78    	mov.w     [w1], w2
    1f42:	9e 00 78    	mov.w     [w14], w1
    1f44:	e1 48 90    	mov.b     [w1+14], w1
    1f46:	81 80 fb    	ze        w1, w1
    1f48:	13 00 20    	mov.w     #0x1, w3
    1f4a:	81 18 dd    	sl.w      w3, w1, w1
    1f4c:	81 80 ea    	com.w     w1, w1
    1f4e:	81 00 61    	and.w     w2, w1, w1
    1f50:	01 08 78    	mov.w     w1, [w0]
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1f52:	1e 00 78    	mov.w     [w14], w0
    1f54:	60 00 90    	mov.w     [w0+12], w0
    1f56:	9e 00 78    	mov.w     [w14], w1
    1f58:	e1 00 90    	mov.w     [w1+12], w1
    1f5a:	11 01 78    	mov.w     [w1], w2
    1f5c:	9e 00 78    	mov.w     [w14], w1
    1f5e:	e1 48 90    	mov.b     [w1+14], w1
    1f60:	81 80 fb    	ze        w1, w1
    1f62:	13 00 20    	mov.w     #0x1, w3
    1f64:	81 18 dd    	sl.w      w3, w1, w1
    1f66:	82 80 70    	ior.w     w1, w2, w1
    1f68:	01 08 78    	mov.w     w1, [w0]

00001f6a <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1f6a:	0e b8 97    	mov.w     [w14-16], w0
    1f6c:	00 00 e0    	cp0.w     w0
    1f6e:	04 00 3a    	bra       NZ, 0x1f78 <.L71>
        self->getc = __getc_nobuffer;
    1f70:	1e 00 78    	mov.w     [w14], w0
    1f72:	01 60 21    	mov.w     #0x1600, w1
    1f74:	51 18 98    	mov.w     w1, [w0+58]
    1f76:	2b 00 37    	bra       0x1fce <.L72>

00001f78 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1f78:	1e 00 78    	mov.w     [w14], w0
    1f7a:	8e b8 97    	mov.w     [w14-16], w1
    1f7c:	61 10 98    	mov.w     w1, [w0+44]
        self->RXbuffer.length = RXbufferlen;
    1f7e:	1e 00 78    	mov.w     [w14], w0
    1f80:	fe b0 97    	mov.w     [w14-18], w1
    1f82:	71 10 98    	mov.w     w1, [w0+46]
        self->RXbuffer.head = 0;
    1f84:	1e 00 78    	mov.w     [w14], w0
    1f86:	80 00 eb    	clr.w     w1
    1f88:	01 18 98    	mov.w     w1, [w0+48]
        self->RXbuffer.tail = 0;
    1f8a:	1e 00 78    	mov.w     [w14], w0
    1f8c:	80 00 eb    	clr.w     w1
    1f8e:	11 18 98    	mov.w     w1, [w0+50]
        self->RXbuffer.count = 0;
    1f90:	1e 00 78    	mov.w     [w14], w0
    1f92:	80 00 eb    	clr.w     w1
    1f94:	21 18 98    	mov.w     w1, [w0+52]
        self->getc = __getc_buffer;
    1f96:	1e 00 78    	mov.w     [w14], w0
    1f98:	21 71 21    	mov.w     #0x1712, w1
    1f9a:	51 18 98    	mov.w     w1, [w0+58]
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1f9c:	1e 00 78    	mov.w     [w14], w0
    1f9e:	50 00 90    	mov.w     [w0+10], w0
    1fa0:	9e 00 78    	mov.w     [w14], w1
    1fa2:	d1 00 90    	mov.w     [w1+10], w1
    1fa4:	11 01 78    	mov.w     [w1], w2
    1fa6:	9e 00 78    	mov.w     [w14], w1
    1fa8:	f1 48 90    	mov.b     [w1+15], w1
    1faa:	81 80 fb    	ze        w1, w1
    1fac:	13 00 20    	mov.w     #0x1, w3
    1fae:	81 18 dd    	sl.w      w3, w1, w1
    1fb0:	81 80 ea    	com.w     w1, w1
    1fb2:	81 00 61    	and.w     w2, w1, w1
    1fb4:	01 08 78    	mov.w     w1, [w0]
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1fb6:	1e 00 78    	mov.w     [w14], w0
    1fb8:	60 00 90    	mov.w     [w0+12], w0
    1fba:	9e 00 78    	mov.w     [w14], w1
    1fbc:	e1 00 90    	mov.w     [w1+12], w1
    1fbe:	11 01 78    	mov.w     [w1], w2
    1fc0:	9e 00 78    	mov.w     [w14], w1
    1fc2:	f1 48 90    	mov.b     [w1+15], w1
    1fc4:	81 80 fb    	ze        w1, w1
    1fc6:	13 00 20    	mov.w     #0x1, w3
    1fc8:	81 18 dd    	sl.w      w3, w1, w1
    1fca:	82 80 70    	ior.w     w1, w2, w1
    1fcc:	01 08 78    	mov.w     w1, [w0]

00001fce <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    1fce:	1e 00 78    	mov.w     [w14], w0
    1fd0:	10 00 78    	mov.w     [w0], w0
    1fd2:	9e 00 78    	mov.w     [w14], w1
    1fd4:	91 00 78    	mov.w     [w1], w1
    1fd6:	11 01 78    	mov.w     [w1], w2
    1fd8:	01 00 28    	mov.w     #0x8000, w1
    1fda:	82 80 70    	ior.w     w1, w2, w1
    1fdc:	01 08 78    	mov.w     w1, [w0]
    bitset(self->UxSTA, 10);    // Enable data transmission
    1fde:	1e 00 78    	mov.w     [w14], w0
    1fe0:	10 00 90    	mov.w     [w0+2], w0
    1fe2:	9e 00 78    	mov.w     [w14], w1
    1fe4:	91 00 90    	mov.w     [w1+2], w1
    1fe6:	91 00 78    	mov.w     [w1], w1
    1fe8:	01 a0 a0    	bset.w    w1, #0xa
    1fea:	01 08 78    	mov.w     w1, [w0]
    1fec:	17 00 37    	bra       0x201c <.L40>

00001fee <.L73>:
    1fee:	00 00 00    	nop       
    1ff0:	15 00 37    	bra       0x201c <.L40>

00001ff2 <.L74>:
    1ff2:	00 00 00    	nop       
    1ff4:	13 00 37    	bra       0x201c <.L40>

00001ff6 <.L75>:
    1ff6:	00 00 00    	nop       
    1ff8:	11 00 37    	bra       0x201c <.L40>

00001ffa <.L76>:
    1ffa:	00 00 00    	nop       
    1ffc:	0f 00 37    	bra       0x201c <.L40>

00001ffe <.L77>:
    1ffe:	00 00 00    	nop       
    2000:	0d 00 37    	bra       0x201c <.L40>

00002002 <.L78>:
    2002:	00 00 00    	nop       
    2004:	0b 00 37    	bra       0x201c <.L40>

00002006 <.L79>:
    2006:	00 00 00    	nop       
    2008:	09 00 37    	bra       0x201c <.L40>

0000200a <.L80>:
    200a:	00 00 00    	nop       
    200c:	07 00 37    	bra       0x201c <.L40>

0000200e <.L81>:
    200e:	00 00 00    	nop       
    2010:	05 00 37    	bra       0x201c <.L40>

00002012 <.L82>:
    2012:	00 00 00    	nop       
    2014:	03 00 37    	bra       0x201c <.L40>

00002016 <.L83>:
    2016:	00 00 00    	nop       
    2018:	01 00 37    	bra       0x201c <.L40>

0000201a <.L84>:
    201a:	00 00 00    	nop       

0000201c <.L40>:
}
    201c:	4f 04 78    	mov.w     [--w15], w8
    201e:	00 80 fa    	ulnk      
    2020:	00 00 06    	return    

00002022 <_uart_close>:

void uart_close(_UART *self) {
    2022:	02 00 fa    	lnk       #0x2
    2024:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2026:	1e 00 78    	mov.w     [w14], w0
    2028:	10 00 90    	mov.w     [w0+2], w0
    202a:	9e 00 78    	mov.w     [w14], w1
    202c:	91 00 90    	mov.w     [w1+2], w1
    202e:	91 00 78    	mov.w     [w1], w1
    2030:	01 a0 a1    	bclr.w    w1, #0xa
    2032:	01 08 78    	mov.w     w1, [w0]
    *(self->UxMODE) = 0;        // Disable UART module
    2034:	1e 00 78    	mov.w     [w14], w0
    2036:	10 00 78    	mov.w     [w0], w0
    2038:	80 00 eb    	clr.w     w1
    203a:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    203c:	1e 00 78    	mov.w     [w14], w0
    203e:	60 00 90    	mov.w     [w0+12], w0
    2040:	9e 00 78    	mov.w     [w14], w1
    2042:	e1 00 90    	mov.w     [w1+12], w1
    2044:	11 01 78    	mov.w     [w1], w2
    2046:	9e 00 78    	mov.w     [w14], w1
    2048:	e1 48 90    	mov.b     [w1+14], w1
    204a:	81 80 fb    	ze        w1, w1
    204c:	13 00 20    	mov.w     #0x1, w3
    204e:	81 18 dd    	sl.w      w3, w1, w1
    2050:	81 80 ea    	com.w     w1, w1
    2052:	81 00 61    	and.w     w2, w1, w1
    2054:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2056:	1e 00 78    	mov.w     [w14], w0
    2058:	60 00 90    	mov.w     [w0+12], w0
    205a:	9e 00 78    	mov.w     [w14], w1
    205c:	e1 00 90    	mov.w     [w1+12], w1
    205e:	11 01 78    	mov.w     [w1], w2
    2060:	9e 00 78    	mov.w     [w14], w1
    2062:	f1 48 90    	mov.b     [w1+15], w1
    2064:	81 80 fb    	ze        w1, w1
    2066:	13 00 20    	mov.w     #0x1, w3
    2068:	81 18 dd    	sl.w      w3, w1, w1
    206a:	81 80 ea    	com.w     w1, w1
    206c:	81 00 61    	and.w     w2, w1, w1
    206e:	01 08 78    	mov.w     w1, [w0]
    self->putc = NULL;
    2070:	1e 00 78    	mov.w     [w14], w0
    2072:	80 00 eb    	clr.w     w1
    2074:	41 18 98    	mov.w     w1, [w0+56]
    self->getc = NULL;
    2076:	1e 00 78    	mov.w     [w14], w0
    2078:	80 00 eb    	clr.w     w1
    207a:	51 18 98    	mov.w     w1, [w0+58]
    if (self->TX) {
    207c:	1e 00 78    	mov.w     [w14], w0
    207e:	50 08 90    	mov.w     [w0+26], w0
    2080:	00 00 e0    	cp0.w     w0
    2082:	2f 00 32    	bra       Z, 0x20e2 <.L86>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2084:	11 3a 80    	mov.w     0x742, w1
    2086:	f0 0b 20    	mov.w     #0xbf, w0
    2088:	00 81 60    	and.w     w1, w0, w2
    208a:	60 04 20    	mov.w     #0x46, w0
    208c:	71 05 20    	mov.w     #0x57, w1
    208e:	23 74 20    	mov.w     #0x742, w3
    2090:	80 49 78    	mov.b     w0, [w3]
    2092:	81 49 78    	mov.b     w1, [w3]
    2094:	82 49 78    	mov.b     w2, [w3]
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2096:	1e 00 78    	mov.w     [w14], w0
    2098:	50 08 90    	mov.w     [w0+26], w0
    209a:	70 00 90    	mov.w     [w0+14], w0
    209c:	9e 00 78    	mov.w     [w14], w1
    209e:	d1 08 90    	mov.w     [w1+26], w1
    20a0:	f1 00 90    	mov.w     [w1+14], w1
    20a2:	11 01 78    	mov.w     [w1], w2
    20a4:	9e 00 78    	mov.w     [w14], w1
    20a6:	d1 08 90    	mov.w     [w1+26], w1
    20a8:	a1 48 90    	mov.b     [w1+10], w1
    20aa:	81 80 fb    	ze        w1, w1
    20ac:	f3 03 20    	mov.w     #0x3f, w3
    20ae:	81 18 dd    	sl.w      w3, w1, w1
    20b0:	81 80 ea    	com.w     w1, w1
    20b2:	81 00 61    	and.w     w2, w1, w1
    20b4:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    20b6:	10 3a 80    	mov.w     0x742, w0
    20b8:	00 01 78    	mov.w     w0, w2
    20ba:	02 60 a0    	bset.w    w2, #0x6
    20bc:	60 04 20    	mov.w     #0x46, w0
    20be:	71 05 20    	mov.w     #0x57, w1
    20c0:	23 74 20    	mov.w     #0x742, w3
    20c2:	80 49 78    	mov.b     w0, [w3]
    20c4:	81 49 78    	mov.b     w1, [w3]
    20c6:	82 49 78    	mov.b     w2, [w3]
        self->TX->owner = NULL;
    20c8:	1e 00 78    	mov.w     [w14], w0
    20ca:	50 08 90    	mov.w     [w0+26], w0
    20cc:	80 00 eb    	clr.w     w1
    20ce:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->TX);
    20d0:	1e 00 78    	mov.w     [w14], w0
    20d2:	50 08 90    	mov.w     [w0+26], w0
    20d4:	94 05 07    	rcall     0x2bfe <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_set(self->TX);
    20d6:	1e 00 78    	mov.w     [w14], w0
    20d8:	50 08 90    	mov.w     [w0+26], w0
    20da:	ee 05 07    	rcall     0x2cb8 <_pin_set> <L0> <.LFB8> <.LFE7>
        self->TX = NULL;
    20dc:	1e 00 78    	mov.w     [w14], w0
    20de:	80 00 eb    	clr.w     w1
    20e0:	51 08 98    	mov.w     w1, [w0+26]

000020e2 <.L86>:
    }
    if (self->RX) {
    20e2:	1e 00 78    	mov.w     [w14], w0
    20e4:	60 08 90    	mov.w     [w0+28], w0
    20e6:	00 00 e0    	cp0.w     w0
    20e8:	28 00 32    	bra       Z, 0x213a <.L87>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20ea:	11 3a 80    	mov.w     0x742, w1
    20ec:	f0 0b 20    	mov.w     #0xbf, w0
    20ee:	00 81 60    	and.w     w1, w0, w2
    20f0:	60 04 20    	mov.w     #0x46, w0
    20f2:	71 05 20    	mov.w     #0x57, w1
    20f4:	23 74 20    	mov.w     #0x742, w3
    20f6:	80 49 78    	mov.b     w0, [w3]
    20f8:	81 49 78    	mov.b     w1, [w3]
    20fa:	82 49 78    	mov.b     w2, [w3]
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    20fc:	1e 00 78    	mov.w     [w14], w0
    20fe:	00 08 90    	mov.w     [w0+16], w0
    2100:	9e 00 78    	mov.w     [w14], w1
    2102:	81 08 90    	mov.w     [w1+16], w1
    2104:	11 01 78    	mov.w     [w1], w2
    2106:	9e 00 78    	mov.w     [w14], w1
    2108:	c1 50 90    	mov.b     [w1+20], w1
    210a:	81 80 fb    	ze        w1, w1
    210c:	f3 03 20    	mov.w     #0x3f, w3
    210e:	81 18 dd    	sl.w      w3, w1, w1
    2110:	82 80 70    	ior.w     w1, w2, w1
    2112:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2114:	10 3a 80    	mov.w     0x742, w0
    2116:	00 01 78    	mov.w     w0, w2
    2118:	02 60 a0    	bset.w    w2, #0x6
    211a:	60 04 20    	mov.w     #0x46, w0
    211c:	71 05 20    	mov.w     #0x57, w1
    211e:	23 74 20    	mov.w     #0x742, w3
    2120:	80 49 78    	mov.b     w0, [w3]
    2122:	81 49 78    	mov.b     w1, [w3]
    2124:	82 49 78    	mov.b     w2, [w3]
        self->RX->owner = NULL;
    2126:	1e 00 78    	mov.w     [w14], w0
    2128:	60 08 90    	mov.w     [w0+28], w0
    212a:	80 00 eb    	clr.w     w1
    212c:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalIn(self->RX);
    212e:	1e 00 78    	mov.w     [w14], w0
    2130:	60 08 90    	mov.w     [w0+28], w0
    2132:	3e 05 07    	rcall     0x2bb0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
        self->RX = NULL;
    2134:	1e 00 78    	mov.w     [w14], w0
    2136:	80 00 eb    	clr.w     w1
    2138:	61 08 98    	mov.w     w1, [w0+28]

0000213a <.L87>:
    }
    if (self->RTS) {
    213a:	1e 00 78    	mov.w     [w14], w0
    213c:	70 08 90    	mov.w     [w0+30], w0
    213e:	00 00 e0    	cp0.w     w0
    2140:	2f 00 32    	bra       Z, 0x21a0 <.L88>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2142:	11 3a 80    	mov.w     0x742, w1
    2144:	f0 0b 20    	mov.w     #0xbf, w0
    2146:	00 81 60    	and.w     w1, w0, w2
    2148:	60 04 20    	mov.w     #0x46, w0
    214a:	71 05 20    	mov.w     #0x57, w1
    214c:	23 74 20    	mov.w     #0x742, w3
    214e:	80 49 78    	mov.b     w0, [w3]
    2150:	81 49 78    	mov.b     w1, [w3]
    2152:	82 49 78    	mov.b     w2, [w3]
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2154:	1e 00 78    	mov.w     [w14], w0
    2156:	70 08 90    	mov.w     [w0+30], w0
    2158:	70 00 90    	mov.w     [w0+14], w0
    215a:	9e 00 78    	mov.w     [w14], w1
    215c:	f1 08 90    	mov.w     [w1+30], w1
    215e:	f1 00 90    	mov.w     [w1+14], w1
    2160:	11 01 78    	mov.w     [w1], w2
    2162:	9e 00 78    	mov.w     [w14], w1
    2164:	f1 08 90    	mov.w     [w1+30], w1
    2166:	a1 48 90    	mov.b     [w1+10], w1
    2168:	81 80 fb    	ze        w1, w1
    216a:	f3 03 20    	mov.w     #0x3f, w3
    216c:	81 18 dd    	sl.w      w3, w1, w1
    216e:	81 80 ea    	com.w     w1, w1
    2170:	81 00 61    	and.w     w2, w1, w1
    2172:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2174:	10 3a 80    	mov.w     0x742, w0
    2176:	00 01 78    	mov.w     w0, w2
    2178:	02 60 a0    	bset.w    w2, #0x6
    217a:	60 04 20    	mov.w     #0x46, w0
    217c:	71 05 20    	mov.w     #0x57, w1
    217e:	23 74 20    	mov.w     #0x742, w3
    2180:	80 49 78    	mov.b     w0, [w3]
    2182:	81 49 78    	mov.b     w1, [w3]
    2184:	82 49 78    	mov.b     w2, [w3]
        self->RTS->owner = NULL;
    2186:	1e 00 78    	mov.w     [w14], w0
    2188:	70 08 90    	mov.w     [w0+30], w0
    218a:	80 00 eb    	clr.w     w1
    218c:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->RTS);
    218e:	1e 00 78    	mov.w     [w14], w0
    2190:	70 08 90    	mov.w     [w0+30], w0
    2192:	35 05 07    	rcall     0x2bfe <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_set(self->RTS);
    2194:	1e 00 78    	mov.w     [w14], w0
    2196:	70 08 90    	mov.w     [w0+30], w0
    2198:	8f 05 07    	rcall     0x2cb8 <_pin_set> <L0> <.LFB8> <.LFE7>
        self->RTS = NULL;
    219a:	1e 00 78    	mov.w     [w14], w0
    219c:	80 00 eb    	clr.w     w1
    219e:	71 08 98    	mov.w     w1, [w0+30]

000021a0 <.L88>:
    }
    if (self->CTS) {
    21a0:	1e 00 78    	mov.w     [w14], w0
    21a2:	00 10 90    	mov.w     [w0+32], w0
    21a4:	00 00 e0    	cp0.w     w0
    21a6:	28 00 32    	bra       Z, 0x21f8 <.L85>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    21a8:	11 3a 80    	mov.w     0x742, w1
    21aa:	f0 0b 20    	mov.w     #0xbf, w0
    21ac:	00 81 60    	and.w     w1, w0, w2
    21ae:	60 04 20    	mov.w     #0x46, w0
    21b0:	71 05 20    	mov.w     #0x57, w1
    21b2:	23 74 20    	mov.w     #0x742, w3
    21b4:	80 49 78    	mov.b     w0, [w3]
    21b6:	81 49 78    	mov.b     w1, [w3]
    21b8:	82 49 78    	mov.b     w2, [w3]
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    21ba:	1e 00 78    	mov.w     [w14], w0
    21bc:	10 08 90    	mov.w     [w0+18], w0
    21be:	9e 00 78    	mov.w     [w14], w1
    21c0:	91 08 90    	mov.w     [w1+18], w1
    21c2:	11 01 78    	mov.w     [w1], w2
    21c4:	9e 00 78    	mov.w     [w14], w1
    21c6:	d1 50 90    	mov.b     [w1+21], w1
    21c8:	81 80 fb    	ze        w1, w1
    21ca:	f3 03 20    	mov.w     #0x3f, w3
    21cc:	81 18 dd    	sl.w      w3, w1, w1
    21ce:	82 80 70    	ior.w     w1, w2, w1
    21d0:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    21d2:	10 3a 80    	mov.w     0x742, w0
    21d4:	00 01 78    	mov.w     w0, w2
    21d6:	02 60 a0    	bset.w    w2, #0x6
    21d8:	60 04 20    	mov.w     #0x46, w0
    21da:	71 05 20    	mov.w     #0x57, w1
    21dc:	23 74 20    	mov.w     #0x742, w3
    21de:	80 49 78    	mov.b     w0, [w3]
    21e0:	81 49 78    	mov.b     w1, [w3]
    21e2:	82 49 78    	mov.b     w2, [w3]
        self->CTS->owner = NULL;
    21e4:	1e 00 78    	mov.w     [w14], w0
    21e6:	00 10 90    	mov.w     [w0+32], w0
    21e8:	80 00 eb    	clr.w     w1
    21ea:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalIn(self->CTS);
    21ec:	1e 00 78    	mov.w     [w14], w0
    21ee:	00 10 90    	mov.w     [w0+32], w0
    21f0:	df 04 07    	rcall     0x2bb0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
        self->CTS = NULL;
    21f2:	1e 00 78    	mov.w     [w14], w0
    21f4:	80 00 eb    	clr.w     w1
    21f6:	01 10 98    	mov.w     w1, [w0+32]

000021f8 <.L85>:
    }
}
    21f8:	00 80 fa    	ulnk      
    21fa:	00 00 06    	return    

000021fc <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    21fc:	04 00 fa    	lnk       #0x4
    21fe:	00 0f 78    	mov.w     w0, [w14]
    2200:	21 47 98    	mov.b     w1, [w14+2]
    if (self->putc)
    2202:	1e 00 78    	mov.w     [w14], w0
    2204:	40 18 90    	mov.w     [w0+56], w0
    2206:	00 00 e0    	cp0.w     w0
    2208:	05 00 32    	bra       Z, 0x2214 <.L90>
        self->putc(self, ch);
    220a:	1e 00 78    	mov.w     [w14], w0
    220c:	40 19 90    	mov.w     [w0+56], w2
    220e:	ae 40 90    	mov.b     [w14+2], w1
    2210:	1e 00 78    	mov.w     [w14], w0
    2212:	02 00 01    	call      w2

00002214 <.L90>:
}
    2214:	00 80 fa    	ulnk      
    2216:	00 00 06    	return    

00002218 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2218:	02 00 fa    	lnk       #0x2
    221a:	00 0f 78    	mov.w     w0, [w14]
    if (self->getc)
    221c:	1e 00 78    	mov.w     [w14], w0
    221e:	50 18 90    	mov.w     [w0+58], w0
    2220:	00 00 e0    	cp0.w     w0
    2222:	05 00 32    	bra       Z, 0x222e <.L93>
        return self->getc(self);
    2224:	1e 00 78    	mov.w     [w14], w0
    2226:	d0 18 90    	mov.w     [w0+58], w1
    2228:	1e 00 78    	mov.w     [w14], w0
    222a:	01 00 01    	call      w1
    222c:	01 00 37    	bra       0x2230 <.L94>

0000222e <.L93>:
    else
        return 0xFF;
    222e:	00 c0 eb    	setm.b    w0

00002230 <.L94>:
}
    2230:	00 80 fa    	ulnk      
    2232:	00 00 06    	return    

00002234 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2234:	02 00 fa    	lnk       #0x2
    2236:	00 0f 78    	mov.w     w0, [w14]
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2238:	1e 00 78    	mov.w     [w14], w0
    223a:	10 00 90    	mov.w     [w0+2], w0
    223c:	90 00 78    	mov.w     [w0], w1
    223e:	00 40 20    	mov.w     #0x400, w0
    2240:	00 80 60    	and.w     w1, w0, w0
    2242:	00 00 e0    	cp0.w     w0
    2244:	07 00 3a    	bra       NZ, 0x2254 <.L95>
        bitset(self->UxSTA, 10);        //   enable data transmission
    2246:	1e 00 78    	mov.w     [w14], w0
    2248:	10 00 90    	mov.w     [w0+2], w0
    224a:	9e 00 78    	mov.w     [w14], w1
    224c:	91 00 90    	mov.w     [w1+2], w1
    224e:	91 00 78    	mov.w     [w1], w1
    2250:	01 a0 a0    	bset.w    w1, #0xa
    2252:	01 08 78    	mov.w     w1, [w0]

00002254 <.L95>:
}
    2254:	00 80 fa    	ulnk      
    2256:	00 00 06    	return    

00002258 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2258:	04 00 fa    	lnk       #0x4
    225a:	00 0f 78    	mov.w     w0, [w14]
    225c:	11 07 98    	mov.w     w1, [w14+2]
    while (*str)
    225e:	08 00 37    	bra       0x2270 <.L98>

00002260 <.L99>:
        uart_putc(self, *str++);
    2260:	1e 00 90    	mov.w     [w14+2], w0
    2262:	10 40 78    	mov.b     [w0], w0
    2264:	9e 00 90    	mov.w     [w14+2], w1
    2266:	81 00 e8    	inc.w     w1, w1
    2268:	11 07 98    	mov.w     w1, [w14+2]
    226a:	80 40 78    	mov.b     w0, w1
    226c:	1e 00 78    	mov.w     [w14], w0
    226e:	c6 ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>

00002270 <.L98>:
    2270:	1e 00 90    	mov.w     [w14+2], w0
    2272:	10 40 78    	mov.b     [w0], w0
    2274:	00 04 e0    	cp0.b     w0
    2276:	f4 ff 3a    	bra       NZ, 0x2260 <.L99>
    uart_flushTxBuffer(self);
    2278:	1e 00 78    	mov.w     [w14], w0
    227a:	dc ff 07    	rcall     0x2234 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
}
    227c:	00 80 fa    	ulnk      
    227e:	00 00 06    	return    

00002280 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2280:	0a 00 fa    	lnk       #0xa
    2282:	20 07 98    	mov.w     w0, [w14+4]
    2284:	31 07 98    	mov.w     w1, [w14+6]
    2286:	42 07 98    	mov.w     w2, [w14+8]
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2288:	4e 00 90    	mov.w     [w14+8], w0
    228a:	00 00 e0    	cp0.w     w0
    228c:	87 00 32    	bra       Z, 0x239c <.L113>
        return;

    if (len==1) {
    228e:	4e 00 90    	mov.w     [w14+8], w0
    2290:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2292:	04 00 3a    	bra       NZ, 0x229c <.L103>
        *str = '\0';
    2294:	3e 00 90    	mov.w     [w14+6], w0
    2296:	80 40 eb    	clr.b     w1
    2298:	01 48 78    	mov.b     w1, [w0]
        return;
    229a:	81 00 37    	bra       0x239e <.L100>

0000229c <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    229c:	b1 c1 b3    	mov.b     #0x1b, w1
    229e:	2e 00 90    	mov.w     [w14+4], w0
    22a0:	ad ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    uart_putc(self, '7');
    22a2:	71 c3 b3    	mov.b     #0x37, w1
    22a4:	2e 00 90    	mov.w     [w14+4], w0
    22a6:	aa ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    uart_flushTxBuffer(self);
    22a8:	2e 00 90    	mov.w     [w14+4], w0
    22aa:	c4 ff 07    	rcall     0x2234 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    start = str;
    22ac:	be 00 90    	mov.w     [w14+6], w1
    22ae:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    22b0:	ce 00 90    	mov.w     [w14+8], w1
    22b2:	01 0f 78    	mov.w     w1, [w14]
    22b4:	03 00 37    	bra       0x22bc <.L112>

000022b6 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    22b6:	00 00 00    	nop       
    22b8:	01 00 37    	bra       0x22bc <.L112>

000022ba <.L115>:
    22ba:	00 00 00    	nop       

000022bc <.L112>:
    22bc:	2e 00 90    	mov.w     [w14+4], w0
    22be:	ac ff 07    	rcall     0x2218 <_uart_getc> <L0> <.LFB20> <.LFE19>
    22c0:	be 00 90    	mov.w     [w14+6], w1
    22c2:	80 48 78    	mov.b     w0, [w1]
    22c4:	3e 00 90    	mov.w     [w14+6], w0
    22c6:	10 40 78    	mov.b     [w0], w0
    22c8:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    22ca:	0c 00 3a    	bra       NZ, 0x22e4 <.L104>
    *str = '\0';                            // Terminarte the string with null
    22cc:	3e 00 90    	mov.w     [w14+6], w0
    22ce:	80 40 eb    	clr.b     w1
    22d0:	01 48 78    	mov.b     w1, [w0]
    uart_putc(self, '\n');                  // Send newline and
    22d2:	a1 c0 b3    	mov.b     #0xa, w1
    22d4:	2e 00 90    	mov.w     [w14+4], w0
    22d6:	92 ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    uart_putc(self, '\r');                  //   carriage return
    22d8:	d1 c0 b3    	mov.b     #0xd, w1
    22da:	2e 00 90    	mov.w     [w14+4], w0
    22dc:	8f ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    uart_flushTxBuffer(self);
    22de:	2e 00 90    	mov.w     [w14+4], w0
    22e0:	a9 ff 07    	rcall     0x2234 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    22e2:	5d 00 37    	bra       0x239e <.L100>

000022e4 <.L104>:
    22e4:	3e 00 90    	mov.w     [w14+6], w0
    22e6:	10 40 78    	mov.b     [w0], w0
    22e8:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    22ea:	16 00 3a    	bra       NZ, 0x2318 <.L105>
    22ec:	b1 c1 b3    	mov.b     #0x1b, w1
    22ee:	2e 00 90    	mov.w     [w14+4], w0
    22f0:	85 ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    22f2:	81 c3 b3    	mov.b     #0x38, w1
    22f4:	2e 00 90    	mov.w     [w14+4], w0
    22f6:	82 ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    22f8:	b1 c1 b3    	mov.b     #0x1b, w1
    22fa:	2e 00 90    	mov.w     [w14+4], w0
    22fc:	7f ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    22fe:	b1 c5 b3    	mov.b     #0x5b, w1
    2300:	2e 00 90    	mov.w     [w14+4], w0
    2302:	7c ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    2304:	b1 c4 b3    	mov.b     #0x4b, w1
    2306:	2e 00 90    	mov.w     [w14+4], w0
    2308:	79 ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    230a:	2e 00 90    	mov.w     [w14+4], w0
    230c:	93 ff 07    	rcall     0x2234 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    230e:	9e 00 90    	mov.w     [w14+2], w1
    2310:	31 07 98    	mov.w     w1, [w14+6]
    2312:	ce 00 90    	mov.w     [w14+8], w1
    2314:	01 0f 78    	mov.w     w1, [w14]
    2316:	41 00 37    	bra       0x239a <.L106>

00002318 <.L105>:
    2318:	3e 00 90    	mov.w     [w14+6], w0
    231a:	10 40 78    	mov.b     [w0], w0
    231c:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    231e:	05 00 32    	bra       Z, 0x232a <.L107>
    2320:	3e 00 90    	mov.w     [w14+6], w0
    2322:	90 40 78    	mov.b     [w0], w1
    2324:	f0 c7 b3    	mov.b     #0x7f, w0
    2326:	80 cf 50    	sub.b     w1, w0, [w15]
    2328:	1a 00 3a    	bra       NZ, 0x235e <.L108>

0000232a <.L107>:
    232a:	be 00 90    	mov.w     [w14+6], w1
    232c:	1e 00 90    	mov.w     [w14+2], w0
    232e:	80 8f 50    	sub.w     w1, w0, [w15]
    2330:	10 00 36    	bra       LEU, 0x2352 <.L109>
    2332:	81 c0 b3    	mov.b     #0x8, w1
    2334:	2e 00 90    	mov.w     [w14+4], w0
    2336:	62 ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    2338:	01 c2 b3    	mov.b     #0x20, w1
    233a:	2e 00 90    	mov.w     [w14+4], w0
    233c:	5f ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    233e:	81 c0 b3    	mov.b     #0x8, w1
    2340:	2e 00 90    	mov.w     [w14+4], w0
    2342:	5c ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    2344:	2e 00 90    	mov.w     [w14+4], w0
    2346:	76 ff 07    	rcall     0x2234 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    2348:	3e 00 90    	mov.w     [w14+6], w0
    234a:	00 00 e9    	dec.w     w0, w0
    234c:	30 07 98    	mov.w     w0, [w14+6]
    234e:	1e 0f e8    	inc.w     [w14], [w14]
    2350:	05 00 37    	bra       0x235c <.L110>

00002352 <.L109>:
    2352:	71 c0 b3    	mov.b     #0x7, w1
    2354:	2e 00 90    	mov.w     [w14+4], w0
    2356:	52 ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    2358:	2e 00 90    	mov.w     [w14+4], w0
    235a:	6c ff 07    	rcall     0x2234 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>

0000235c <.L110>:
    235c:	1e 00 37    	bra       0x239a <.L106>

0000235e <.L108>:
    235e:	1e 00 78    	mov.w     [w14], w0
    2360:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2362:	06 00 3a    	bra       NZ, 0x2370 <.L111>
    2364:	71 c0 b3    	mov.b     #0x7, w1
    2366:	2e 00 90    	mov.w     [w14+4], w0
    2368:	49 ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    236a:	2e 00 90    	mov.w     [w14+4], w0
    236c:	63 ff 07    	rcall     0x2234 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    236e:	15 00 37    	bra       0x239a <.L106>

00002370 <.L111>:
    2370:	3e 00 90    	mov.w     [w14+6], w0
    2372:	10 40 78    	mov.b     [w0], w0
    2374:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2376:	9f ff 36    	bra       LEU, 0x22b6 <.L114>
    2378:	3e 00 90    	mov.w     [w14+6], w0
    237a:	90 40 78    	mov.b     [w0], w1
    237c:	e0 c7 b3    	mov.b     #0x7e, w0
    237e:	80 cf 50    	sub.b     w1, w0, [w15]
    2380:	9c ff 3e    	bra       GTU, 0x22ba <.L115>
    2382:	3e 00 90    	mov.w     [w14+6], w0
    2384:	10 40 78    	mov.b     [w0], w0
    2386:	80 40 78    	mov.b     w0, w1
    2388:	2e 00 90    	mov.w     [w14+4], w0
    238a:	38 ff 07    	rcall     0x21fc <_uart_putc> <L0> <.LFB19> <.LFE18>
    238c:	2e 00 90    	mov.w     [w14+4], w0
    238e:	52 ff 07    	rcall     0x2234 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    2390:	3e 00 90    	mov.w     [w14+6], w0
    2392:	00 00 e8    	inc.w     w0, w0
    2394:	30 07 98    	mov.w     w0, [w14+6]
    2396:	1e 0f e9    	dec.w     [w14], [w14]
    2398:	91 ff 37    	bra       0x22bc <.L112>

0000239a <.L106>:
    239a:	90 ff 37    	bra       0x22bc <.L112>

0000239c <.L113>:
    239c:	00 00 00    	nop       

0000239e <.L100>:
}
    239e:	00 80 fa    	ulnk      
    23a0:	00 00 06    	return    

000023a2 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    23a2:	02 00 fa    	lnk       #0x2
    23a4:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    23a6:	1e 00 78    	mov.w     [w14], w0
    23a8:	01 02 07    	rcall     0x27ac <_timer_lower> <L0> <.LFB16> <.LFE15>
    if (self->every) {
    23aa:	1e 00 78    	mov.w     [w14], w0
    23ac:	10 08 90    	mov.w     [w0+18], w0
    23ae:	00 00 e0    	cp0.w     w0
    23b0:	05 00 32    	bra       Z, 0x23bc <.L2>
        self->every(self);
    23b2:	1e 00 78    	mov.w     [w14], w0
    23b4:	90 08 90    	mov.w     [w0+18], w1
    23b6:	1e 00 78    	mov.w     [w14], w0
    23b8:	01 00 01    	call      w1
    23ba:	1a 00 37    	bra       0x23f0 <.L1>

000023bc <.L2>:
    } else if (self->after) {
    23bc:	1e 00 78    	mov.w     [w14], w0
    23be:	20 08 90    	mov.w     [w0+20], w0
    23c0:	00 00 e0    	cp0.w     w0
    23c2:	14 00 32    	bra       Z, 0x23ec <.L4>
        if (self->aftercount) {
    23c4:	1e 00 78    	mov.w     [w14], w0
    23c6:	00 08 90    	mov.w     [w0+16], w0
    23c8:	00 00 e0    	cp0.w     w0
    23ca:	0a 00 32    	bra       Z, 0x23e0 <.L5>
            self->after(self);
    23cc:	1e 00 78    	mov.w     [w14], w0
    23ce:	a0 08 90    	mov.w     [w0+20], w1
    23d0:	1e 00 78    	mov.w     [w14], w0
    23d2:	01 00 01    	call      w1
            self->aftercount--;
    23d4:	1e 00 78    	mov.w     [w14], w0
    23d6:	00 08 90    	mov.w     [w0+16], w0
    23d8:	80 00 e9    	dec.w     w0, w1
    23da:	1e 00 78    	mov.w     [w14], w0
    23dc:	01 08 98    	mov.w     w1, [w0+16]
    23de:	08 00 37    	bra       0x23f0 <.L1>

000023e0 <.L5>:
        } else {
            timer_disableInterrupt(self);
    23e0:	1e 00 78    	mov.w     [w14], w0
    23e2:	0c 02 07    	rcall     0x27fc <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
            self->after = NULL;
    23e4:	1e 00 78    	mov.w     [w14], w0
    23e6:	80 00 eb    	clr.w     w1
    23e8:	21 08 98    	mov.w     w1, [w0+20]
    23ea:	02 00 37    	bra       0x23f0 <.L1>

000023ec <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    23ec:	1e 00 78    	mov.w     [w14], w0
    23ee:	06 02 07    	rcall     0x27fc <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>

000023f0 <.L1>:
    }
}
    23f0:	00 80 fa    	ulnk      
    23f2:	00 00 06    	return    

000023f4 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    23f4:	36 00 f8    	push      0x36
    23f6:	80 9f be    	mov.d     w0, [w15++]
    23f8:	82 9f be    	mov.d     w2, [w15++]
    23fa:	84 9f be    	mov.d     w4, [w15++]
    23fc:	86 9f be    	mov.d     w6, [w15++]
    23fe:	32 00 f8    	push      0x32
    2400:	34 00 f8    	push      0x34
    2402:	10 00 20    	mov.w     #0x1, w0
    2404:	a0 01 88    	mov.w     w0, 0x34
    2406:	00 20 20    	mov.w     #0x200, w0
    2408:	90 01 88    	mov.w     w0, 0x32
    240a:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer1);
    240c:	e0 b0 20    	mov.w     #0xb0e, w0
    240e:	c9 ff 07    	rcall     0x23a2 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE23> <.Letext0> <.Ltext0>
}
    2410:	00 80 fa    	ulnk      
    2412:	34 00 f9    	pop       0x34
    2414:	32 00 f9    	pop       0x32
    2416:	4f 03 be    	mov.d     [--w15], w6
    2418:	4f 02 be    	mov.d     [--w15], w4
    241a:	4f 01 be    	mov.d     [--w15], w2
    241c:	4f 00 be    	mov.d     [--w15], w0
    241e:	36 00 f9    	pop       0x36
    2420:	00 40 06    	retfie    

00002422 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2422:	36 00 f8    	push      0x36
    2424:	80 9f be    	mov.d     w0, [w15++]
    2426:	82 9f be    	mov.d     w2, [w15++]
    2428:	84 9f be    	mov.d     w4, [w15++]
    242a:	86 9f be    	mov.d     w6, [w15++]
    242c:	32 00 f8    	push      0x32
    242e:	34 00 f8    	push      0x34
    2430:	10 00 20    	mov.w     #0x1, w0
    2432:	a0 01 88    	mov.w     w0, 0x34
    2434:	00 20 20    	mov.w     #0x200, w0
    2436:	90 01 88    	mov.w     w0, 0x32
    2438:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer2);
    243a:	40 b2 20    	mov.w     #0xb24, w0
    243c:	b2 ff 07    	rcall     0x23a2 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE23> <.Letext0> <.Ltext0>
}
    243e:	00 80 fa    	ulnk      
    2440:	34 00 f9    	pop       0x34
    2442:	32 00 f9    	pop       0x32
    2444:	4f 03 be    	mov.d     [--w15], w6
    2446:	4f 02 be    	mov.d     [--w15], w4
    2448:	4f 01 be    	mov.d     [--w15], w2
    244a:	4f 00 be    	mov.d     [--w15], w0
    244c:	36 00 f9    	pop       0x36
    244e:	00 40 06    	retfie    

00002450 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    2450:	36 00 f8    	push      0x36
    2452:	80 9f be    	mov.d     w0, [w15++]
    2454:	82 9f be    	mov.d     w2, [w15++]
    2456:	84 9f be    	mov.d     w4, [w15++]
    2458:	86 9f be    	mov.d     w6, [w15++]
    245a:	32 00 f8    	push      0x32
    245c:	34 00 f8    	push      0x34
    245e:	10 00 20    	mov.w     #0x1, w0
    2460:	a0 01 88    	mov.w     w0, 0x34
    2462:	00 20 20    	mov.w     #0x200, w0
    2464:	90 01 88    	mov.w     w0, 0x32
    2466:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer3);
    2468:	a0 b3 20    	mov.w     #0xb3a, w0
    246a:	9b ff 07    	rcall     0x23a2 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE23> <.Letext0> <.Ltext0>
}
    246c:	00 80 fa    	ulnk      
    246e:	34 00 f9    	pop       0x34
    2470:	32 00 f9    	pop       0x32
    2472:	4f 03 be    	mov.d     [--w15], w6
    2474:	4f 02 be    	mov.d     [--w15], w4
    2476:	4f 01 be    	mov.d     [--w15], w2
    2478:	4f 00 be    	mov.d     [--w15], w0
    247a:	36 00 f9    	pop       0x36
    247c:	00 40 06    	retfie    

0000247e <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    247e:	36 00 f8    	push      0x36
    2480:	80 9f be    	mov.d     w0, [w15++]
    2482:	82 9f be    	mov.d     w2, [w15++]
    2484:	84 9f be    	mov.d     w4, [w15++]
    2486:	86 9f be    	mov.d     w6, [w15++]
    2488:	32 00 f8    	push      0x32
    248a:	34 00 f8    	push      0x34
    248c:	10 00 20    	mov.w     #0x1, w0
    248e:	a0 01 88    	mov.w     w0, 0x34
    2490:	00 20 20    	mov.w     #0x200, w0
    2492:	90 01 88    	mov.w     w0, 0x32
    2494:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer4);
    2496:	00 b5 20    	mov.w     #0xb50, w0
    2498:	84 ff 07    	rcall     0x23a2 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE23> <.Letext0> <.Ltext0>
}
    249a:	00 80 fa    	ulnk      
    249c:	34 00 f9    	pop       0x34
    249e:	32 00 f9    	pop       0x32
    24a0:	4f 03 be    	mov.d     [--w15], w6
    24a2:	4f 02 be    	mov.d     [--w15], w4
    24a4:	4f 01 be    	mov.d     [--w15], w2
    24a6:	4f 00 be    	mov.d     [--w15], w0
    24a8:	36 00 f9    	pop       0x36
    24aa:	00 40 06    	retfie    

000024ac <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    24ac:	36 00 f8    	push      0x36
    24ae:	80 9f be    	mov.d     w0, [w15++]
    24b0:	82 9f be    	mov.d     w2, [w15++]
    24b2:	84 9f be    	mov.d     w4, [w15++]
    24b4:	86 9f be    	mov.d     w6, [w15++]
    24b6:	32 00 f8    	push      0x32
    24b8:	34 00 f8    	push      0x34
    24ba:	10 00 20    	mov.w     #0x1, w0
    24bc:	a0 01 88    	mov.w     w0, 0x34
    24be:	00 20 20    	mov.w     #0x200, w0
    24c0:	90 01 88    	mov.w     w0, 0x32
    24c2:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer5);
    24c4:	60 b6 20    	mov.w     #0xb66, w0
    24c6:	6d ff 07    	rcall     0x23a2 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE23> <.Letext0> <.Ltext0>
}
    24c8:	00 80 fa    	ulnk      
    24ca:	34 00 f9    	pop       0x34
    24cc:	32 00 f9    	pop       0x32
    24ce:	4f 03 be    	mov.d     [--w15], w6
    24d0:	4f 02 be    	mov.d     [--w15], w4
    24d2:	4f 01 be    	mov.d     [--w15], w2
    24d4:	4f 00 be    	mov.d     [--w15], w0
    24d6:	36 00 f9    	pop       0x36
    24d8:	00 40 06    	retfie    

000024da <_init_timer>:

void init_timer(void) {
    24da:	00 00 fa    	lnk       #0x0
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    24dc:	b0 00 20    	mov.w     #0xb, w0
    24de:	80 1f 78    	mov.w     w0, [w15++]
    24e0:	47 00 20    	mov.w     #0x4, w7
    24e2:	36 c0 b3    	mov.b     #0x3, w6
    24e4:	45 09 20    	mov.w     #0x94, w5
    24e6:	44 08 20    	mov.w     #0x84, w4
    24e8:	03 10 20    	mov.w     #0x100, w3
    24ea:	22 10 20    	mov.w     #0x102, w2
    24ec:	41 10 20    	mov.w     #0x104, w1
    24ee:	e0 b0 20    	mov.w     #0xb0e, w0
    24f0:	33 00 07    	rcall     0x2558 <_timer_init> <L0> <.LFB7> <.LFE6>
    24f2:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    24f4:	c0 00 20    	mov.w     #0xc, w0
    24f6:	80 1f 78    	mov.w     w0, [w15++]
    24f8:	80 03 eb    	clr.w     w7
    24fa:	76 c0 b3    	mov.b     #0x7, w6
    24fc:	45 09 20    	mov.w     #0x94, w5
    24fe:	44 08 20    	mov.w     #0x84, w4
    2500:	63 10 20    	mov.w     #0x106, w3
    2502:	c2 10 20    	mov.w     #0x10c, w2
    2504:	01 11 20    	mov.w     #0x110, w1
    2506:	40 b2 20    	mov.w     #0xb24, w0
    2508:	27 00 07    	rcall     0x2558 <_timer_init> <L0> <.LFB7> <.LFE6>
    250a:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    250c:	d0 00 20    	mov.w     #0xd, w0
    250e:	80 1f 78    	mov.w     w0, [w15++]
    2510:	17 00 20    	mov.w     #0x1, w7
    2512:	86 c0 b3    	mov.b     #0x8, w6
    2514:	45 09 20    	mov.w     #0x94, w5
    2516:	44 08 20    	mov.w     #0x84, w4
    2518:	a3 10 20    	mov.w     #0x10a, w3
    251a:	e2 10 20    	mov.w     #0x10e, w2
    251c:	21 11 20    	mov.w     #0x112, w1
    251e:	a0 b3 20    	mov.w     #0xb3a, w0
    2520:	1b 00 07    	rcall     0x2558 <_timer_init> <L0> <.LFB7> <.LFE6>
    2522:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    2524:	e0 00 20    	mov.w     #0xe, w0
    2526:	80 1f 78    	mov.w     w0, [w15++]
    2528:	27 00 20    	mov.w     #0x2, w7
    252a:	b6 c0 b3    	mov.b     #0xb, w6
    252c:	65 09 20    	mov.w     #0x96, w5
    252e:	64 08 20    	mov.w     #0x86, w4
    2530:	43 11 20    	mov.w     #0x114, w3
    2532:	a2 11 20    	mov.w     #0x11a, w2
    2534:	e1 11 20    	mov.w     #0x11e, w1
    2536:	00 b5 20    	mov.w     #0xb50, w0
    2538:	0f 00 07    	rcall     0x2558 <_timer_init> <L0> <.LFB7> <.LFE6>
    253a:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    253c:	f0 00 20    	mov.w     #0xf, w0
    253e:	80 1f 78    	mov.w     w0, [w15++]
    2540:	37 00 20    	mov.w     #0x3, w7
    2542:	c6 c0 b3    	mov.b     #0xc, w6
    2544:	65 09 20    	mov.w     #0x96, w5
    2546:	64 08 20    	mov.w     #0x86, w4
    2548:	83 11 20    	mov.w     #0x118, w3
    254a:	c2 11 20    	mov.w     #0x11c, w2
    254c:	01 12 20    	mov.w     #0x120, w1
    254e:	60 b6 20    	mov.w     #0xb66, w0
    2550:	03 00 07    	rcall     0x2558 <_timer_init> <L0> <.LFB7> <.LFE6>
    2552:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    2554:	00 80 fa    	ulnk      
    2556:	00 00 06    	return    

00002558 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    2558:	10 00 fa    	lnk       #0x10
    255a:	00 0f 78    	mov.w     w0, [w14]
    255c:	11 07 98    	mov.w     w1, [w14+2]
    255e:	22 07 98    	mov.w     w2, [w14+4]
    2560:	33 07 98    	mov.w     w3, [w14+6]
    2562:	44 07 98    	mov.w     w4, [w14+8]
    2564:	55 07 98    	mov.w     w5, [w14+10]
    2566:	46 4f 98    	mov.b     w6, [w14+12]
    2568:	77 07 98    	mov.w     w7, [w14+14]
    self->TxCON = TxCON;
    256a:	1e 00 78    	mov.w     [w14], w0
    256c:	9e 00 90    	mov.w     [w14+2], w1
    256e:	01 08 78    	mov.w     w1, [w0]
    self->PRx = PRx;
    2570:	1e 00 78    	mov.w     [w14], w0
    2572:	ae 00 90    	mov.w     [w14+4], w1
    2574:	11 00 98    	mov.w     w1, [w0+2]
    self->TMRx = TMRx;
    2576:	1e 00 78    	mov.w     [w14], w0
    2578:	be 00 90    	mov.w     [w14+6], w1
    257a:	21 00 98    	mov.w     w1, [w0+4]
    self->IFSy = IFSy;
    257c:	1e 00 78    	mov.w     [w14], w0
    257e:	ce 00 90    	mov.w     [w14+8], w1
    2580:	31 00 98    	mov.w     w1, [w0+6]
    self->IECy = IECy;
    2582:	1e 00 78    	mov.w     [w14], w0
    2584:	de 00 90    	mov.w     [w14+10], w1
    2586:	41 00 98    	mov.w     w1, [w0+8]
    self->flagbit = flagbit;
    2588:	1e 00 78    	mov.w     [w14], w0
    258a:	ce 48 90    	mov.b     [w14+12], w1
    258c:	21 48 98    	mov.b     w1, [w0+10]
    self->octselnum = octselnum;
    258e:	1e 00 78    	mov.w     [w14], w0
    2590:	fe 00 90    	mov.w     [w14+14], w1
    2592:	61 00 98    	mov.w     w1, [w0+12]
    self->ocsyncselnum = ocsyncselnum;
    2594:	1e 00 78    	mov.w     [w14], w0
    2596:	ce b8 97    	mov.w     [w14-8], w1
    2598:	71 00 98    	mov.w     w1, [w0+14]
    self->aftercount = 0;
    259a:	1e 00 78    	mov.w     [w14], w0
    259c:	80 00 eb    	clr.w     w1
    259e:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    25a0:	1e 00 78    	mov.w     [w14], w0
    25a2:	80 00 eb    	clr.w     w1
    25a4:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    25a6:	1e 00 78    	mov.w     [w14], w0
    25a8:	80 00 eb    	clr.w     w1
    25aa:	21 08 98    	mov.w     w1, [w0+20]
}
    25ac:	00 80 fa    	ulnk      
    25ae:	00 00 06    	return    

000025b0 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    25b0:	06 00 fa    	lnk       #0x6
    25b2:	88 1f 78    	mov.w     w8, [w15++]
    25b4:	00 0f 78    	mov.w     w0, [w14]
    25b6:	12 07 98    	mov.w     w2, [w14+2]
    25b8:	23 07 98    	mov.w     w3, [w14+4]
    if (period>(256.*65536.*TCY)) {
    25ba:	18 c0 b3    	mov.b     #0x1, w8
    25bc:	d2 7b 23    	mov.w     #0x37bd, w2
    25be:	63 f8 23    	mov.w     #0x3f86, w3
    25c0:	1e 00 90    	mov.w     [w14+2], w0
    25c2:	ae 00 90    	mov.w     [w14+4], w1
    25c4:	d8 f6 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    25c6:	00 00 e0    	cp0.w     w0
    25c8:	01 00 3c    	bra       GT, 0x25cc <.L14>
    25ca:	00 44 eb    	clr.b     w8

000025cc <.L14>:
    25cc:	08 04 e0    	cp0.b     w8
    25ce:	69 00 3a    	bra       NZ, 0x26a2 <.L23>
        return;
    } else if (period>(64.*65536.*TCY)) {
    25d0:	18 c0 b3    	mov.b     #0x1, w8
    25d2:	d2 7b 23    	mov.w     #0x37bd, w2
    25d4:	63 e8 23    	mov.w     #0x3e86, w3
    25d6:	1e 00 90    	mov.w     [w14+2], w0
    25d8:	ae 00 90    	mov.w     [w14+4], w1
    25da:	cd f6 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    25dc:	00 00 e0    	cp0.w     w0
    25de:	01 00 3c    	bra       GT, 0x25e2 <.L17>
    25e0:	00 44 eb    	clr.b     w8

000025e2 <.L17>:
    25e2:	08 04 e0    	cp0.b     w8
    25e4:	12 00 32    	bra       Z, 0x260a <.L18>
        timer_stop(self);
    25e6:	1e 00 78    	mov.w     [w14], w0
    25e8:	c4 00 07    	rcall     0x2772 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0030);
    25ea:	1e 00 78    	mov.w     [w14], w0
    25ec:	10 00 78    	mov.w     [w0], w0
    25ee:	01 03 20    	mov.w     #0x30, w1
    25f0:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    25f2:	1e 00 78    	mov.w     [w14], w0
    25f4:	10 04 90    	mov.w     [w0+2], w8
    25f6:	02 40 22    	mov.w     #0x2400, w2
    25f8:	43 77 24    	mov.w     #0x4774, w3
    25fa:	1e 00 90    	mov.w     [w14+2], w0
    25fc:	ae 00 90    	mov.w     [w14+4], w1
    25fe:	2d f7 07    	rcall     0x145a <___mulsf3>
    2600:	bc f6 07    	rcall     0x137a <___fixunssfsi>
    2602:	00 00 78    	mov.w     w0, w0
    2604:	00 00 e9    	dec.w     w0, w0
    2606:	00 0c 78    	mov.w     w0, [w8]
    2608:	4d 00 37    	bra       0x26a4 <.L13>

0000260a <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    260a:	18 c0 b3    	mov.b     #0x1, w8
    260c:	d2 7b 23    	mov.w     #0x37bd, w2
    260e:	63 d0 23    	mov.w     #0x3d06, w3
    2610:	1e 00 90    	mov.w     [w14+2], w0
    2612:	ae 00 90    	mov.w     [w14+4], w1
    2614:	b0 f6 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    2616:	00 00 e0    	cp0.w     w0
    2618:	01 00 3c    	bra       GT, 0x261c <.L19>
    261a:	00 44 eb    	clr.b     w8

0000261c <.L19>:
    261c:	08 04 e0    	cp0.b     w8
    261e:	12 00 32    	bra       Z, 0x2644 <.L20>
        timer_stop(self);
    2620:	1e 00 78    	mov.w     [w14], w0
    2622:	a7 00 07    	rcall     0x2772 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0020);
    2624:	1e 00 78    	mov.w     [w14], w0
    2626:	10 00 78    	mov.w     [w0], w0
    2628:	01 02 20    	mov.w     #0x20, w1
    262a:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    262c:	1e 00 78    	mov.w     [w14], w0
    262e:	10 04 90    	mov.w     [w0+2], w8
    2630:	02 40 22    	mov.w     #0x2400, w2
    2632:	43 87 24    	mov.w     #0x4874, w3
    2634:	1e 00 90    	mov.w     [w14+2], w0
    2636:	ae 00 90    	mov.w     [w14+4], w1
    2638:	10 f7 07    	rcall     0x145a <___mulsf3>
    263a:	9f f6 07    	rcall     0x137a <___fixunssfsi>
    263c:	00 00 78    	mov.w     w0, w0
    263e:	00 00 e9    	dec.w     w0, w0
    2640:	00 0c 78    	mov.w     w0, [w8]
    2642:	30 00 37    	bra       0x26a4 <.L13>

00002644 <.L20>:
    } else if (period>(65536.*TCY)) {
    2644:	18 c0 b3    	mov.b     #0x1, w8
    2646:	d2 7b 23    	mov.w     #0x37bd, w2
    2648:	63 b8 23    	mov.w     #0x3b86, w3
    264a:	1e 00 90    	mov.w     [w14+2], w0
    264c:	ae 00 90    	mov.w     [w14+4], w1
    264e:	93 f6 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    2650:	00 00 e0    	cp0.w     w0
    2652:	01 00 3c    	bra       GT, 0x2656 <.L21>
    2654:	00 44 eb    	clr.b     w8

00002656 <.L21>:
    2656:	08 04 e0    	cp0.b     w8
    2658:	12 00 32    	bra       Z, 0x267e <.L22>
        timer_stop(self);
    265a:	1e 00 78    	mov.w     [w14], w0
    265c:	8a 00 07    	rcall     0x2772 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0010);
    265e:	1e 00 78    	mov.w     [w14], w0
    2660:	10 00 78    	mov.w     [w0], w0
    2662:	01 01 20    	mov.w     #0x10, w1
    2664:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    2666:	1e 00 78    	mov.w     [w14], w0
    2668:	10 04 90    	mov.w     [w0+2], w8
    266a:	02 40 22    	mov.w     #0x2400, w2
    266c:	43 9f 24    	mov.w     #0x49f4, w3
    266e:	1e 00 90    	mov.w     [w14+2], w0
    2670:	ae 00 90    	mov.w     [w14+4], w1
    2672:	f3 f6 07    	rcall     0x145a <___mulsf3>
    2674:	82 f6 07    	rcall     0x137a <___fixunssfsi>
    2676:	00 00 78    	mov.w     w0, w0
    2678:	00 00 e9    	dec.w     w0, w0
    267a:	00 0c 78    	mov.w     w0, [w8]
    267c:	13 00 37    	bra       0x26a4 <.L13>

0000267e <.L22>:
    } else {
        timer_stop(self);
    267e:	1e 00 78    	mov.w     [w14], w0
    2680:	78 00 07    	rcall     0x2772 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0000);
    2682:	1e 00 78    	mov.w     [w14], w0
    2684:	10 00 78    	mov.w     [w0], w0
    2686:	80 00 eb    	clr.w     w1
    2688:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    268a:	1e 00 78    	mov.w     [w14], w0
    268c:	10 04 90    	mov.w     [w0+2], w8
    268e:	02 40 22    	mov.w     #0x2400, w2
    2690:	43 b7 24    	mov.w     #0x4b74, w3
    2692:	1e 00 90    	mov.w     [w14+2], w0
    2694:	ae 00 90    	mov.w     [w14+4], w1
    2696:	e1 f6 07    	rcall     0x145a <___mulsf3>
    2698:	70 f6 07    	rcall     0x137a <___fixunssfsi>
    269a:	00 00 78    	mov.w     w0, w0
    269c:	00 00 e9    	dec.w     w0, w0
    269e:	00 0c 78    	mov.w     w0, [w8]
    26a0:	01 00 37    	bra       0x26a4 <.L13>

000026a2 <.L23>:
    26a2:	00 00 00    	nop       

000026a4 <.L13>:
    }
}
    26a4:	4f 04 78    	mov.w     [--w15], w8
    26a6:	00 80 fa    	ulnk      
    26a8:	00 00 06    	return    

000026aa <_timer_period>:

float timer_period(_TIMER *self) {
    26aa:	04 00 fa    	lnk       #0x4
    26ac:	88 9f be    	mov.d     w8, [w15++]
    26ae:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    26b0:	1e 00 90    	mov.w     [w14+2], w0
    26b2:	10 00 78    	mov.w     [w0], w0
    26b4:	90 00 78    	mov.w     [w0], w1
    26b6:	00 03 20    	mov.w     #0x30, w0
    26b8:	00 80 60    	and.w     w1, w0, w0
    26ba:	44 00 de    	lsr.w     w0, #0x4, w0
    26bc:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    26be:	1e 00 78    	mov.w     [w14], w0
    26c0:	c2 00 dd    	sl.w      w0, #0x2, w1
    26c2:	c0 b7 20    	mov.w     #0xb7c, w0
    26c4:	00 80 40    	add.w     w1, w0, w0
    26c6:	10 04 be    	mov.d     [w0], w8
    26c8:	1e 00 90    	mov.w     [w14+2], w0
    26ca:	10 00 90    	mov.w     [w0+2], w0
    26cc:	10 00 78    	mov.w     [w0], w0
    26ce:	80 00 eb    	clr.w     w1
    26d0:	6f f6 07    	rcall     0x13b0 <___floatunsisf>
    26d2:	02 00 20    	mov.w     #0x0, w2
    26d4:	03 f8 23    	mov.w     #0x3f80, w3
    26d6:	ae f5 07    	rcall     0x1234 <___addsf3>
    26d8:	00 01 be    	mov.d     w0, w2
    26da:	08 00 be    	mov.d     w8, w0
    26dc:	be f6 07    	rcall     0x145a <___mulsf3>
}
    26de:	4f 04 be    	mov.d     [--w15], w8
    26e0:	00 80 fa    	ulnk      
    26e2:	00 00 06    	return    

000026e4 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    26e4:	06 00 fa    	lnk       #0x6
    26e6:	00 0f 78    	mov.w     w0, [w14]
    26e8:	12 07 98    	mov.w     w2, [w14+2]
    26ea:	23 07 98    	mov.w     w3, [w14+4]
    timer_setPeriod(self, 1./freq);
    26ec:	1e 01 90    	mov.w     [w14+2], w2
    26ee:	ae 01 90    	mov.w     [w14+4], w3
    26f0:	00 00 20    	mov.w     #0x0, w0
    26f2:	01 f8 23    	mov.w     #0x3f80, w1
    26f4:	fc f5 07    	rcall     0x12ee <___divsf3>
    26f6:	00 01 be    	mov.d     w0, w2
    26f8:	1e 00 78    	mov.w     [w14], w0
    26fa:	5a ff 07    	rcall     0x25b0 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
}
    26fc:	00 80 fa    	ulnk      
    26fe:	00 00 06    	return    

00002700 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2700:	02 00 fa    	lnk       #0x2
    2702:	00 0f 78    	mov.w     w0, [w14]
    return 1./timer_period(self);
    2704:	1e 00 78    	mov.w     [w14], w0
    2706:	d1 ff 07    	rcall     0x26aa <_timer_period> <L0> <.LFB9> <.LFE8>
    2708:	00 01 be    	mov.d     w0, w2
    270a:	00 00 20    	mov.w     #0x0, w0
    270c:	01 f8 23    	mov.w     #0x3f80, w1
    270e:	ef f5 07    	rcall     0x12ee <___divsf3>
}
    2710:	00 80 fa    	ulnk      
    2712:	00 00 06    	return    

00002714 <_timer_time>:

float timer_time(_TIMER *self) {
    2714:	04 00 fa    	lnk       #0x4
    2716:	88 9f be    	mov.d     w8, [w15++]
    2718:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    271a:	1e 00 90    	mov.w     [w14+2], w0
    271c:	10 00 78    	mov.w     [w0], w0
    271e:	90 00 78    	mov.w     [w0], w1
    2720:	00 03 20    	mov.w     #0x30, w0
    2722:	00 80 60    	and.w     w1, w0, w0
    2724:	44 00 de    	lsr.w     w0, #0x4, w0
    2726:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2728:	1e 00 78    	mov.w     [w14], w0
    272a:	c2 00 dd    	sl.w      w0, #0x2, w1
    272c:	c0 b7 20    	mov.w     #0xb7c, w0
    272e:	00 80 40    	add.w     w1, w0, w0
    2730:	10 04 be    	mov.d     [w0], w8
    2732:	1e 00 90    	mov.w     [w14+2], w0
    2734:	10 00 90    	mov.w     [w0+2], w0
    2736:	10 00 78    	mov.w     [w0], w0
    2738:	80 00 eb    	clr.w     w1
    273a:	3a f6 07    	rcall     0x13b0 <___floatunsisf>
    273c:	02 00 20    	mov.w     #0x0, w2
    273e:	03 f8 23    	mov.w     #0x3f80, w3
    2740:	79 f5 07    	rcall     0x1234 <___addsf3>
    2742:	00 01 be    	mov.d     w0, w2
    2744:	08 00 be    	mov.d     w8, w0
    2746:	89 f6 07    	rcall     0x145a <___mulsf3>
}
    2748:	4f 04 be    	mov.d     [--w15], w8
    274a:	00 80 fa    	ulnk      
    274c:	00 00 06    	return    

0000274e <_timer_start>:

void timer_start(_TIMER *self) {
    274e:	02 00 fa    	lnk       #0x2
    2750:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    2752:	1e 00 78    	mov.w     [w14], w0
    2754:	2b 00 07    	rcall     0x27ac <_timer_lower> <L0> <.LFB16> <.LFE15>
    poke(self->TMRx, 0);
    2756:	1e 00 78    	mov.w     [w14], w0
    2758:	20 00 90    	mov.w     [w0+4], w0
    275a:	80 00 eb    	clr.w     w1
    275c:	01 08 78    	mov.w     w1, [w0]
    bitset(self->TxCON, 15);
    275e:	1e 00 78    	mov.w     [w14], w0
    2760:	10 00 78    	mov.w     [w0], w0
    2762:	9e 00 78    	mov.w     [w14], w1
    2764:	91 00 78    	mov.w     [w1], w1
    2766:	11 01 78    	mov.w     [w1], w2
    2768:	01 00 28    	mov.w     #0x8000, w1
    276a:	82 80 70    	ior.w     w1, w2, w1
    276c:	01 08 78    	mov.w     w1, [w0]
}
    276e:	00 80 fa    	ulnk      
    2770:	00 00 06    	return    

00002772 <_timer_stop>:

void timer_stop(_TIMER *self) {
    2772:	02 00 fa    	lnk       #0x2
    2774:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->TxCON, 15);
    2776:	1e 00 78    	mov.w     [w14], w0
    2778:	10 00 78    	mov.w     [w0], w0
    277a:	9e 00 78    	mov.w     [w14], w1
    277c:	91 00 78    	mov.w     [w1], w1
    277e:	11 01 78    	mov.w     [w1], w2
    2780:	f1 ff 27    	mov.w     #0x7fff, w1
    2782:	81 00 61    	and.w     w2, w1, w1
    2784:	01 08 78    	mov.w     w1, [w0]
}
    2786:	00 80 fa    	ulnk      
    2788:	00 00 06    	return    

0000278a <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    278a:	02 00 fa    	lnk       #0x2
    278c:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->IFSy, self->flagbit);
    278e:	1e 00 78    	mov.w     [w14], w0
    2790:	30 00 90    	mov.w     [w0+6], w0
    2792:	90 00 78    	mov.w     [w0], w1
    2794:	1e 00 78    	mov.w     [w14], w0
    2796:	20 48 90    	mov.b     [w0+10], w0
    2798:	00 80 fb    	ze        w0, w0
    279a:	12 00 20    	mov.w     #0x1, w2
    279c:	00 10 dd    	sl.w      w2, w0, w0
    279e:	00 80 60    	and.w     w1, w0, w0
    27a0:	00 f0 a7    	btsc.w    w0, #0xf
    27a2:	00 00 ea    	neg.w     w0, w0
    27a4:	00 00 ea    	neg.w     w0, w0
    27a6:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    27a8:	00 80 fa    	ulnk      
    27aa:	00 00 06    	return    

000027ac <_timer_lower>:

void timer_lower(_TIMER *self) {
    27ac:	02 00 fa    	lnk       #0x2
    27ae:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IFSy, self->flagbit);
    27b0:	1e 00 78    	mov.w     [w14], w0
    27b2:	30 00 90    	mov.w     [w0+6], w0
    27b4:	9e 00 78    	mov.w     [w14], w1
    27b6:	b1 00 90    	mov.w     [w1+6], w1
    27b8:	11 01 78    	mov.w     [w1], w2
    27ba:	9e 00 78    	mov.w     [w14], w1
    27bc:	a1 48 90    	mov.b     [w1+10], w1
    27be:	81 80 fb    	ze        w1, w1
    27c0:	13 00 20    	mov.w     #0x1, w3
    27c2:	81 18 dd    	sl.w      w3, w1, w1
    27c4:	81 80 ea    	com.w     w1, w1
    27c6:	81 00 61    	and.w     w2, w1, w1
    27c8:	01 08 78    	mov.w     w1, [w0]
}
    27ca:	00 80 fa    	ulnk      
    27cc:	00 00 06    	return    

000027ce <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    27ce:	02 00 fa    	lnk       #0x2
    27d0:	00 0f 78    	mov.w     w0, [w14]
    return peek(self->TMRx);
    27d2:	1e 00 78    	mov.w     [w14], w0
    27d4:	20 00 90    	mov.w     [w0+4], w0
    27d6:	10 00 78    	mov.w     [w0], w0
}
    27d8:	00 80 fa    	ulnk      
    27da:	00 00 06    	return    

000027dc <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    27dc:	02 00 fa    	lnk       #0x2
    27de:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->IECy, self->flagbit);
    27e0:	1e 00 78    	mov.w     [w14], w0
    27e2:	40 00 90    	mov.w     [w0+8], w0
    27e4:	9e 00 78    	mov.w     [w14], w1
    27e6:	c1 00 90    	mov.w     [w1+8], w1
    27e8:	11 01 78    	mov.w     [w1], w2
    27ea:	9e 00 78    	mov.w     [w14], w1
    27ec:	a1 48 90    	mov.b     [w1+10], w1
    27ee:	81 80 fb    	ze        w1, w1
    27f0:	13 00 20    	mov.w     #0x1, w3
    27f2:	81 18 dd    	sl.w      w3, w1, w1
    27f4:	82 80 70    	ior.w     w1, w2, w1
    27f6:	01 08 78    	mov.w     w1, [w0]
}
    27f8:	00 80 fa    	ulnk      
    27fa:	00 00 06    	return    

000027fc <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    27fc:	02 00 fa    	lnk       #0x2
    27fe:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IECy, self->flagbit);
    2800:	1e 00 78    	mov.w     [w14], w0
    2802:	40 00 90    	mov.w     [w0+8], w0
    2804:	9e 00 78    	mov.w     [w14], w1
    2806:	c1 00 90    	mov.w     [w1+8], w1
    2808:	11 01 78    	mov.w     [w1], w2
    280a:	9e 00 78    	mov.w     [w14], w1
    280c:	a1 48 90    	mov.b     [w1+10], w1
    280e:	81 80 fb    	ze        w1, w1
    2810:	13 00 20    	mov.w     #0x1, w3
    2812:	81 18 dd    	sl.w      w3, w1, w1
    2814:	81 80 ea    	com.w     w1, w1
    2816:	81 00 61    	and.w     w2, w1, w1
    2818:	01 08 78    	mov.w     w1, [w0]
}
    281a:	00 80 fa    	ulnk      
    281c:	00 00 06    	return    

0000281e <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    281e:	08 00 fa    	lnk       #0x8
    2820:	00 0f 78    	mov.w     w0, [w14]
    2822:	12 07 98    	mov.w     w2, [w14+2]
    2824:	23 07 98    	mov.w     w3, [w14+4]
    2826:	31 07 98    	mov.w     w1, [w14+6]
    timer_disableInterrupt(self);
    2828:	1e 00 78    	mov.w     [w14], w0
    282a:	e8 ff 07    	rcall     0x27fc <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, interval);
    282c:	1e 01 90    	mov.w     [w14+2], w2
    282e:	ae 01 90    	mov.w     [w14+4], w3
    2830:	1e 00 78    	mov.w     [w14], w0
    2832:	be fe 07    	rcall     0x25b0 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = 0;
    2834:	1e 00 78    	mov.w     [w14], w0
    2836:	80 00 eb    	clr.w     w1
    2838:	01 08 98    	mov.w     w1, [w0+16]
    self->every = callback;
    283a:	1e 00 78    	mov.w     [w14], w0
    283c:	be 00 90    	mov.w     [w14+6], w1
    283e:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    2840:	1e 00 78    	mov.w     [w14], w0
    2842:	80 00 eb    	clr.w     w1
    2844:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    2846:	1e 00 78    	mov.w     [w14], w0
    2848:	c9 ff 07    	rcall     0x27dc <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    284a:	1e 00 78    	mov.w     [w14], w0
    284c:	80 ff 07    	rcall     0x274e <_timer_start> <L0> <.LFB13> <.LFE12>
}
    284e:	00 80 fa    	ulnk      
    2850:	00 00 06    	return    

00002852 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    2852:	0a 00 fa    	lnk       #0xa
    2854:	00 0f 78    	mov.w     w0, [w14]
    2856:	12 07 98    	mov.w     w2, [w14+2]
    2858:	23 07 98    	mov.w     w3, [w14+4]
    285a:	31 07 98    	mov.w     w1, [w14+6]
    285c:	44 07 98    	mov.w     w4, [w14+8]
    timer_disableInterrupt(self);
    285e:	1e 00 78    	mov.w     [w14], w0
    2860:	cd ff 07    	rcall     0x27fc <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, delay);
    2862:	1e 01 90    	mov.w     [w14+2], w2
    2864:	ae 01 90    	mov.w     [w14+4], w3
    2866:	1e 00 78    	mov.w     [w14], w0
    2868:	a3 fe 07    	rcall     0x25b0 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = num_times;
    286a:	1e 00 78    	mov.w     [w14], w0
    286c:	be 00 90    	mov.w     [w14+6], w1
    286e:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    2870:	1e 00 78    	mov.w     [w14], w0
    2872:	80 00 eb    	clr.w     w1
    2874:	11 08 98    	mov.w     w1, [w0+18]
    self->after = callback;
    2876:	1e 00 78    	mov.w     [w14], w0
    2878:	ce 00 90    	mov.w     [w14+8], w1
    287a:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    287c:	1e 00 78    	mov.w     [w14], w0
    287e:	ae ff 07    	rcall     0x27dc <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    2880:	1e 00 78    	mov.w     [w14], w0
    2882:	65 ff 07    	rcall     0x274e <_timer_start> <L0> <.LFB13> <.LFE12>
}
    2884:	00 80 fa    	ulnk      
    2886:	00 00 06    	return    

00002888 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    2888:	02 00 fa    	lnk       #0x2
    288a:	00 0f 78    	mov.w     w0, [w14]
    timer_disableInterrupt(self);
    288c:	1e 00 78    	mov.w     [w14], w0
    288e:	b6 ff 07    	rcall     0x27fc <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_lower(self);
    2890:	1e 00 78    	mov.w     [w14], w0
    2892:	8c ff 07    	rcall     0x27ac <_timer_lower> <L0> <.LFB16> <.LFE15>
    timer_stop(self);
    2894:	1e 00 78    	mov.w     [w14], w0
    2896:	6d ff 07    	rcall     0x2772 <_timer_stop> <L0> <.LFB14> <.LFE13>
    self->aftercount = 0;
    2898:	1e 00 78    	mov.w     [w14], w0
    289a:	80 00 eb    	clr.w     w1
    289c:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    289e:	1e 00 78    	mov.w     [w14], w0
    28a0:	80 00 eb    	clr.w     w1
    28a2:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    28a4:	1e 00 78    	mov.w     [w14], w0
    28a6:	80 00 eb    	clr.w     w1
    28a8:	21 08 98    	mov.w     w1, [w0+20]
}
    28aa:	00 80 fa    	ulnk      
    28ac:	00 00 06    	return    

000028ae <___digitalWrite>:
    28ae:	04 00 fa    	lnk       #0x4
    28b0:	00 0f 78    	mov.w     w0, [w14]
    28b2:	11 07 98    	mov.w     w1, [w14+2]
    28b4:	1e 00 90    	mov.w     [w14+2], w0
    28b6:	00 00 e0    	cp0.w     w0
    28b8:	0d 00 32    	bra       Z, 0x28d4 <.L2>
    28ba:	1e 00 78    	mov.w     [w14], w0
    28bc:	10 00 78    	mov.w     [w0], w0
    28be:	9e 00 78    	mov.w     [w14], w1
    28c0:	91 00 78    	mov.w     [w1], w1
    28c2:	11 01 78    	mov.w     [w1], w2
    28c4:	9e 00 78    	mov.w     [w14], w1
    28c6:	e1 40 90    	mov.b     [w1+6], w1
    28c8:	81 80 fb    	ze        w1, w1
    28ca:	13 00 20    	mov.w     #0x1, w3
    28cc:	81 18 dd    	sl.w      w3, w1, w1
    28ce:	82 80 70    	ior.w     w1, w2, w1
    28d0:	01 08 78    	mov.w     w1, [w0]
    28d2:	0d 00 37    	bra       0x28ee <.L1>

000028d4 <.L2>:
    28d4:	1e 00 78    	mov.w     [w14], w0
    28d6:	10 00 78    	mov.w     [w0], w0
    28d8:	9e 00 78    	mov.w     [w14], w1
    28da:	91 00 78    	mov.w     [w1], w1
    28dc:	11 01 78    	mov.w     [w1], w2
    28de:	9e 00 78    	mov.w     [w14], w1
    28e0:	e1 40 90    	mov.b     [w1+6], w1
    28e2:	81 80 fb    	ze        w1, w1
    28e4:	13 00 20    	mov.w     #0x1, w3
    28e6:	81 18 dd    	sl.w      w3, w1, w1
    28e8:	81 80 ea    	com.w     w1, w1
    28ea:	81 00 61    	and.w     w2, w1, w1
    28ec:	01 08 78    	mov.w     w1, [w0]

000028ee <.L1>:
    28ee:	00 80 fa    	ulnk      
    28f0:	00 00 06    	return    

000028f2 <___digitalRead>:
    28f2:	02 00 fa    	lnk       #0x2
    28f4:	00 0f 78    	mov.w     w0, [w14]
    28f6:	1e 00 78    	mov.w     [w14], w0
    28f8:	10 00 78    	mov.w     [w0], w0
    28fa:	90 00 78    	mov.w     [w0], w1
    28fc:	1e 00 78    	mov.w     [w14], w0
    28fe:	60 40 90    	mov.b     [w0+6], w0
    2900:	00 80 fb    	ze        w0, w0
    2902:	12 00 20    	mov.w     #0x1, w2
    2904:	00 10 dd    	sl.w      w2, w0, w0
    2906:	00 80 60    	and.w     w1, w0, w0
    2908:	00 f0 a7    	btsc.w    w0, #0xf
    290a:	00 00 ea    	neg.w     w0, w0
    290c:	00 00 ea    	neg.w     w0, w0
    290e:	4f 00 de    	lsr.w     w0, #0xf, w0
    2910:	00 80 fa    	ulnk      
    2912:	00 00 06    	return    

00002914 <___analogRead>:
    2914:	02 00 fa    	lnk       #0x2
    2916:	00 0f 78    	mov.w     w0, [w14]
    2918:	1e 00 78    	mov.w     [w14], w0
    291a:	40 00 90    	mov.w     [w0+8], w0
    291c:	40 19 88    	mov.w     w0, 0x328
    291e:	20 23 a8    	bset.b    0x320, #0x1
    2920:	00 00 00    	nop       

00002922 <.L6>:
    2922:	00 19 80    	mov.w     0x320, w0
    2924:	61 00 60    	and.w     w0, #0x1, w0
    2926:	00 00 e0    	cp0.w     w0
    2928:	fc ff 32    	bra       Z, 0x2922 <.L6>
    292a:	00 18 80    	mov.w     0x300, w0
    292c:	00 80 fa    	ulnk      
    292e:	00 00 06    	return    

00002930 <_init_pin>:
    2930:	02 00 fa    	lnk       #0x2
    2932:	40 6d 20    	mov.w     #0x6d4, w0
    2934:	80 1f 78    	mov.w     w0, [w15++]
    2936:	47 01 20    	mov.w     #0x14, w7
    2938:	00 43 eb    	clr.b     w6
    293a:	80 82 eb    	setm.w    w5
    293c:	54 c0 b3    	mov.b     #0x5, w4
    293e:	80 01 eb    	clr.w     w3
    2940:	82 2d 20    	mov.w     #0x2d8, w2
    2942:	a1 2d 20    	mov.w     #0x2da, w1
    2944:	a0 83 20    	mov.w     #0x83a, w0
    2946:	08 01 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2948:	8f 87 e9    	dec2.w    w15, w15
    294a:	80 6d 20    	mov.w     #0x6d8, w0
    294c:	80 1f 78    	mov.w     w0, [w15++]
    294e:	97 01 20    	mov.w     #0x19, w7
    2950:	86 c0 b3    	mov.b     #0x8, w6
    2952:	80 82 eb    	setm.w    w5
    2954:	44 c0 b3    	mov.b     #0x4, w4
    2956:	80 01 eb    	clr.w     w3
    2958:	82 2d 20    	mov.w     #0x2d8, w2
    295a:	a1 2d 20    	mov.w     #0x2da, w1
    295c:	00 85 20    	mov.w     #0x850, w0
    295e:	fc 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2960:	8f 87 e9    	dec2.w    w15, w15
    2962:	a0 6c 20    	mov.w     #0x6ca, w0
    2964:	80 1f 78    	mov.w     w0, [w15++]
    2966:	a7 00 20    	mov.w     #0xa, w7
    2968:	00 43 eb    	clr.b     w6
    296a:	80 82 eb    	setm.w    w5
    296c:	44 c0 b3    	mov.b     #0x4, w4
    296e:	80 01 eb    	clr.w     w3
    2970:	82 2e 20    	mov.w     #0x2e8, w2
    2972:	a1 2e 20    	mov.w     #0x2ea, w1
    2974:	60 86 20    	mov.w     #0x866, w0
    2976:	f0 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2978:	8f 87 e9    	dec2.w    w15, w15
    297a:	00 6d 20    	mov.w     #0x6d0, w0
    297c:	80 1f 78    	mov.w     w0, [w15++]
    297e:	17 01 20    	mov.w     #0x11, w7
    2980:	86 c0 b3    	mov.b     #0x8, w6
    2982:	80 82 eb    	setm.w    w5
    2984:	54 c0 b3    	mov.b     #0x5, w4
    2986:	80 01 eb    	clr.w     w3
    2988:	82 2e 20    	mov.w     #0x2e8, w2
    298a:	a1 2e 20    	mov.w     #0x2ea, w1
    298c:	c0 87 20    	mov.w     #0x87c, w0
    298e:	e4 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2990:	8f 87 e9    	dec2.w    w15, w15
    2992:	c0 6d 20    	mov.w     #0x6dc, w0
    2994:	80 1f 78    	mov.w     w0, [w15++]
    2996:	d7 01 20    	mov.w     #0x1d, w7
    2998:	86 c0 b3    	mov.b     #0x8, w6
    299a:	f5 00 20    	mov.w     #0xf, w5
    299c:	f4 c0 b3    	mov.b     #0xf, w4
    299e:	23 4e 20    	mov.w     #0x4e2, w3
    29a0:	82 2c 20    	mov.w     #0x2c8, w2
    29a2:	a1 2c 20    	mov.w     #0x2ca, w1
    29a4:	20 89 20    	mov.w     #0x892, w0
    29a6:	d8 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    29a8:	8f 87 e9    	dec2.w    w15, w15
    29aa:	00 6d 20    	mov.w     #0x6d0, w0
    29ac:	80 1f 78    	mov.w     w0, [w15++]
    29ae:	07 01 20    	mov.w     #0x10, w7
    29b0:	00 43 eb    	clr.b     w6
    29b2:	80 82 eb    	setm.w    w5
    29b4:	34 c0 b3    	mov.b     #0x3, w4
    29b6:	80 01 eb    	clr.w     w3
    29b8:	82 2e 20    	mov.w     #0x2e8, w2
    29ba:	a1 2e 20    	mov.w     #0x2ea, w1
    29bc:	80 8a 20    	mov.w     #0x8a8, w0
    29be:	cc 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    29c0:	8f 87 e9    	dec2.w    w15, w15
    29c2:	20 6c 20    	mov.w     #0x6c2, w0
    29c4:	80 1f 78    	mov.w     w0, [w15++]
    29c6:	27 00 20    	mov.w     #0x2, w7
    29c8:	00 43 eb    	clr.b     w6
    29ca:	80 82 eb    	setm.w    w5
    29cc:	84 c0 b3    	mov.b     #0x8, w4
    29ce:	80 01 eb    	clr.w     w3
    29d0:	82 2d 20    	mov.w     #0x2d8, w2
    29d2:	a1 2d 20    	mov.w     #0x2da, w1
    29d4:	e0 8b 20    	mov.w     #0x8be, w0
    29d6:	c0 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    29d8:	8f 87 e9    	dec2.w    w15, w15
    29da:	c0 6c 20    	mov.w     #0x6cc, w0
    29dc:	80 1f 78    	mov.w     w0, [w15++]
    29de:	c7 00 20    	mov.w     #0xc, w7
    29e0:	00 43 eb    	clr.b     w6
    29e2:	80 82 eb    	setm.w    w5
    29e4:	b4 c0 b3    	mov.b     #0xb, w4
    29e6:	80 01 eb    	clr.w     w3
    29e8:	82 2d 20    	mov.w     #0x2d8, w2
    29ea:	a1 2d 20    	mov.w     #0x2da, w1
    29ec:	40 8d 20    	mov.w     #0x8d4, w0
    29ee:	b4 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    29f0:	8f 87 e9    	dec2.w    w15, w15
    29f2:	40 6c 20    	mov.w     #0x6c4, w0
    29f4:	80 1f 78    	mov.w     w0, [w15++]
    29f6:	47 00 20    	mov.w     #0x4, w7
    29f8:	00 43 eb    	clr.b     w6
    29fa:	80 82 eb    	setm.w    w5
    29fc:	94 c0 b3    	mov.b     #0x9, w4
    29fe:	80 01 eb    	clr.w     w3
    2a00:	82 2d 20    	mov.w     #0x2d8, w2
    2a02:	a1 2d 20    	mov.w     #0x2da, w1
    2a04:	a0 8e 20    	mov.w     #0x8ea, w0
    2a06:	a8 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a08:	8f 87 e9    	dec2.w    w15, w15
    2a0a:	20 6c 20    	mov.w     #0x6c2, w0
    2a0c:	80 1f 78    	mov.w     w0, [w15++]
    2a0e:	37 00 20    	mov.w     #0x3, w7
    2a10:	86 c0 b3    	mov.b     #0x8, w6
    2a12:	80 82 eb    	setm.w    w5
    2a14:	a4 c0 b3    	mov.b     #0xa, w4
    2a16:	80 01 eb    	clr.w     w3
    2a18:	82 2d 20    	mov.w     #0x2d8, w2
    2a1a:	a1 2d 20    	mov.w     #0x2da, w1
    2a1c:	00 90 20    	mov.w     #0x900, w0
    2a1e:	9c 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a20:	8f 87 e9    	dec2.w    w15, w15
    2a22:	a0 6c 20    	mov.w     #0x6ca, w0
    2a24:	80 1f 78    	mov.w     w0, [w15++]
    2a26:	b7 00 20    	mov.w     #0xb, w7
    2a28:	86 c0 b3    	mov.b     #0x8, w6
    2a2a:	80 82 eb    	setm.w    w5
    2a2c:	00 42 eb    	clr.b     w4
    2a2e:	80 01 eb    	clr.w     w3
    2a30:	82 2d 20    	mov.w     #0x2d8, w2
    2a32:	a1 2d 20    	mov.w     #0x2da, w1
    2a34:	60 91 20    	mov.w     #0x916, w0
    2a36:	90 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a38:	8f 87 e9    	dec2.w    w15, w15
    2a3a:	80 6d 20    	mov.w     #0x6d8, w0
    2a3c:	80 1f 78    	mov.w     w0, [w15++]
    2a3e:	87 01 20    	mov.w     #0x18, w7
    2a40:	00 43 eb    	clr.b     w6
    2a42:	80 82 eb    	setm.w    w5
    2a44:	14 c0 b3    	mov.b     #0x1, w4
    2a46:	80 01 eb    	clr.w     w3
    2a48:	82 2d 20    	mov.w     #0x2d8, w2
    2a4a:	a1 2d 20    	mov.w     #0x2da, w1
    2a4c:	c0 92 20    	mov.w     #0x92c, w0
    2a4e:	84 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a50:	8f 87 e9    	dec2.w    w15, w15
    2a52:	60 6d 20    	mov.w     #0x6d6, w0
    2a54:	80 1f 78    	mov.w     w0, [w15++]
    2a56:	77 01 20    	mov.w     #0x17, w7
    2a58:	86 c0 b3    	mov.b     #0x8, w6
    2a5a:	80 82 eb    	setm.w    w5
    2a5c:	24 c0 b3    	mov.b     #0x2, w4
    2a5e:	80 01 eb    	clr.w     w3
    2a60:	82 2d 20    	mov.w     #0x2d8, w2
    2a62:	a1 2d 20    	mov.w     #0x2da, w1
    2a64:	20 94 20    	mov.w     #0x942, w0
    2a66:	78 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a68:	8f 87 e9    	dec2.w    w15, w15
    2a6a:	60 6d 20    	mov.w     #0x6d6, w0
    2a6c:	80 1f 78    	mov.w     w0, [w15++]
    2a6e:	67 01 20    	mov.w     #0x16, w7
    2a70:	00 43 eb    	clr.b     w6
    2a72:	80 82 eb    	setm.w    w5
    2a74:	34 c0 b3    	mov.b     #0x3, w4
    2a76:	80 01 eb    	clr.w     w3
    2a78:	82 2d 20    	mov.w     #0x2d8, w2
    2a7a:	a1 2d 20    	mov.w     #0x2da, w1
    2a7c:	80 95 20    	mov.w     #0x958, w0
    2a7e:	6c 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a80:	8f 87 e9    	dec2.w    w15, w15
    2a82:	00 6c 20    	mov.w     #0x6c0, w0
    2a84:	80 1f 78    	mov.w     w0, [w15++]
    2a86:	80 03 eb    	clr.w     w7
    2a88:	00 43 eb    	clr.b     w6
    2a8a:	80 02 eb    	clr.w     w5
    2a8c:	00 42 eb    	clr.b     w4
    2a8e:	23 4e 20    	mov.w     #0x4e2, w3
    2a90:	82 2c 20    	mov.w     #0x2c8, w2
    2a92:	a1 2c 20    	mov.w     #0x2ca, w1
    2a94:	c0 9d 20    	mov.w     #0x9dc, w0
    2a96:	60 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a98:	8f 87 e9    	dec2.w    w15, w15
    2a9a:	00 6c 20    	mov.w     #0x6c0, w0
    2a9c:	80 1f 78    	mov.w     w0, [w15++]
    2a9e:	17 00 20    	mov.w     #0x1, w7
    2aa0:	86 c0 b3    	mov.b     #0x8, w6
    2aa2:	15 00 20    	mov.w     #0x1, w5
    2aa4:	14 c0 b3    	mov.b     #0x1, w4
    2aa6:	23 4e 20    	mov.w     #0x4e2, w3
    2aa8:	82 2c 20    	mov.w     #0x2c8, w2
    2aaa:	a1 2c 20    	mov.w     #0x2ca, w1
    2aac:	60 9c 20    	mov.w     #0x9c6, w0
    2aae:	54 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2ab0:	8f 87 e9    	dec2.w    w15, w15
    2ab2:	c0 6c 20    	mov.w     #0x6cc, w0
    2ab4:	80 1f 78    	mov.w     w0, [w15++]
    2ab6:	d7 00 20    	mov.w     #0xd, w7
    2ab8:	86 c0 b3    	mov.b     #0x8, w6
    2aba:	25 00 20    	mov.w     #0x2, w5
    2abc:	24 c0 b3    	mov.b     #0x2, w4
    2abe:	23 4e 20    	mov.w     #0x4e2, w3
    2ac0:	82 2c 20    	mov.w     #0x2c8, w2
    2ac2:	a1 2c 20    	mov.w     #0x2ca, w1
    2ac4:	00 9b 20    	mov.w     #0x9b0, w0
    2ac6:	48 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2ac8:	8f 87 e9    	dec2.w    w15, w15
    2aca:	00 00 eb    	clr.w     w0
    2acc:	80 1f 78    	mov.w     w0, [w15++]
    2ace:	80 83 eb    	setm.w    w7
    2ad0:	00 43 eb    	clr.b     w6
    2ad2:	35 00 20    	mov.w     #0x3, w5
    2ad4:	34 c0 b3    	mov.b     #0x3, w4
    2ad6:	23 4e 20    	mov.w     #0x4e2, w3
    2ad8:	82 2c 20    	mov.w     #0x2c8, w2
    2ada:	a1 2c 20    	mov.w     #0x2ca, w1
    2adc:	a0 99 20    	mov.w     #0x99a, w0
    2ade:	3c 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2ae0:	8f 87 e9    	dec2.w    w15, w15
    2ae2:	c0 6d 20    	mov.w     #0x6dc, w0
    2ae4:	80 1f 78    	mov.w     w0, [w15++]
    2ae6:	c7 01 20    	mov.w     #0x1c, w7
    2ae8:	00 43 eb    	clr.b     w6
    2aea:	45 00 20    	mov.w     #0x4, w5
    2aec:	44 c0 b3    	mov.b     #0x4, w4
    2aee:	23 4e 20    	mov.w     #0x4e2, w3
    2af0:	82 2c 20    	mov.w     #0x2c8, w2
    2af2:	a1 2c 20    	mov.w     #0x2ca, w1
    2af4:	40 98 20    	mov.w     #0x984, w0
    2af6:	30 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2af8:	8f 87 e9    	dec2.w    w15, w15
    2afa:	20 6d 20    	mov.w     #0x6d2, w0
    2afc:	80 1f 78    	mov.w     w0, [w15++]
    2afe:	27 01 20    	mov.w     #0x12, w7
    2b00:	00 43 eb    	clr.b     w6
    2b02:	55 00 20    	mov.w     #0x5, w5
    2b04:	54 c0 b3    	mov.b     #0x5, w4
    2b06:	23 4e 20    	mov.w     #0x4e2, w3
    2b08:	82 2c 20    	mov.w     #0x2c8, w2
    2b0a:	a1 2c 20    	mov.w     #0x2ca, w1
    2b0c:	e0 96 20    	mov.w     #0x96e, w0
    2b0e:	24 00 07    	rcall     0x2b58 <_pin_init> <L0> <.LFB4> <.LFE3>
    2b10:	8f 87 e9    	dec2.w    w15, w15
    2b12:	00 00 eb    	clr.w     w0
    2b14:	00 0f 78    	mov.w     w0, [w14]
    2b16:	07 00 37    	bra       0x2b26 <.L8>

00002b18 <.L9>:
    2b18:	1e 00 78    	mov.w     [w14], w0
    2b1a:	76 00 b9    	mul.su    w0, #0x16, w0
    2b1c:	80 00 78    	mov.w     w0, w1
    2b1e:	a0 83 20    	mov.w     #0x83a, w0
    2b20:	00 80 40    	add.w     w1, w0, w0
    2b22:	46 00 07    	rcall     0x2bb0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    2b24:	1e 0f e8    	inc.w     [w14], [w14]

00002b26 <.L8>:
    2b26:	1e 00 78    	mov.w     [w14], w0
    2b28:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    2b2a:	f6 ff 36    	bra       LEU, 0x2b18 <.L9>
    2b2c:	00 00 eb    	clr.w     w0
    2b2e:	00 0f 78    	mov.w     w0, [w14]
    2b30:	07 00 37    	bra       0x2b40 <.L10>

00002b32 <.L11>:
    2b32:	1e 00 78    	mov.w     [w14], w0
    2b34:	76 00 b9    	mul.su    w0, #0x16, w0
    2b36:	80 00 78    	mov.w     w0, w1
    2b38:	e0 96 20    	mov.w     #0x96e, w0
    2b3a:	00 80 40    	add.w     w1, w0, w0
    2b3c:	95 00 07    	rcall     0x2c68 <_pin_analogIn> <L0> <.LFB7> <.LFE6>
    2b3e:	1e 0f e8    	inc.w     [w14], [w14]

00002b40 <.L10>:
    2b40:	1e 00 78    	mov.w     [w14], w0
    2b42:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2b44:	f6 ff 36    	bra       LEU, 0x2b32 <.L11>
    2b46:	00 2e 20    	mov.w     #0x2e0, w0
    2b48:	00 19 88    	mov.w     w0, 0x320
    2b4a:	22 23 ef    	clr.w     0x322
    2b4c:	00 c4 20    	mov.w     #0xc40, w0
    2b4e:	20 19 88    	mov.w     w0, 0x324
    2b50:	28 23 ef    	clr.w     0x328
    2b52:	21 e3 a8    	bset.b    0x321, #0x7
    2b54:	00 80 fa    	ulnk      
    2b56:	00 00 06    	return    

00002b58 <_pin_init>:
    2b58:	10 00 fa    	lnk       #0x10
    2b5a:	00 0f 78    	mov.w     w0, [w14]
    2b5c:	11 07 98    	mov.w     w1, [w14+2]
    2b5e:	22 07 98    	mov.w     w2, [w14+4]
    2b60:	33 07 98    	mov.w     w3, [w14+6]
    2b62:	04 4f 98    	mov.b     w4, [w14+8]
    2b64:	55 07 98    	mov.w     w5, [w14+10]
    2b66:	46 4f 98    	mov.b     w6, [w14+12]
    2b68:	77 07 98    	mov.w     w7, [w14+14]
    2b6a:	1e 00 78    	mov.w     [w14], w0
    2b6c:	9e 00 90    	mov.w     [w14+2], w1
    2b6e:	01 08 78    	mov.w     w1, [w0]
    2b70:	1e 00 78    	mov.w     [w14], w0
    2b72:	ae 00 90    	mov.w     [w14+4], w1
    2b74:	11 00 98    	mov.w     w1, [w0+2]
    2b76:	1e 00 78    	mov.w     [w14], w0
    2b78:	be 00 90    	mov.w     [w14+6], w1
    2b7a:	21 00 98    	mov.w     w1, [w0+4]
    2b7c:	1e 00 78    	mov.w     [w14], w0
    2b7e:	8e 48 90    	mov.b     [w14+8], w1
    2b80:	61 40 98    	mov.b     w1, [w0+6]
    2b82:	1e 00 78    	mov.w     [w14], w0
    2b84:	de 00 90    	mov.w     [w14+10], w1
    2b86:	41 00 98    	mov.w     w1, [w0+8]
    2b88:	1e 00 78    	mov.w     [w14], w0
    2b8a:	ce 48 90    	mov.b     [w14+12], w1
    2b8c:	21 48 98    	mov.b     w1, [w0+10]
    2b8e:	fe 00 90    	mov.w     [w14+14], w1
    2b90:	1e 00 78    	mov.w     [w14], w0
    2b92:	61 00 98    	mov.w     w1, [w0+12]
    2b94:	1e 00 78    	mov.w     [w14], w0
    2b96:	ce b8 97    	mov.w     [w14-8], w1
    2b98:	71 00 98    	mov.w     w1, [w0+14]
    2b9a:	1e 00 78    	mov.w     [w14], w0
    2b9c:	80 00 eb    	clr.w     w1
    2b9e:	01 08 98    	mov.w     w1, [w0+16]
    2ba0:	1e 00 78    	mov.w     [w14], w0
    2ba2:	80 00 eb    	clr.w     w1
    2ba4:	11 08 98    	mov.w     w1, [w0+18]
    2ba6:	1e 00 78    	mov.w     [w14], w0
    2ba8:	80 00 eb    	clr.w     w1
    2baa:	21 08 98    	mov.w     w1, [w0+20]
    2bac:	00 80 fa    	ulnk      
    2bae:	00 00 06    	return    

00002bb0 <_pin_digitalIn>:
    2bb0:	02 00 fa    	lnk       #0x2
    2bb2:	00 0f 78    	mov.w     w0, [w14]
    2bb4:	1e 00 78    	mov.w     [w14], w0
    2bb6:	20 00 90    	mov.w     [w0+4], w0
    2bb8:	00 00 e0    	cp0.w     w0
    2bba:	0d 00 32    	bra       Z, 0x2bd6 <.L14>
    2bbc:	1e 00 78    	mov.w     [w14], w0
    2bbe:	20 00 90    	mov.w     [w0+4], w0
    2bc0:	9e 00 78    	mov.w     [w14], w1
    2bc2:	a1 00 90    	mov.w     [w1+4], w1
    2bc4:	11 01 78    	mov.w     [w1], w2
    2bc6:	9e 00 78    	mov.w     [w14], w1
    2bc8:	e1 40 90    	mov.b     [w1+6], w1
    2bca:	81 80 fb    	ze        w1, w1
    2bcc:	13 00 20    	mov.w     #0x1, w3
    2bce:	81 18 dd    	sl.w      w3, w1, w1
    2bd0:	81 80 ea    	com.w     w1, w1
    2bd2:	81 00 61    	and.w     w2, w1, w1
    2bd4:	01 08 78    	mov.w     w1, [w0]

00002bd6 <.L14>:
    2bd6:	1e 00 78    	mov.w     [w14], w0
    2bd8:	10 00 90    	mov.w     [w0+2], w0
    2bda:	9e 00 78    	mov.w     [w14], w1
    2bdc:	91 00 90    	mov.w     [w1+2], w1
    2bde:	11 01 78    	mov.w     [w1], w2
    2be0:	9e 00 78    	mov.w     [w14], w1
    2be2:	e1 40 90    	mov.b     [w1+6], w1
    2be4:	81 80 fb    	ze        w1, w1
    2be6:	13 00 20    	mov.w     #0x1, w3
    2be8:	81 18 dd    	sl.w      w3, w1, w1
    2bea:	82 80 70    	ior.w     w1, w2, w1
    2bec:	01 08 78    	mov.w     w1, [w0]
    2bee:	1e 00 78    	mov.w     [w14], w0
    2bf0:	80 00 eb    	clr.w     w1
    2bf2:	11 08 98    	mov.w     w1, [w0+18]
    2bf4:	1e 00 78    	mov.w     [w14], w0
    2bf6:	21 8f 22    	mov.w     #0x28f2, w1
    2bf8:	21 08 98    	mov.w     w1, [w0+20]
    2bfa:	00 80 fa    	ulnk      
    2bfc:	00 00 06    	return    

00002bfe <_pin_digitalOut>:
    2bfe:	02 00 fa    	lnk       #0x2
    2c00:	00 0f 78    	mov.w     w0, [w14]
    2c02:	1e 00 78    	mov.w     [w14], w0
    2c04:	20 00 90    	mov.w     [w0+4], w0
    2c06:	00 00 e0    	cp0.w     w0
    2c08:	0d 00 32    	bra       Z, 0x2c24 <.L16>
    2c0a:	1e 00 78    	mov.w     [w14], w0
    2c0c:	20 00 90    	mov.w     [w0+4], w0
    2c0e:	9e 00 78    	mov.w     [w14], w1
    2c10:	a1 00 90    	mov.w     [w1+4], w1
    2c12:	11 01 78    	mov.w     [w1], w2
    2c14:	9e 00 78    	mov.w     [w14], w1
    2c16:	e1 40 90    	mov.b     [w1+6], w1
    2c18:	81 80 fb    	ze        w1, w1
    2c1a:	13 00 20    	mov.w     #0x1, w3
    2c1c:	81 18 dd    	sl.w      w3, w1, w1
    2c1e:	81 80 ea    	com.w     w1, w1
    2c20:	81 00 61    	and.w     w2, w1, w1
    2c22:	01 08 78    	mov.w     w1, [w0]

00002c24 <.L16>:
    2c24:	1e 00 78    	mov.w     [w14], w0
    2c26:	10 00 78    	mov.w     [w0], w0
    2c28:	9e 00 78    	mov.w     [w14], w1
    2c2a:	91 00 78    	mov.w     [w1], w1
    2c2c:	11 01 78    	mov.w     [w1], w2
    2c2e:	9e 00 78    	mov.w     [w14], w1
    2c30:	e1 40 90    	mov.b     [w1+6], w1
    2c32:	81 80 fb    	ze        w1, w1
    2c34:	13 00 20    	mov.w     #0x1, w3
    2c36:	81 18 dd    	sl.w      w3, w1, w1
    2c38:	81 80 ea    	com.w     w1, w1
    2c3a:	81 00 61    	and.w     w2, w1, w1
    2c3c:	01 08 78    	mov.w     w1, [w0]
    2c3e:	1e 00 78    	mov.w     [w14], w0
    2c40:	10 00 90    	mov.w     [w0+2], w0
    2c42:	9e 00 78    	mov.w     [w14], w1
    2c44:	91 00 90    	mov.w     [w1+2], w1
    2c46:	11 01 78    	mov.w     [w1], w2
    2c48:	9e 00 78    	mov.w     [w14], w1
    2c4a:	e1 40 90    	mov.b     [w1+6], w1
    2c4c:	81 80 fb    	ze        w1, w1
    2c4e:	13 00 20    	mov.w     #0x1, w3
    2c50:	81 18 dd    	sl.w      w3, w1, w1
    2c52:	81 80 ea    	com.w     w1, w1
    2c54:	81 00 61    	and.w     w2, w1, w1
    2c56:	01 08 78    	mov.w     w1, [w0]
    2c58:	1e 00 78    	mov.w     [w14], w0
    2c5a:	e1 8a 22    	mov.w     #0x28ae, w1
    2c5c:	11 08 98    	mov.w     w1, [w0+18]
    2c5e:	1e 00 78    	mov.w     [w14], w0
    2c60:	21 8f 22    	mov.w     #0x28f2, w1
    2c62:	21 08 98    	mov.w     w1, [w0+20]
    2c64:	00 80 fa    	ulnk      
    2c66:	00 00 06    	return    

00002c68 <_pin_analogIn>:
    2c68:	02 00 fa    	lnk       #0x2
    2c6a:	00 0f 78    	mov.w     w0, [w14]
    2c6c:	1e 00 78    	mov.w     [w14], w0
    2c6e:	20 00 90    	mov.w     [w0+4], w0
    2c70:	00 00 e0    	cp0.w     w0
    2c72:	1f 00 32    	bra       Z, 0x2cb2 <.L20>
    2c74:	1e 00 78    	mov.w     [w14], w0
    2c76:	10 00 90    	mov.w     [w0+2], w0
    2c78:	9e 00 78    	mov.w     [w14], w1
    2c7a:	91 00 90    	mov.w     [w1+2], w1
    2c7c:	11 01 78    	mov.w     [w1], w2
    2c7e:	9e 00 78    	mov.w     [w14], w1
    2c80:	e1 40 90    	mov.b     [w1+6], w1
    2c82:	81 80 fb    	ze        w1, w1
    2c84:	13 00 20    	mov.w     #0x1, w3
    2c86:	81 18 dd    	sl.w      w3, w1, w1
    2c88:	82 80 70    	ior.w     w1, w2, w1
    2c8a:	01 08 78    	mov.w     w1, [w0]
    2c8c:	1e 00 78    	mov.w     [w14], w0
    2c8e:	20 00 90    	mov.w     [w0+4], w0
    2c90:	9e 00 78    	mov.w     [w14], w1
    2c92:	a1 00 90    	mov.w     [w1+4], w1
    2c94:	11 01 78    	mov.w     [w1], w2
    2c96:	9e 00 78    	mov.w     [w14], w1
    2c98:	e1 40 90    	mov.b     [w1+6], w1
    2c9a:	81 80 fb    	ze        w1, w1
    2c9c:	13 00 20    	mov.w     #0x1, w3
    2c9e:	81 18 dd    	sl.w      w3, w1, w1
    2ca0:	82 80 70    	ior.w     w1, w2, w1
    2ca2:	01 08 78    	mov.w     w1, [w0]
    2ca4:	1e 00 78    	mov.w     [w14], w0
    2ca6:	80 00 eb    	clr.w     w1
    2ca8:	11 08 98    	mov.w     w1, [w0+18]
    2caa:	1e 00 78    	mov.w     [w14], w0
    2cac:	41 91 22    	mov.w     #0x2914, w1
    2cae:	21 08 98    	mov.w     w1, [w0+20]
    2cb0:	01 00 37    	bra       0x2cb4 <.L17>

00002cb2 <.L20>:
    2cb2:	00 00 00    	nop       

00002cb4 <.L17>:
    2cb4:	00 80 fa    	ulnk      
    2cb6:	00 00 06    	return    

00002cb8 <_pin_set>:
    2cb8:	02 00 fa    	lnk       #0x2
    2cba:	00 0f 78    	mov.w     w0, [w14]
    2cbc:	1e 00 78    	mov.w     [w14], w0
    2cbe:	90 08 90    	mov.w     [w0+18], w1
    2cc0:	e0 8a 22    	mov.w     #0x28ae, w0
    2cc2:	80 8f 50    	sub.w     w1, w0, [w15]
    2cc4:	0c 00 3a    	bra       NZ, 0x2cde <.L21>
    2cc6:	1e 00 78    	mov.w     [w14], w0
    2cc8:	10 00 78    	mov.w     [w0], w0
    2cca:	9e 00 78    	mov.w     [w14], w1
    2ccc:	91 00 78    	mov.w     [w1], w1
    2cce:	11 01 78    	mov.w     [w1], w2
    2cd0:	9e 00 78    	mov.w     [w14], w1
    2cd2:	e1 40 90    	mov.b     [w1+6], w1
    2cd4:	81 80 fb    	ze        w1, w1
    2cd6:	13 00 20    	mov.w     #0x1, w3
    2cd8:	81 18 dd    	sl.w      w3, w1, w1
    2cda:	82 80 70    	ior.w     w1, w2, w1
    2cdc:	01 08 78    	mov.w     w1, [w0]

00002cde <.L21>:
    2cde:	00 80 fa    	ulnk      
    2ce0:	00 00 06    	return    

00002ce2 <_pin_clear>:
    2ce2:	02 00 fa    	lnk       #0x2
    2ce4:	00 0f 78    	mov.w     w0, [w14]
    2ce6:	1e 00 78    	mov.w     [w14], w0
    2ce8:	90 08 90    	mov.w     [w0+18], w1
    2cea:	e0 8a 22    	mov.w     #0x28ae, w0
    2cec:	80 8f 50    	sub.w     w1, w0, [w15]
    2cee:	0d 00 3a    	bra       NZ, 0x2d0a <.L23>
    2cf0:	1e 00 78    	mov.w     [w14], w0
    2cf2:	10 00 78    	mov.w     [w0], w0
    2cf4:	9e 00 78    	mov.w     [w14], w1
    2cf6:	91 00 78    	mov.w     [w1], w1
    2cf8:	11 01 78    	mov.w     [w1], w2
    2cfa:	9e 00 78    	mov.w     [w14], w1
    2cfc:	e1 40 90    	mov.b     [w1+6], w1
    2cfe:	81 80 fb    	ze        w1, w1
    2d00:	13 00 20    	mov.w     #0x1, w3
    2d02:	81 18 dd    	sl.w      w3, w1, w1
    2d04:	81 80 ea    	com.w     w1, w1
    2d06:	81 00 61    	and.w     w2, w1, w1
    2d08:	01 08 78    	mov.w     w1, [w0]

00002d0a <.L23>:
    2d0a:	00 80 fa    	ulnk      
    2d0c:	00 00 06    	return    

00002d0e <_pin_toggle>:
    2d0e:	02 00 fa    	lnk       #0x2
    2d10:	00 0f 78    	mov.w     w0, [w14]
    2d12:	1e 00 78    	mov.w     [w14], w0
    2d14:	90 08 90    	mov.w     [w0+18], w1
    2d16:	e0 8a 22    	mov.w     #0x28ae, w0
    2d18:	80 8f 50    	sub.w     w1, w0, [w15]
    2d1a:	0c 00 3a    	bra       NZ, 0x2d34 <.L25>
    2d1c:	1e 00 78    	mov.w     [w14], w0
    2d1e:	10 00 78    	mov.w     [w0], w0
    2d20:	9e 00 78    	mov.w     [w14], w1
    2d22:	91 00 78    	mov.w     [w1], w1
    2d24:	11 01 78    	mov.w     [w1], w2
    2d26:	9e 00 78    	mov.w     [w14], w1
    2d28:	e1 40 90    	mov.b     [w1+6], w1
    2d2a:	81 80 fb    	ze        w1, w1
    2d2c:	13 00 20    	mov.w     #0x1, w3
    2d2e:	81 18 dd    	sl.w      w3, w1, w1
    2d30:	81 00 69    	xor.w     w2, w1, w1
    2d32:	01 08 78    	mov.w     w1, [w0]

00002d34 <.L25>:
    2d34:	00 80 fa    	ulnk      
    2d36:	00 00 06    	return    

00002d38 <_pin_write>:
    2d38:	04 00 fa    	lnk       #0x4
    2d3a:	00 0f 78    	mov.w     w0, [w14]
    2d3c:	11 07 98    	mov.w     w1, [w14+2]
    2d3e:	1e 00 78    	mov.w     [w14], w0
    2d40:	10 08 90    	mov.w     [w0+18], w0
    2d42:	00 00 e0    	cp0.w     w0
    2d44:	05 00 32    	bra       Z, 0x2d50 <.L27>
    2d46:	1e 00 78    	mov.w     [w14], w0
    2d48:	10 09 90    	mov.w     [w0+18], w2
    2d4a:	9e 00 90    	mov.w     [w14+2], w1
    2d4c:	1e 00 78    	mov.w     [w14], w0
    2d4e:	02 00 01    	call      w2

00002d50 <.L27>:
    2d50:	00 80 fa    	ulnk      
    2d52:	00 00 06    	return    

00002d54 <_pin_read>:
    2d54:	02 00 fa    	lnk       #0x2
    2d56:	00 0f 78    	mov.w     w0, [w14]
    2d58:	1e 00 78    	mov.w     [w14], w0
    2d5a:	20 08 90    	mov.w     [w0+20], w0
    2d5c:	00 00 e0    	cp0.w     w0
    2d5e:	05 00 32    	bra       Z, 0x2d6a <.L30>
    2d60:	1e 00 78    	mov.w     [w14], w0
    2d62:	a0 08 90    	mov.w     [w0+20], w1
    2d64:	1e 00 78    	mov.w     [w14], w0
    2d66:	01 00 01    	call      w1
    2d68:	01 00 37    	bra       0x2d6c <.L31>

00002d6a <.L30>:
    2d6a:	00 80 eb    	setm.w    w0

00002d6c <.L31>:
    2d6c:	00 80 fa    	ulnk      
    2d6e:	00 00 06    	return    

00002d70 <_init_ui>:
    2d70:	00 00 fa    	lnk       #0x0
    2d72:	74 c0 b3    	mov.b     #0x7, w4
    2d74:	63 4e 20    	mov.w     #0x4e6, w3
    2d76:	82 2d 20    	mov.w     #0x2d8, w2
    2d78:	a1 2d 20    	mov.w     #0x2da, w1
    2d7a:	00 80 20    	mov.w     #0x800, w0
    2d7c:	20 00 07    	rcall     0x2dbe <_led_init> <L0> <.LFB1> <.LFE0>
    2d7e:	00 42 eb    	clr.b     w4
    2d80:	a3 4e 20    	mov.w     #0x4ea, w3
    2d82:	82 2e 20    	mov.w     #0x2e8, w2
    2d84:	a1 2e 20    	mov.w     #0x2ea, w1
    2d86:	80 80 20    	mov.w     #0x808, w0
    2d88:	1a 00 07    	rcall     0x2dbe <_led_init> <L0> <.LFB1> <.LFE0>
    2d8a:	14 c0 b3    	mov.b     #0x1, w4
    2d8c:	a3 4e 20    	mov.w     #0x4ea, w3
    2d8e:	82 2e 20    	mov.w     #0x2e8, w2
    2d90:	a1 2e 20    	mov.w     #0x2ea, w1
    2d92:	00 81 20    	mov.w     #0x810, w0
    2d94:	14 00 07    	rcall     0x2dbe <_led_init> <L0> <.LFB1> <.LFE0>
    2d96:	f4 c0 b3    	mov.b     #0xf, w4
    2d98:	43 4e 20    	mov.w     #0x4e4, w3
    2d9a:	02 2d 20    	mov.w     #0x2d0, w2
    2d9c:	21 2d 20    	mov.w     #0x2d2, w1
    2d9e:	80 81 20    	mov.w     #0x818, w0
    2da0:	ad 00 07    	rcall     0x2efc <_sw_init> <L0> <.LFB7> <.LFE6>
    2da2:	c4 c0 b3    	mov.b     #0xc, w4
    2da4:	43 4e 20    	mov.w     #0x4e4, w3
    2da6:	02 2d 20    	mov.w     #0x2d0, w2
    2da8:	21 2d 20    	mov.w     #0x2d2, w1
    2daa:	00 82 20    	mov.w     #0x820, w0
    2dac:	a7 00 07    	rcall     0x2efc <_sw_init> <L0> <.LFB7> <.LFE6>
    2dae:	c4 c0 b3    	mov.b     #0xc, w4
    2db0:	23 4e 20    	mov.w     #0x4e2, w3
    2db2:	82 2c 20    	mov.w     #0x2c8, w2
    2db4:	a1 2c 20    	mov.w     #0x2ca, w1
    2db6:	80 82 20    	mov.w     #0x828, w0
    2db8:	a1 00 07    	rcall     0x2efc <_sw_init> <L0> <.LFB7> <.LFE6>
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
            (uint16_t *)&ANSB, 12);
}
    2dba:	00 80 fa    	ulnk      
    2dbc:	00 00 06    	return    

00002dbe <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    2dbe:	0a 00 fa    	lnk       #0xa
    2dc0:	00 0f 78    	mov.w     w0, [w14]
    2dc2:	11 07 98    	mov.w     w1, [w14+2]
    2dc4:	22 07 98    	mov.w     w2, [w14+4]
    2dc6:	33 07 98    	mov.w     w3, [w14+6]
    2dc8:	04 4f 98    	mov.b     w4, [w14+8]
    self->port = port;
    2dca:	1e 00 78    	mov.w     [w14], w0
    2dcc:	9e 00 90    	mov.w     [w14+2], w1
    2dce:	01 08 78    	mov.w     w1, [w0]
    self->tris = tris;
    2dd0:	1e 00 78    	mov.w     [w14], w0
    2dd2:	ae 00 90    	mov.w     [w14+4], w1
    2dd4:	11 00 98    	mov.w     w1, [w0+2]
    self->ans = ans;
    2dd6:	1e 00 78    	mov.w     [w14], w0
    2dd8:	be 00 90    	mov.w     [w14+6], w1
    2dda:	21 00 98    	mov.w     w1, [w0+4]
    self->bit = bit;
    2ddc:	1e 00 78    	mov.w     [w14], w0
    2dde:	8e 48 90    	mov.b     [w14+8], w1
    2de0:	61 40 98    	mov.b     w1, [w0+6]

    bitclear(self->ans, self->bit);
    2de2:	1e 00 78    	mov.w     [w14], w0
    2de4:	20 00 90    	mov.w     [w0+4], w0
    2de6:	9e 00 78    	mov.w     [w14], w1
    2de8:	a1 00 90    	mov.w     [w1+4], w1
    2dea:	11 01 78    	mov.w     [w1], w2
    2dec:	9e 00 78    	mov.w     [w14], w1
    2dee:	e1 40 90    	mov.b     [w1+6], w1
    2df0:	81 80 fb    	ze        w1, w1
    2df2:	13 00 20    	mov.w     #0x1, w3
    2df4:	81 18 dd    	sl.w      w3, w1, w1
    2df6:	81 80 ea    	com.w     w1, w1
    2df8:	81 00 61    	and.w     w2, w1, w1
    2dfa:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->port, self->bit);
    2dfc:	1e 00 78    	mov.w     [w14], w0
    2dfe:	10 00 78    	mov.w     [w0], w0
    2e00:	9e 00 78    	mov.w     [w14], w1
    2e02:	91 00 78    	mov.w     [w1], w1
    2e04:	11 01 78    	mov.w     [w1], w2
    2e06:	9e 00 78    	mov.w     [w14], w1
    2e08:	e1 40 90    	mov.b     [w1+6], w1
    2e0a:	81 80 fb    	ze        w1, w1
    2e0c:	13 00 20    	mov.w     #0x1, w3
    2e0e:	81 18 dd    	sl.w      w3, w1, w1
    2e10:	81 80 ea    	com.w     w1, w1
    2e12:	81 00 61    	and.w     w2, w1, w1
    2e14:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->tris, self->bit);
    2e16:	1e 00 78    	mov.w     [w14], w0
    2e18:	10 00 90    	mov.w     [w0+2], w0
    2e1a:	9e 00 78    	mov.w     [w14], w1
    2e1c:	91 00 90    	mov.w     [w1+2], w1
    2e1e:	11 01 78    	mov.w     [w1], w2
    2e20:	9e 00 78    	mov.w     [w14], w1
    2e22:	e1 40 90    	mov.b     [w1+6], w1
    2e24:	81 80 fb    	ze        w1, w1
    2e26:	13 00 20    	mov.w     #0x1, w3
    2e28:	81 18 dd    	sl.w      w3, w1, w1
    2e2a:	81 80 ea    	com.w     w1, w1
    2e2c:	81 00 61    	and.w     w2, w1, w1
    2e2e:	01 08 78    	mov.w     w1, [w0]
}
    2e30:	00 80 fa    	ulnk      
    2e32:	00 00 06    	return    

00002e34 <_led_on>:

void led_on(_LED *self) {
    2e34:	02 00 fa    	lnk       #0x2
    2e36:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->port, self->bit);
    2e38:	1e 00 78    	mov.w     [w14], w0
    2e3a:	10 00 78    	mov.w     [w0], w0
    2e3c:	9e 00 78    	mov.w     [w14], w1
    2e3e:	91 00 78    	mov.w     [w1], w1
    2e40:	11 01 78    	mov.w     [w1], w2
    2e42:	9e 00 78    	mov.w     [w14], w1
    2e44:	e1 40 90    	mov.b     [w1+6], w1
    2e46:	81 80 fb    	ze        w1, w1
    2e48:	13 00 20    	mov.w     #0x1, w3
    2e4a:	81 18 dd    	sl.w      w3, w1, w1
    2e4c:	82 80 70    	ior.w     w1, w2, w1
    2e4e:	01 08 78    	mov.w     w1, [w0]
}
    2e50:	00 80 fa    	ulnk      
    2e52:	00 00 06    	return    

00002e54 <_led_off>:

void led_off(_LED *self) {
    2e54:	02 00 fa    	lnk       #0x2
    2e56:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->port, self->bit);
    2e58:	1e 00 78    	mov.w     [w14], w0
    2e5a:	10 00 78    	mov.w     [w0], w0
    2e5c:	9e 00 78    	mov.w     [w14], w1
    2e5e:	91 00 78    	mov.w     [w1], w1
    2e60:	11 01 78    	mov.w     [w1], w2
    2e62:	9e 00 78    	mov.w     [w14], w1
    2e64:	e1 40 90    	mov.b     [w1+6], w1
    2e66:	81 80 fb    	ze        w1, w1
    2e68:	13 00 20    	mov.w     #0x1, w3
    2e6a:	81 18 dd    	sl.w      w3, w1, w1
    2e6c:	81 80 ea    	com.w     w1, w1
    2e6e:	81 00 61    	and.w     w2, w1, w1
    2e70:	01 08 78    	mov.w     w1, [w0]
}
    2e72:	00 80 fa    	ulnk      
    2e74:	00 00 06    	return    

00002e76 <_led_toggle>:

void led_toggle(_LED *self) {
    2e76:	02 00 fa    	lnk       #0x2
    2e78:	00 0f 78    	mov.w     w0, [w14]
    bitflip(self->port, self->bit);
    2e7a:	1e 00 78    	mov.w     [w14], w0
    2e7c:	10 00 78    	mov.w     [w0], w0
    2e7e:	9e 00 78    	mov.w     [w14], w1
    2e80:	91 00 78    	mov.w     [w1], w1
    2e82:	11 01 78    	mov.w     [w1], w2
    2e84:	9e 00 78    	mov.w     [w14], w1
    2e86:	e1 40 90    	mov.b     [w1+6], w1
    2e88:	81 80 fb    	ze        w1, w1
    2e8a:	13 00 20    	mov.w     #0x1, w3
    2e8c:	81 18 dd    	sl.w      w3, w1, w1
    2e8e:	81 00 69    	xor.w     w2, w1, w1
    2e90:	01 08 78    	mov.w     w1, [w0]
}
    2e92:	00 80 fa    	ulnk      
    2e94:	00 00 06    	return    

00002e96 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    2e96:	04 00 fa    	lnk       #0x4
    2e98:	00 0f 78    	mov.w     w0, [w14]
    2e9a:	11 07 98    	mov.w     w1, [w14+2]
    if (val)
    2e9c:	1e 00 90    	mov.w     [w14+2], w0
    2e9e:	00 00 e0    	cp0.w     w0
    2ea0:	0d 00 32    	bra       Z, 0x2ebc <.L7>
        bitset(self->port, self->bit);
    2ea2:	1e 00 78    	mov.w     [w14], w0
    2ea4:	10 00 78    	mov.w     [w0], w0
    2ea6:	9e 00 78    	mov.w     [w14], w1
    2ea8:	91 00 78    	mov.w     [w1], w1
    2eaa:	11 01 78    	mov.w     [w1], w2
    2eac:	9e 00 78    	mov.w     [w14], w1
    2eae:	e1 40 90    	mov.b     [w1+6], w1
    2eb0:	81 80 fb    	ze        w1, w1
    2eb2:	13 00 20    	mov.w     #0x1, w3
    2eb4:	81 18 dd    	sl.w      w3, w1, w1
    2eb6:	82 80 70    	ior.w     w1, w2, w1
    2eb8:	01 08 78    	mov.w     w1, [w0]
    2eba:	0d 00 37    	bra       0x2ed6 <.L6>

00002ebc <.L7>:
    else
        bitclear(self->port, self->bit);
    2ebc:	1e 00 78    	mov.w     [w14], w0
    2ebe:	10 00 78    	mov.w     [w0], w0
    2ec0:	9e 00 78    	mov.w     [w14], w1
    2ec2:	91 00 78    	mov.w     [w1], w1
    2ec4:	11 01 78    	mov.w     [w1], w2
    2ec6:	9e 00 78    	mov.w     [w14], w1
    2ec8:	e1 40 90    	mov.b     [w1+6], w1
    2eca:	81 80 fb    	ze        w1, w1
    2ecc:	13 00 20    	mov.w     #0x1, w3
    2ece:	81 18 dd    	sl.w      w3, w1, w1
    2ed0:	81 80 ea    	com.w     w1, w1
    2ed2:	81 00 61    	and.w     w2, w1, w1
    2ed4:	01 08 78    	mov.w     w1, [w0]

00002ed6 <.L6>:
}
    2ed6:	00 80 fa    	ulnk      
    2ed8:	00 00 06    	return    

00002eda <_led_read>:

uint16_t led_read(_LED *self) {
    2eda:	02 00 fa    	lnk       #0x2
    2edc:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    2ede:	1e 00 78    	mov.w     [w14], w0
    2ee0:	10 00 78    	mov.w     [w0], w0
    2ee2:	90 00 78    	mov.w     [w0], w1
    2ee4:	1e 00 78    	mov.w     [w14], w0
    2ee6:	60 40 90    	mov.b     [w0+6], w0
    2ee8:	00 80 fb    	ze        w0, w0
    2eea:	12 00 20    	mov.w     #0x1, w2
    2eec:	00 10 dd    	sl.w      w2, w0, w0
    2eee:	00 80 60    	and.w     w1, w0, w0
    2ef0:	00 f0 a7    	btsc.w    w0, #0xf
    2ef2:	00 00 ea    	neg.w     w0, w0
    2ef4:	00 00 ea    	neg.w     w0, w0
    2ef6:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    2ef8:	00 80 fa    	ulnk      
    2efa:	00 00 06    	return    

00002efc <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    2efc:	0a 00 fa    	lnk       #0xa
    2efe:	00 0f 78    	mov.w     w0, [w14]
    2f00:	11 07 98    	mov.w     w1, [w14+2]
    2f02:	22 07 98    	mov.w     w2, [w14+4]
    2f04:	33 07 98    	mov.w     w3, [w14+6]
    2f06:	04 4f 98    	mov.b     w4, [w14+8]
    self->port = port;
    2f08:	1e 00 78    	mov.w     [w14], w0
    2f0a:	9e 00 90    	mov.w     [w14+2], w1
    2f0c:	01 08 78    	mov.w     w1, [w0]
    self->tris = tris;
    2f0e:	1e 00 78    	mov.w     [w14], w0
    2f10:	ae 00 90    	mov.w     [w14+4], w1
    2f12:	11 00 98    	mov.w     w1, [w0+2]
    self->ans = ans;
    2f14:	1e 00 78    	mov.w     [w14], w0
    2f16:	be 00 90    	mov.w     [w14+6], w1
    2f18:	21 00 98    	mov.w     w1, [w0+4]
    self->bit = bit;
    2f1a:	1e 00 78    	mov.w     [w14], w0
    2f1c:	8e 48 90    	mov.b     [w14+8], w1
    2f1e:	61 40 98    	mov.b     w1, [w0+6]

    bitclear(self->ans, self->bit);
    2f20:	1e 00 78    	mov.w     [w14], w0
    2f22:	20 00 90    	mov.w     [w0+4], w0
    2f24:	9e 00 78    	mov.w     [w14], w1
    2f26:	a1 00 90    	mov.w     [w1+4], w1
    2f28:	11 01 78    	mov.w     [w1], w2
    2f2a:	9e 00 78    	mov.w     [w14], w1
    2f2c:	e1 40 90    	mov.b     [w1+6], w1
    2f2e:	81 80 fb    	ze        w1, w1
    2f30:	13 00 20    	mov.w     #0x1, w3
    2f32:	81 18 dd    	sl.w      w3, w1, w1
    2f34:	81 80 ea    	com.w     w1, w1
    2f36:	81 00 61    	and.w     w2, w1, w1
    2f38:	01 08 78    	mov.w     w1, [w0]
    bitset(self->tris, self->bit);
    2f3a:	1e 00 78    	mov.w     [w14], w0
    2f3c:	10 00 90    	mov.w     [w0+2], w0
    2f3e:	9e 00 78    	mov.w     [w14], w1
    2f40:	91 00 90    	mov.w     [w1+2], w1
    2f42:	11 01 78    	mov.w     [w1], w2
    2f44:	9e 00 78    	mov.w     [w14], w1
    2f46:	e1 40 90    	mov.b     [w1+6], w1
    2f48:	81 80 fb    	ze        w1, w1
    2f4a:	13 00 20    	mov.w     #0x1, w3
    2f4c:	81 18 dd    	sl.w      w3, w1, w1
    2f4e:	82 80 70    	ior.w     w1, w2, w1
    2f50:	01 08 78    	mov.w     w1, [w0]
}
    2f52:	00 80 fa    	ulnk      
    2f54:	00 00 06    	return    

00002f56 <_sw_read>:

uint16_t sw_read(_SW *self) {
    2f56:	02 00 fa    	lnk       #0x2
    2f58:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    2f5a:	1e 00 78    	mov.w     [w14], w0
    2f5c:	10 00 78    	mov.w     [w0], w0
    2f5e:	90 00 78    	mov.w     [w0], w1
    2f60:	1e 00 78    	mov.w     [w14], w0
    2f62:	60 40 90    	mov.b     [w0+6], w0
    2f64:	00 80 fb    	ze        w0, w0
    2f66:	12 00 20    	mov.w     #0x1, w2
    2f68:	00 10 dd    	sl.w      w2, w0, w0
    2f6a:	00 80 60    	and.w     w1, w0, w0
    2f6c:	00 f0 a7    	btsc.w    w0, #0xf
    2f6e:	00 00 ea    	neg.w     w0, w0
    2f70:	00 00 ea    	neg.w     w0, w0
    2f72:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    2f74:	00 80 fa    	ulnk      
    2f76:	00 00 06    	return    

00002f78 <_coinCheck>:
    2f78:	04 00 fa    	lnk       #0x4
    2f7a:	00 80 20    	mov.w     #0x800, w0
    2f7c:	5b ff 07    	rcall     0x2e34 <_led_on> <L0> <.LFB2> <.LFE1>
    2f7e:	10 00 20    	mov.w     #0x1, w0
    2f80:	00 0f 78    	mov.w     w0, [w14]
    2f82:	10 00 20    	mov.w     #0x1, w0
    2f84:	10 07 98    	mov.w     w0, [w14+2]
    2f86:	10 00 20    	mov.w     #0x1, w0
    2f88:	00 0f 78    	mov.w     w0, [w14]
    2f8a:	0b 00 37    	bra       0x2fa2 <.L2>

00002f8c <.L5>:
    2f8c:	10 00 20    	mov.w     #0x1, w0
    2f8e:	10 07 98    	mov.w     w0, [w14+2]
    2f90:	03 00 37    	bra       0x2f98 <.L3>

00002f92 <.L4>:
    2f92:	1e 00 90    	mov.w     [w14+2], w0
    2f94:	00 00 e8    	inc.w     w0, w0
    2f96:	10 07 98    	mov.w     w0, [w14+2]

00002f98 <.L3>:
    2f98:	9e 00 90    	mov.w     [w14+2], w1
    2f9a:	c0 cc 20    	mov.w     #0xccc, w0
    2f9c:	80 8f 50    	sub.w     w1, w0, [w15]
    2f9e:	f9 ff 34    	bra       LE, 0x2f92 <.L4>
    2fa0:	1e 0f e8    	inc.w     [w14], [w14]

00002fa2 <.L2>:
    2fa2:	c0 cc 20    	mov.w     #0xccc, w0
    2fa4:	9e 00 78    	mov.w     [w14], w1
    2fa6:	80 8f 50    	sub.w     w1, w0, [w15]
    2fa8:	f1 ff 34    	bra       LE, 0x2f8c <.L5>
    2faa:	00 80 20    	mov.w     #0x800, w0
    2fac:	53 ff 07    	rcall     0x2e54 <_led_off> <L0> <.LFB3> <.LFE2>
    2fae:	34 28 ef    	clr.w     0x834
    2fb0:	00 80 fa    	ulnk      
    2fb2:	00 00 06    	return    

00002fb4 <_main>:
    2fb4:	00 00 fa    	lnk       #0x0
    2fb6:	00 10 20    	mov.w     #0x100, w0
    2fb8:	20 3a 88    	mov.w     w0, 0x744
    2fba:	f2 f4 07    	rcall     0x19a0 <_init_uart> <L0> <.LFB15> <.LFE14>
    2fbc:	b9 fc 07    	rcall     0x2930 <_init_pin> <L0> <.LFB3> <.LFE2>
    2fbe:	d8 fe 07    	rcall     0x2d70 <_init_ui> <L0> <.L0> <.LFB0> <.LFE12> <.Letext0> <.Ltext0>
    2fc0:	8c fa 07    	rcall     0x24da <_init_timer> <L0> <.LFB6> <.LFE5>
    2fc2:	80 8a 20    	mov.w     #0x8a8, w0
    2fc4:	80 41 88    	mov.w     w0, 0x830
    2fc6:	80 41 80    	mov.w     0x830, w0
    2fc8:	f3 fd 07    	rcall     0x2bb0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    2fca:	03 00 37    	bra       0x2fd2 <.L8>

00002fcc <.L9>:
    2fcc:	00 00 00    	nop       
    2fce:	01 00 37    	bra       0x2fd2 <.L8>

00002fd0 <.L10>:
    2fd0:	00 00 00    	nop       

00002fd2 <.L8>:
    2fd2:	80 41 80    	mov.w     0x830, w0
    2fd4:	bf fe 07    	rcall     0x2d54 <_pin_read> <L0> <.LFB12> <.LFE11>
    2fd6:	90 41 88    	mov.w     w0, 0x832
    2fd8:	90 41 80    	mov.w     0x832, w0
    2fda:	00 00 e0    	cp0.w     w0
    2fdc:	f7 ff 3a    	bra       NZ, 0x2fcc <.L9>
    2fde:	a0 41 80    	mov.w     0x834, w0
    2fe0:	00 00 e0    	cp0.w     w0
    2fe2:	f6 ff 3a    	bra       NZ, 0x2fd0 <.L10>
    2fe4:	10 00 20    	mov.w     #0x1, w0
    2fe6:	a0 41 88    	mov.w     w0, 0x834
    2fe8:	c7 ff 07    	rcall     0x2f78 <_coinCheck> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2fea:	f3 ff 37    	bra       0x2fd2 <.L8>
Disassembly of section .dinit:

00002fec <.dinit>:
    2fec:	30 08 00    	nop       
    2fee:	06 00 00    	nop       
    2ff0:	80 00 00    	nop       
    2ff2:	3a 08 00    	nop       
    2ff4:	b8 01 00    	nop       
    2ff6:	80 00 00    	nop       
    2ff8:	f2 09 00    	nop       
    2ffa:	1c 01 00    	nop       
    2ffc:	80 00 00    	nop       
    2ffe:	36 08 00    	nop       
    3000:	04 00 00    	nop       
    3002:	80 00 00    	nop       
    3004:	00 08 00    	nop       
    3006:	30 00 00    	nop       
    3008:	80 00 00    	nop       
    300a:	7c 0b 00    	nop       
    300c:	10 00 00    	nop       
    300e:	82 00 00    	nop       
    3010:	bd 37 86    	mov.w     0xc6f6, w13
    3012:	33 bd 37    	bra       0xffffaa7a
    3014:	06 35 bd    	subr.w    0x1506
    3016:	37 86 36    	bra       LEU, 0xffff3c86
    3018:	bd 37 86    	mov.w     0xc6f6, w13
    301a:	37 00 00    	nop       
    301c:	0e 0b 00    	nop       
    301e:	6e 00 00    	nop       
    3020:	80 00 00    	nop       
    3022:	00 00 00    	nop       
Disassembly of section .isr:

00003024 <__DefaultInterrupt>:
    3024:	00 40 da    	break     
    3026:	00 00 fe    	reset     
