
blackout.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	e0 35 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	e0 35 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	e0 35 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	e0 35 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	e0 35 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	e0 35 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	e0 35 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <__CONFIG1-0x156e0>:
 11e:	e0 35 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <__CONFIG2-0x1569e>:
 15e:	e0 35 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <__CONFIG3-0x1569a>:
 160:	e0 35 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	e0 35 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	e0 35 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	e0 35 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	e0 35 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	e0 35 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	e0 35 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	e0 35 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	e0 35 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	e0 35 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	e0 35 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	e0 35 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	e0 35 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	e0 35 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	e0 35 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	e0 35 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	e0 35 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	e0 35 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	e0 35 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	e0 35 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	e0 35 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	e0 35 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	e0 35 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	e0 35 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	e0 35 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	e0 35 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	e0 35 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	e0 35 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	e0 35 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	e0 35 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	e0 35 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	e0 35 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	e0 35 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	e0 35 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	e0 35 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	e0 35 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	e0 35 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	e0 35 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	e0 35 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	e0 35 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	e0 35 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	e0 35 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	e0 35 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	e0 35 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	e0 35 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	e0 35 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	e0 35 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	e0 35 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	e0 35 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	e0 35 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	e0 35 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	e0 35 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	e0 35 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	e0 35 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	e0 35 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	e0 35 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	e0 35 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	e0 35 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	e0 35 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	e0 35 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	e0 35 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	8f c3 20    	mov.w     #0xc38, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	95 00 07    	rcall     0x1250 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	20 5a 23    	mov.w     #0x35a2, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	3e 35 02    	call      0x353e <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	60 08 20    	mov.w     #0x86, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	a8 34 04    	goto      0x34a8 <_off1>
    1216:	00 00 00 
    1218:	76 34 04    	goto      0x3476 <_on1>
    121a:	00 00 00 
    121c:	0c 35 04    	goto      0x350c <_off2>
    121e:	00 00 00 
    1220:	da 34 04    	goto      0x34da <_on2>
    1222:	00 00 00 
    1224:	32 29 04    	goto      0x2932 <___digitalRead>
    1226:	00 00 00 
    1228:	ee 28 04    	goto      0x28ee <___digitalWrite>
    122a:	00 00 00 
    122c:	54 29 04    	goto      0x2954 <___analogRead>
    122e:	00 00 00 
    1230:	1c 16 04    	goto      0x161c <___putc_nobuffer>
    1232:	00 00 00 
    1234:	5e 16 04    	goto      0x165e <___putc_buffer>
    1236:	00 00 00 
    1238:	40 16 04    	goto      0x1640 <___getc_nobuffer>
    123a:	00 00 00 
    123c:	52 17 04    	goto      0x1752 <___getc_buffer>
    123e:	00 00 00 
    1240:	de 2d 04    	goto      0x2dde <___pwmWrite>
    1242:	00 00 00 
    1244:	b0 2d 04    	goto      0x2db0 <___pwmRead>
    1246:	00 00 00 
    1248:	48 2e 04    	goto      0x2e48 <___servoWrite>
    124a:	00 00 00 
    124c:	16 2e 04    	goto      0x2e16 <___servoRead>
    124e:	00 00 00 

00001250 <__crt_start_mode>:
    1250:	00 00 05    	retlw.w   #0x0, w0

00001252 <___subsf3>:
    1252:	03 f0 a2    	btg.w     w3, #0xf

00001254 <___addsf3>:
    1254:	88 9f be    	mov.d     w8, [w15++]
    1256:	8a 9f be    	mov.d     w10, [w15++]
    1258:	8c 1f 78    	mov.w     w12, [w15++]
    125a:	f7 00 07    	rcall     0x144a <__funpack2>
    125c:	fe 00 33    	bra       N, 0x145a <__fPropagateNaN>
    125e:	64 50 e1    	cp.w      w10, #0x4
    1260:	4f 00 32    	bra       Z, 0x1300 <aisinfinite>

00001262 <checkspecialb>:
    1262:	64 20 e1    	cp.w      w4, #0x4
    1264:	52 00 32    	bra       Z, 0x130a <return2>
    1266:	03 82 6c    	xor.w     w9, w3, w4
    1268:	07 00 3b    	bra       NN, 0x1278 <getsign>
    126a:	09 05 d0    	sl.w      w9, w10
    126c:	03 06 d0    	sl.w      w3, w12
    126e:	82 0f 54    	sub.w     w8, w2, [w15]
    1270:	0c 06 5d    	subb.w    w10, w12, w12
    1272:	02 00 39    	bra       NC, 0x1278 <getsign>
    1274:	02 00 32    	bra       Z, 0x127a <gotsign>
    1276:	89 01 78    	mov.w     w9, w3

00001278 <getsign>:
    1278:	03 06 78    	mov.w     w3, w12

0000127a <gotsign>:
    127a:	85 82 55    	sub.w     w11, w5, w5
    127c:	04 00 3d    	bra       GE, 0x1286 <expcanonical>
    127e:	00 03 fd    	exch      w0, w6
    1280:	81 03 fd    	exch      w1, w7
    1282:	85 02 ea    	neg.w     w5, w5
    1284:	8b 85 42    	add.w     w5, w11, w11

00001286 <expcanonical>:
    1286:	84 0f 72    	ior.w     w4, w4, [w15]
    1288:	02 00 3b    	bra       NN, 0x128e <nonegate>
    128a:	60 00 10    	subr.w    w0, #0x0, w0
    128c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000128e <nonegate>:
    128e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1290:	00 05 eb    	clr.w     w10
    1292:	7a 28 e1    	cp.w      w5, #0x1a
    1294:	0a 00 39    	bra       NC, 0x12aa <aligniter>
    1296:	06 00 78    	mov.w     w6, w0
    1298:	c7 5d dd    	sl.w      w11, #0x7, w11
    129a:	f7 07 b2    	and.w     #0x7f, w7
    129c:	87 80 75    	ior.w     w11, w7, w1
    129e:	2d 00 37    	bra       0x12fa <signoff>

000012a0 <align>:
    12a0:	82 81 71    	ior.w     w3, w2, w3
    12a2:	0a 01 78    	mov.w     w10, w2
    12a4:	61 05 60    	and.w     w0, #0x1, w10
    12a6:	81 80 d1    	asr.w     w1, w1
    12a8:	00 80 d3    	rrc.w     w0, w0

000012aa <aligniter>:
    12aa:	85 02 e9    	dec.w     w5, w5
    12ac:	f9 ff 3b    	bra       NN, 0x12a0 <align>

000012ae <aligned>:
    12ae:	06 04 40    	add.w     w0, w6, w8
    12b0:	87 84 48    	addc.w    w1, w7, w9
    12b2:	02 00 3b    	bra       NN, 0x12b8 <normalizesum>
    12b4:	60 04 14    	subr.w    w8, #0x0, w8
    12b6:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012b8 <normalizesum>:
    12b8:	09 88 a3    	btst.z    w9, #0x8
    12ba:	07 00 32    	bra       Z, 0x12ca <checknormal>
    12bc:	8a 81 71    	ior.w     w3, w10, w3
    12be:	82 81 71    	ior.w     w3, w2, w3
    12c0:	61 01 64    	and.w     w8, #0x1, w2
    12c2:	89 04 d1    	lsr.w     w9, w9
    12c4:	08 84 d3    	rrc.w     w8, w8
    12c6:	8b 05 e8    	inc.w     w11, w11
    12c8:	17 00 37    	bra       0x12f8 <round>

000012ca <checknormal>:
    12ca:	09 78 a3    	btst.z    w9, #0x7
    12cc:	13 00 3a    	bra       NZ, 0x12f4 <discardguard>

000012ce <underflow>:
    12ce:	0b 00 e0    	cp0.w     w11
    12d0:	13 00 34    	bra       LE, 0x12f8 <round>
    12d2:	8b 05 e9    	dec.w     w11, w11
    12d4:	08 04 44    	add.w     w8, w8, w8
    12d6:	89 84 4c    	addc.w    w9, w9, w9
    12d8:	0a 44 74    	ior.b     w8, w10, w8
    12da:	09 78 a3    	btst.z    w9, #0x7
    12dc:	0d 00 3a    	bra       NZ, 0x12f8 <round>

000012de <normalizeloop>:
    12de:	0b 00 e0    	cp0.w     w11
    12e0:	07 00 34    	bra       LE, 0x12f0 <normalizeexit>
    12e2:	8b 05 e9    	dec.w     w11, w11
    12e4:	08 04 44    	add.w     w8, w8, w8
    12e6:	89 84 4c    	addc.w    w9, w9, w9
    12e8:	01 00 3a    	bra       NZ, 0x12ec <normalizetest>
    12ea:	0b 00 20    	mov.w     #0x0, w11

000012ec <normalizetest>:
    12ec:	09 78 a3    	btst.z    w9, #0x7
    12ee:	f7 ff 32    	bra       Z, 0x12de <normalizeloop>

000012f0 <normalizeexit>:
    12f0:	00 01 eb    	clr.w     w2
    12f2:	02 00 37    	bra       0x12f8 <round>

000012f4 <discardguard>:
    12f4:	82 81 71    	ior.w     w3, w2, w3
    12f6:	0a 01 78    	mov.w     w10, w2

000012f8 <round>:
    12f8:	6d 00 07    	rcall     0x13d4 <__fpack>

000012fa <signoff>:
    12fa:	0c f0 a7    	btsc.w    w12, #0xf
    12fc:	01 f0 a0    	bset.w    w1, #0xf
    12fe:	b6 00 37    	bra       0x146c <__fbopExit>

00001300 <aisinfinite>:
    1300:	64 20 e1    	cp.w      w4, #0x4
    1302:	02 00 3a    	bra       NZ, 0x1308 <return8>
    1304:	83 8f 6c    	xor.w     w9, w3, [w15]
    1306:	b6 00 33    	bra       N, 0x1474 <__fbopReturnNaN>

00001308 <return8>:
    1308:	08 01 be    	mov.d     w8, w2

0000130a <return2>:
    130a:	02 00 be    	mov.d     w2, w0
    130c:	af 00 37    	bra       0x146c <__fbopExit>

0000130e <___divsf3>:
    130e:	88 9f be    	mov.d     w8, [w15++]
    1310:	8a 9f be    	mov.d     w10, [w15++]
    1312:	8c 1f 78    	mov.w     w12, [w15++]
    1314:	9a 00 07    	rcall     0x144a <__funpack2>
    1316:	a1 00 33    	bra       N, 0x145a <__fPropagateNaN>
    1318:	03 86 6c    	xor.w     w9, w3, w12
    131a:	64 50 e1    	cp.w      w10, #0x4
    131c:	2e 00 32    	bra       Z, 0x137a <aisinfinite>
    131e:	64 20 e1    	cp.w      w4, #0x4
    1320:	33 00 32    	bra       Z, 0x1388 <returnZero>
    1322:	61 50 e1    	cp.w      w10, #0x1
    1324:	2f 00 32    	bra       Z, 0x1384 <aiszero>
    1326:	61 20 e1    	cp.w      w4, #0x1
    1328:	31 00 32    	bra       Z, 0x138c <returnInf>

0000132a <finitenonzero>:
    132a:	85 85 55    	sub.w     w11, w5, w11
    132c:	eb 07 b0    	add.w     #0x7e, w11
    132e:	09 00 20    	mov.w     #0x0, w9
    1330:	08 04 20    	mov.w     #0x40, w8
    1332:	05 00 37    	bra       0x133e <diventry>

00001334 <divnext>:
    1334:	08 04 44    	add.w     w8, w8, w8
    1336:	89 84 4c    	addc.w    w9, w9, w9
    1338:	0a 00 31    	bra       C, 0x134e <divdone> <formsticky>

0000133a <divloop>:
    133a:	06 03 43    	add.w     w6, w6, w6
    133c:	87 83 4b    	addc.w    w7, w7, w7

0000133e <diventry>:
    133e:	00 01 53    	sub.w     w6, w0, w2
    1340:	81 81 5b    	subb.w    w7, w1, w3
    1342:	f8 ff 33    	bra       N, 0x1334 <divnext>
    1344:	02 03 be    	mov.d     w2, w6
    1346:	08 00 a0    	bset.w    w8, #0x0
    1348:	08 04 44    	add.w     w8, w8, w8
    134a:	89 84 4c    	addc.w    w9, w9, w9
    134c:	f6 ff 39    	bra       NC, 0x133a <divloop>

0000134e <divdone>:
    134e:	c6 39 dd    	sl.w      w7, #0x6, w3
    1350:	83 01 73    	ior.w     w6, w3, w3
    1352:	01 00 32    	bra       Z, 0x1356 <stickyok>
    1354:	13 00 20    	mov.w     #0x1, w3

00001356 <stickyok>:
    1356:	89 04 d1    	lsr.w     w9, w9
    1358:	08 84 d3    	rrc.w     w8, w8
    135a:	09 98 a3    	btst.z    w9, #0x9
    135c:	05 00 32    	bra       Z, 0x1368 <guardused>
    135e:	08 00 a7    	btsc.w    w8, #0x0
    1360:	03 00 a0    	bset.w    w3, #0x0
    1362:	89 04 d1    	lsr.w     w9, w9
    1364:	08 84 d3    	rrc.w     w8, w8
    1366:	8b 05 e8    	inc.w     w11, w11

00001368 <guardused>:
    1368:	89 04 d1    	lsr.w     w9, w9
    136a:	08 84 d3    	rrc.w     w8, w8
    136c:	00 01 eb    	clr.w     w2
    136e:	02 81 d2    	rlc.w     w2, w2
    1370:	31 00 07    	rcall     0x13d4 <__fpack>

00001372 <return0>:
    1372:	01 f0 a1    	bclr.w    w1, #0xf
    1374:	0c f0 a7    	btsc.w    w12, #0xf
    1376:	01 f0 a0    	bset.w    w1, #0xf
    1378:	79 00 37    	bra       0x146c <__fbopExit>

0000137a <aisinfinite>:
    137a:	64 20 e1    	cp.w      w4, #0x4
    137c:	7b 00 32    	bra       Z, 0x1474 <__fbopReturnNaN>

0000137e <return8>:
    137e:	08 01 be    	mov.d     w8, w2

00001380 <return2>:
    1380:	02 00 be    	mov.d     w2, w0
    1382:	f7 ff 37    	bra       0x1372 <return0>

00001384 <aiszero>:
    1384:	61 20 e1    	cp.w      w4, #0x1
    1386:	76 00 32    	bra       Z, 0x1474 <__fbopReturnNaN>

00001388 <returnZero>:
    1388:	60 00 b8    	mul.uu    w0, #0x0, w0
    138a:	f3 ff 37    	bra       0x1372 <return0>

0000138c <returnInf>:
    138c:	00 00 20    	mov.w     #0x0, w0
    138e:	01 f8 27    	mov.w     #0x7f80, w1
    1390:	f0 ff 37    	bra       0x1372 <return0>

00001392 <___eqsf2>:
    1392:	14 00 20    	mov.w     #0x1, w4
    1394:	b6 00 37    	bra       0x1502 <__fcompare>

00001396 <___gesf2>:
    1396:	f4 ff 2f    	mov.w     #0xffff, w4
    1398:	b4 00 37    	bra       0x1502 <__fcompare>

0000139a <___fixunssfsi>:
    139a:	00 01 be    	mov.d     w0, w2
    139c:	41 00 07    	rcall     0x1420 <__funpack>
    139e:	04 70 a7    	btsc.w    w4, #0x7
    13a0:	03 f0 a1    	bclr.w    w3, #0xf
    13a2:	03 f8 a3    	btst.z    w3, #0xf
    13a4:	13 00 3a    	bra       NZ, 0x13cc <returnzero>
    13a6:	65 09 b1    	sub.w     #0x96, w5
    13a8:	10 00 32    	bra       Z, 0x13ca <exit>
    13aa:	09 00 35    	bra       LT, 0x13be <shiftright>
    13ac:	69 28 e1    	cp.w      w5, #0x9
    13ae:	02 00 35    	bra       LT, 0x13b4 <shiftleft>
    13b0:	01 00 28    	mov.w     #0x8000, w1
    13b2:	00 00 05    	retlw.w   #0x0, w0

000013b4 <shiftleft>:
    13b4:	00 00 40    	add.w     w0, w0, w0
    13b6:	81 80 48    	addc.w    w1, w1, w1
    13b8:	85 02 e9    	dec.w     w5, w5
    13ba:	fc ff 3a    	bra       NZ, 0x13b4 <shiftleft>
    13bc:	00 00 06    	return    

000013be <shiftright>:
    13be:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13c0:	05 00 35    	bra       LT, 0x13cc <returnzero>

000013c2 <shiftrightloop>:
    13c2:	81 00 d1    	lsr.w     w1, w1
    13c4:	00 80 d3    	rrc.w     w0, w0
    13c6:	85 02 e8    	inc.w     w5, w5
    13c8:	fc ff 3a    	bra       NZ, 0x13c2 <shiftrightloop>

000013ca <exit>:
    13ca:	00 00 06    	return    

000013cc <returnzero>:
    13cc:	80 00 eb    	clr.w     w1
    13ce:	00 00 05    	retlw.w   #0x0, w0

000013d0 <___floatunsisf>:
    13d0:	60 11 b8    	mul.uu    w2, #0x0, w2
    13d2:	b2 00 37    	bra       0x1538 <___floatundisf>

000013d4 <__fpack>:
    13d4:	81 00 20    	mov.w     #0x8, w1
    13d6:	61 80 55    	sub.w     w11, #0x1, w0
    13d8:	0b 00 3d    	bra       GE, 0x13f0 <notsubnormal>
    13da:	0b 00 20    	mov.w     #0x0, w11
    13dc:	61 fe 2f    	mov.w     #0xffe6, w1
    13de:	01 00 e1    	cp.w      w0, w1
    13e0:	1d 00 34    	bra       LE, 0x141c <zerosig>

000013e2 <subnormal>:
    13e2:	82 81 71    	ior.w     w3, w2, w3
    13e4:	61 01 64    	and.w     w8, #0x1, w2
    13e6:	89 04 d1    	lsr.w     w9, w9
    13e8:	08 84 d3    	rrc.w     w8, w8
    13ea:	00 00 e8    	inc.w     w0, w0
    13ec:	fa ff 3a    	bra       NZ, 0x13e2 <subnormal>
    13ee:	71 00 20    	mov.w     #0x7, w1

000013f0 <notsubnormal>:
    13f0:	61 00 64    	and.w     w8, #0x1, w0
    13f2:	03 00 70    	ior.w     w0, w3, w0
    13f4:	02 00 60    	and.w     w0, w2, w0
    13f6:	09 00 32    	bra       Z, 0x140a <packupandgo>
    13f8:	61 04 44    	add.w     w8, #0x1, w8
    13fa:	e0 84 4c    	addc.w    w9, #0x0, w9
    13fc:	09 88 a5    	btst.z    w9, w1
    13fe:	05 00 32    	bra       Z, 0x140a <packupandgo>
    1400:	8b 05 e8    	inc.w     w11, w11
    1402:	68 08 e1    	cp.w      w1, #0x8
    1404:	02 00 3a    	bra       NZ, 0x140a <packupandgo>
    1406:	89 04 d1    	lsr.w     w9, w9
    1408:	08 84 d3    	rrc.w     w8, w8

0000140a <packupandgo>:
    140a:	f2 0f 20    	mov.w     #0xff, w2
    140c:	02 58 e1    	cp.w      w11, w2
    140e:	05 00 3d    	bra       GE, 0x141a <overflow>
    1410:	c7 5d dd    	sl.w      w11, #0x7, w11
    1412:	f9 07 b2    	and.w     #0x7f, w9
    1414:	89 80 75    	ior.w     w11, w9, w1
    1416:	08 00 78    	mov.w     w8, w0
    1418:	00 00 06    	return    

0000141a <overflow>:
    141a:	0b f8 27    	mov.w     #0x7f80, w11

0000141c <zerosig>:
    141c:	8b 00 78    	mov.w     w11, w1
    141e:	00 00 05    	retlw.w   #0x0, w0

00001420 <__funpack>:
    1420:	c7 0a de    	lsr.w     w1, #0x7, w5
    1422:	f1 07 b2    	and.w     #0x7f, w1
    1424:	f5 0f b2    	and.w     #0xff, w5
    1426:	08 00 32    	bra       Z, 0x1438 <zeroorsub>
    1428:	e1 cf 42    	add.b     w5, #0x1, [w15]
    142a:	02 00 32    	bra       Z, 0x1430 <nanorinf>

0000142c <finitereturn>:
    142c:	01 70 a0    	bset.w    w1, #0x7
    142e:	24 00 05    	retlw.w   #0x2, w4

00001430 <nanorinf>:
    1430:	81 0f 70    	ior.w     w0, w1, [w15]
    1432:	01 00 32    	bra       Z, 0x1436 <infinite>
    1434:	04 08 05    	retlw.w   #0x80, w4

00001436 <infinite>:
    1436:	44 00 05    	retlw.w   #0x4, w4

00001438 <zeroorsub>:
    1438:	81 0f 70    	ior.w     w0, w1, [w15]
    143a:	02 00 3a    	bra       NZ, 0x1440 <subnormal>
    143c:	14 00 05    	retlw.w   #0x1, w4

0000143e <normalize>:
    143e:	85 02 e9    	dec.w     w5, w5

00001440 <subnormal>:
    1440:	00 00 40    	add.w     w0, w0, w0
    1442:	81 c0 48    	addc.b    w1, w1, w1
    1444:	fc ff 3b    	bra       NN, 0x143e <normalize>
    1446:	01 70 a0    	bset.w    w1, #0x7
    1448:	24 00 05    	retlw.w   #0x2, w4

0000144a <__funpack2>:
    144a:	00 04 be    	mov.d     w0, w8
    144c:	e9 ff 07    	rcall     0x1420 <__funpack>
    144e:	00 03 be    	mov.d     w0, w6
    1450:	04 05 be    	mov.d     w4, w10
    1452:	02 00 be    	mov.d     w2, w0
    1454:	e5 ff 07    	rcall     0x1420 <__funpack>
    1456:	84 4f 75    	ior.b     w10, w4, [w15]
    1458:	00 00 06    	return    

0000145a <__fPropagateNaN>:
    145a:	02 00 be    	mov.d     w2, w0
    145c:	64 50 e1    	cp.w      w10, #0x4
    145e:	05 00 36    	bra       LEU, 0x146a <return0>
    1460:	64 20 e1    	cp.w      w4, #0x4
    1462:	02 00 36    	bra       LEU, 0x1468 <return8>
    1464:	09 68 a3    	btst.z    w9, #0x6
    1466:	01 00 3a    	bra       NZ, 0x146a <return0>

00001468 <return8>:
    1468:	08 00 be    	mov.d     w8, w0

0000146a <return0>:
    146a:	01 60 a0    	bset.w    w1, #0x6

0000146c <__fbopExit>:
    146c:	4f 06 78    	mov.w     [--w15], w12
    146e:	4f 05 be    	mov.d     [--w15], w10
    1470:	4f 04 be    	mov.d     [--w15], w8
    1472:	00 00 06    	return    

00001474 <__fbopReturnNaN>:
    1474:	f0 ff 2f    	mov.w     #0xffff, w0
    1476:	f1 ff 27    	mov.w     #0x7fff, w1
    1478:	f9 ff 37    	bra       0x146c <__fbopExit>

0000147a <___mulsf3>:
    147a:	88 9f be    	mov.d     w8, [w15++]
    147c:	8a 9f be    	mov.d     w10, [w15++]
    147e:	8c 1f 78    	mov.w     w12, [w15++]
    1480:	e4 ff 07    	rcall     0x144a <__funpack2>
    1482:	eb ff 33    	bra       N, 0x145a <__fPropagateNaN>
    1484:	03 86 6c    	xor.w     w9, w3, w12
    1486:	64 50 e1    	cp.w      w10, #0x4
    1488:	24 00 32    	bra       Z, 0x14d2 <aisinfinite>
    148a:	64 20 e1    	cp.w      w4, #0x4
    148c:	27 00 32    	bra       Z, 0x14dc <bisinfinite>
    148e:	61 50 e1    	cp.w      w10, #0x1
    1490:	22 00 32    	bra       Z, 0x14d6 <return8>
    1492:	61 20 e1    	cp.w      w4, #0x1
    1494:	21 00 32    	bra       Z, 0x14d8 <return2>
    1496:	8b 85 42    	add.w     w5, w11, w11
    1498:	eb 07 b1    	sub.w     #0x7e, w11
    149a:	01 34 b8    	mul.uu    w6, w1, w8
    149c:	00 3a b8    	mul.uu    w7, w0, w4
    149e:	08 04 42    	add.w     w4, w8, w8
    14a0:	89 84 4a    	addc.w    w5, w9, w9
    14a2:	01 3a b8    	mul.uu    w7, w1, w4
    14a4:	00 30 b8    	mul.uu    w6, w0, w0
    14a6:	88 80 40    	add.w     w1, w8, w1
    14a8:	09 01 4a    	addc.w    w4, w9, w2
    14aa:	04 00 33    	bra       N, 0x14b4 <formsticky>
    14ac:	00 00 40    	add.w     w0, w0, w0
    14ae:	81 80 48    	addc.w    w1, w1, w1
    14b0:	02 01 49    	addc.w    w2, w2, w2
    14b2:	8b 05 e9    	dec.w     w11, w11

000014b4 <formsticky>:
    14b4:	c9 09 dd    	sl.w      w1, #0x9, w3
    14b6:	83 01 70    	ior.w     w0, w3, w3
    14b8:	01 00 32    	bra       Z, 0x14bc <formRandSig>
    14ba:	13 00 20    	mov.w     #0x1, w3

000014bc <formRandSig>:
    14bc:	c8 14 de    	lsr.w     w2, #0x8, w9
    14be:	48 14 dd    	sl.w      w2, #0x8, w8
    14c0:	47 09 de    	lsr.w     w1, #0x7, w2
    14c2:	12 00 b2    	and.w     #0x1, w2
    14c4:	c8 08 de    	lsr.w     w1, #0x8, w1
    14c6:	08 84 70    	ior.w     w1, w8, w8
    14c8:	85 ff 07    	rcall     0x13d4 <__fpack>

000014ca <return0>:
    14ca:	01 f0 a1    	bclr.w    w1, #0xf
    14cc:	0c f0 a7    	btsc.w    w12, #0xf
    14ce:	01 f0 a0    	bset.w    w1, #0xf
    14d0:	cd ff 37    	bra       0x146c <__fbopExit>

000014d2 <aisinfinite>:
    14d2:	61 20 e1    	cp.w      w4, #0x1
    14d4:	cf ff 32    	bra       Z, 0x1474 <__fbopReturnNaN>

000014d6 <return8>:
    14d6:	08 01 be    	mov.d     w8, w2

000014d8 <return2>:
    14d8:	02 00 be    	mov.d     w2, w0
    14da:	f7 ff 37    	bra       0x14ca <return0>

000014dc <bisinfinite>:
    14dc:	61 50 e1    	cp.w      w10, #0x1
    14de:	fc ff 3a    	bra       NZ, 0x14d8 <return2>
    14e0:	c9 ff 37    	bra       0x1474 <__fbopReturnNaN>

000014e2 <___udivsi3>:
    14e2:	60 22 b8    	mul.uu    w4, #0x0, w4
    14e4:	06 02 20    	mov.w     #0x20, w6

000014e6 <nextbit>:
    14e6:	00 00 d0    	sl.w      w0, w0
    14e8:	81 80 d2    	rlc.w     w1, w1
    14ea:	04 82 d2    	rlc.w     w4, w4
    14ec:	85 82 d2    	rlc.w     w5, w5
    14ee:	00 00 a0    	bset.w    w0, #0x0
    14f0:	02 02 52    	sub.w     w4, w2, w4
    14f2:	83 82 5a    	subb.w    w5, w3, w5
    14f4:	03 00 31    	bra       C, 0x14fc <iterate>
    14f6:	02 02 42    	add.w     w4, w2, w4
    14f8:	83 82 4a    	addc.w    w5, w3, w5
    14fa:	00 00 a1    	bclr.w    w0, #0x0

000014fc <iterate>:
    14fc:	06 03 e9    	dec.w     w6, w6
    14fe:	f3 ff 3a    	bra       NZ, 0x14e6 <nextbit>
    1500:	00 00 06    	return    

00001502 <__fcompare>:
    1502:	88 9f be    	mov.d     w8, [w15++]
    1504:	8a 9f be    	mov.d     w10, [w15++]
    1506:	84 1f 78    	mov.w     w4, [w15++]
    1508:	a0 ff 07    	rcall     0x144a <__funpack2>
    150a:	4f 00 78    	mov.w     [--w15], w0
    150c:	11 00 33    	bra       N, 0x1530 <exit>
    150e:	f0 ff 2f    	mov.w     #0xffff, w0
    1510:	83 8f 6c    	xor.w     w9, w3, [w15]
    1512:	06 00 3b    	bra       NN, 0x1520 <comparemag>
    1514:	04 05 65    	and.w     w10, w4, w10
    1516:	0a 00 a7    	btsc.w    w10, #0x0
    1518:	08 00 37    	bra       0x152a <returnEqual>
    151a:	09 f0 a6    	btss.w    w9, #0xf
    151c:	10 00 20    	mov.w     #0x1, w0
    151e:	08 00 37    	bra       0x1530 <exit>

00001520 <comparemag>:
    1520:	82 0f 54    	sub.w     w8, w2, [w15]
    1522:	83 8f 5c    	subb.w    w9, w3, [w15]
    1524:	03 00 39    	bra       NC, 0x152c <adjust>
    1526:	10 00 20    	mov.w     #0x1, w0
    1528:	01 00 3e    	bra       GTU, 0x152c <adjust>

0000152a <returnEqual>:
    152a:	00 00 20    	mov.w     #0x0, w0

0000152c <adjust>:
    152c:	09 f0 a7    	btsc.w    w9, #0xf
    152e:	00 00 ea    	neg.w     w0, w0

00001530 <exit>:
    1530:	4f 05 be    	mov.d     [--w15], w10
    1532:	4f 04 be    	mov.d     [--w15], w8
    1534:	00 00 e0    	cp0.w     w0
    1536:	00 00 06    	return    

00001538 <___floatundisf>:
    1538:	88 9f be    	mov.d     w8, [w15++]
    153a:	8a 9f be    	mov.d     w10, [w15++]
    153c:	00 82 70    	ior.w     w1, w0, w4
    153e:	04 02 71    	ior.w     w2, w4, w4
    1540:	04 82 71    	ior.w     w3, w4, w4
    1542:	26 00 32    	bra       Z, 0x1590 <return0>
    1544:	00 04 be    	mov.d     w0, w8
    1546:	02 00 be    	mov.d     w2, w0
    1548:	60 11 b8    	mul.uu    w2, #0x0, w2
    154a:	6b 09 20    	mov.w     #0x96, w11
    154c:	95 02 20    	mov.w     #0x29, w5
    154e:	01 82 cf    	ff1l      w1, w4
    1550:	0a 00 39    	bra       NC, 0x1566 <fixshift>
    1552:	05 41 b1    	sub.b     #0x10, w5
    1554:	00 82 cf    	ff1l      w0, w4
    1556:	07 00 39    	bra       NC, 0x1566 <fixshift>
    1558:	05 41 b1    	sub.b     #0x10, w5
    155a:	09 82 cf    	ff1l      w9, w4
    155c:	04 00 39    	bra       NC, 0x1566 <fixshift>
    155e:	05 41 b1    	sub.b     #0x10, w5
    1560:	08 82 cf    	ff1l      w8, w4
    1562:	01 00 39    	bra       NC, 0x1566 <fixshift>
    1564:	05 41 b1    	sub.b     #0x10, w5

00001566 <fixshift>:
    1566:	05 42 52    	sub.b     w4, w5, w4
    1568:	12 00 32    	bra       Z, 0x158e <round>
    156a:	0a 00 3b    	bra       NN, 0x1580 <shiftleft>

0000156c <shiftright>:
    156c:	82 81 71    	ior.w     w3, w2, w3
    156e:	61 01 64    	and.w     w8, #0x1, w2
    1570:	81 00 d1    	lsr.w     w1, w1
    1572:	00 80 d3    	rrc.w     w0, w0
    1574:	89 84 d3    	rrc.w     w9, w9
    1576:	08 84 d3    	rrc.w     w8, w8
    1578:	8b 05 e8    	inc.w     w11, w11
    157a:	04 42 e8    	inc.b     w4, w4
    157c:	f7 ff 3a    	bra       NZ, 0x156c <shiftright>
    157e:	07 00 37    	bra       0x158e <round>

00001580 <shiftleft>:
    1580:	08 04 44    	add.w     w8, w8, w8
    1582:	89 84 4c    	addc.w    w9, w9, w9
    1584:	00 00 48    	addc.w    w0, w0, w0
    1586:	81 80 48    	addc.w    w1, w1, w1
    1588:	8b 05 e9    	dec.w     w11, w11
    158a:	04 42 e9    	dec.b     w4, w4
    158c:	f9 ff 3a    	bra       NZ, 0x1580 <shiftleft>

0000158e <round>:
    158e:	22 ff 07    	rcall     0x13d4 <__fpack>

00001590 <return0>:
    1590:	4f 05 be    	mov.d     [--w15], w10
    1592:	4f 04 be    	mov.d     [--w15], w8
    1594:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	34 24 04    	goto      0x2434 <__T1Interrupt>
    1026:	00 00 00 
    1028:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	62 24 04    	goto      0x2462 <__T2Interrupt>
    1032:	00 00 00 
    1034:	90 24 04    	goto      0x2490 <__T3Interrupt>
    1036:	00 00 00 
    1038:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	3e 18 04    	goto      0x183e <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	10 18 04    	goto      0x1810 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	be 24 04    	goto      0x24be <__T4Interrupt>
    1072:	00 00 00 
    1074:	ec 24 04    	goto      0x24ec <__T5Interrupt>
    1076:	00 00 00 
    1078:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	9a 18 04    	goto      0x189a <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	6c 18 04    	goto      0x186c <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	f6 18 04    	goto      0x18f6 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	c8 18 04    	goto      0x18c8 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	52 19 04    	goto      0x1952 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	24 19 04    	goto      0x1924 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	e0 35 04    	goto      0x35e0 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009596 <_Device>:
    9596:	12 01       	.word 0x112
    9598:	00 02       	.word 0x200
    959a:	00 00       	.word 0
    959c:	00 40       	.word 0x4000
    959e:	66 66       	.word 0x6666
    95a0:	03 00       	.word 0x3
    95a2:	00 00       	.word 0
    95a4:	01 02       	.word 0x201
    95a6:	00 01       	.word 0x100

000095a8 <_Configuration1>:
    95a8:	09 02       	.word 0x209
    95aa:	12 00       	.word 0x12
    95ac:	01 01       	.word 0x101
    95ae:	00 a0       	.word 0xa000
    95b0:	32 09       	.word 0x932
    95b2:	04 00       	.word 0x4
    95b4:	00 00       	.word 0
    95b6:	ff 00       	.word 0xff
    95b8:	ff 00       	.word 0xff

000095ba <_String0>:
    95ba:	04 03       	.word 0x304
    95bc:	09 04       	.word 0x409

000095be <_String1>:
    95be:	1a 03       	.word 0x31a
    95c0:	4f 00       	.word 0x4f
    95c2:	6c 00       	.word 0x6c
    95c4:	69 00       	.word 0x69
    95c6:	6e 00       	.word 0x6e
    95c8:	20 00       	.word 0x20
    95ca:	43 00       	.word 0x43
    95cc:	6f 00       	.word 0x6f
    95ce:	6c 00       	.word 0x6c
    95d0:	6c 00       	.word 0x6c
    95d2:	65 00       	.word 0x65
    95d4:	67 00       	.word 0x67
    95d6:	65 00       	.word 0x65

000095d8 <_String2>:
    95d8:	44 03       	.word 0x344
    95da:	45 00       	.word 0x45
    95dc:	6c 00       	.word 0x6c
    95de:	65 00       	.word 0x65
    95e0:	63 00       	.word 0x63
    95e2:	61 00       	.word 0x61
    95e4:	6e 00       	.word 0x6e
    95e6:	69 00       	.word 0x69
    95e8:	73 00       	.word 0x73
    95ea:	6d 00       	.word 0x6d
    95ec:	73 00       	.word 0x73
    95ee:	20 00       	.word 0x20
    95f0:	4d 00       	.word 0x4d
    95f2:	69 00       	.word 0x69
    95f4:	6e 00       	.word 0x6e
    95f6:	69 00       	.word 0x69
    95f8:	70 00       	.word 0x70
    95fa:	72 00       	.word 0x72
    95fc:	6f 00       	.word 0x6f
    95fe:	6a 00       	.word 0x6a
    9600:	65 00       	.word 0x65
    9602:	63 00       	.word 0x63
    9604:	74 00       	.word 0x74
    9606:	20 00       	.word 0x20
    9608:	32 00       	.word 0x32
    960a:	20 00       	.word 0x20
    960c:	46 00       	.word 0x46
    960e:	69 00       	.word 0x69
    9610:	72 00       	.word 0x72
    9612:	6d 00       	.word 0x6d
    9614:	77 00       	.word 0x77
    9616:	61 00       	.word 0x61
    9618:	72 00       	.word 0x72
    961a:	65 00       	.word 0x65
Disassembly of section .text:

0000161c <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    161c:	04 00 fa    	lnk       #0x4
    161e:	00 0f 78    	mov.w     w0, [w14]
    1620:	21 47 98    	mov.b     w1, [w14+2]
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    1622:	00 00 00    	nop       

00001624 <.L2>:
    1624:	1e 00 78    	mov.w     [w14], w0
    1626:	10 00 90    	mov.w     [w0+2], w0
    1628:	90 00 78    	mov.w     [w0], w1
    162a:	00 20 20    	mov.w     #0x200, w0
    162c:	00 80 60    	and.w     w1, w0, w0
    162e:	00 00 e0    	cp0.w     w0
    1630:	f9 ff 3a    	bra       NZ, 0x1624 <.L2>
    *(self->UxTXREG) = (uint16_t)ch;
    1632:	1e 00 78    	mov.w     [w14], w0
    1634:	20 00 90    	mov.w     [w0+4], w0
    1636:	ae 40 90    	mov.b     [w14+2], w1
    1638:	81 80 fb    	ze        w1, w1
    163a:	01 08 78    	mov.w     w1, [w0]
}
    163c:	00 80 fa    	ulnk      
    163e:	00 00 06    	return    

00001640 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1640:	02 00 fa    	lnk       #0x2
    1642:	00 0f 78    	mov.w     w0, [w14]
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    1644:	00 00 00    	nop       

00001646 <.L4>:
    1646:	1e 00 78    	mov.w     [w14], w0
    1648:	10 00 90    	mov.w     [w0+2], w0
    164a:	10 00 78    	mov.w     [w0], w0
    164c:	61 00 60    	and.w     w0, #0x1, w0
    164e:	00 00 e0    	cp0.w     w0
    1650:	fa ff 32    	bra       Z, 0x1646 <.L4>
    return (uint8_t)(*(self->UxRXREG));
    1652:	1e 00 78    	mov.w     [w14], w0
    1654:	30 00 90    	mov.w     [w0+6], w0
    1656:	10 00 78    	mov.w     [w0], w0
    1658:	00 40 78    	mov.b     w0, w0
}
    165a:	00 80 fa    	ulnk      
    165c:	00 00 06    	return    

0000165e <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    165e:	04 00 fa    	lnk       #0x4
    1660:	00 0f 78    	mov.w     w0, [w14]
    1662:	21 47 98    	mov.b     w1, [w14+2]
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    1664:	00 00 00    	nop       

00001666 <.L6>:
    1666:	1e 00 78    	mov.w     [w14], w0
    1668:	d0 10 90    	mov.w     [w0+42], w1
    166a:	1e 00 78    	mov.w     [w14], w0
    166c:	20 10 90    	mov.w     [w0+36], w0
    166e:	80 8f 50    	sub.w     w1, w0, [w15]
    1670:	fa ff 32    	bra       Z, 0x1666 <.L6>
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    1672:	ff 3f fc    	disi      #0x3fff
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    1674:	1e 00 78    	mov.w     [w14], w0
    1676:	90 10 90    	mov.w     [w0+34], w1
    1678:	1e 00 78    	mov.w     [w14], w0
    167a:	40 10 90    	mov.w     [w0+40], w0
    167c:	00 80 40    	add.w     w1, w0, w0
    167e:	ae 40 90    	mov.b     [w14+2], w1
    1680:	01 48 78    	mov.b     w1, [w0]
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    1682:	1e 00 78    	mov.w     [w14], w0
    1684:	40 10 90    	mov.w     [w0+40], w0
    1686:	80 00 e8    	inc.w     w0, w1
    1688:	1e 00 78    	mov.w     [w14], w0
    168a:	20 10 90    	mov.w     [w0+36], w0
    168c:	00 01 78    	mov.w     w0, w2
    168e:	11 00 09    	repeat    #0x11
    1690:	82 80 d8    	div.uw    w1, w2
    1692:	80 00 fd    	exch      w0, w1
    1694:	80 00 78    	mov.w     w0, w1
    1696:	1e 00 78    	mov.w     [w14], w0
    1698:	41 10 98    	mov.w     w1, [w0+40]
    self->TXbuffer.count++;
    169a:	1e 00 78    	mov.w     [w14], w0
    169c:	50 10 90    	mov.w     [w0+42], w0
    169e:	80 00 e8    	inc.w     w0, w1
    16a0:	1e 00 78    	mov.w     [w14], w0
    16a2:	51 10 98    	mov.w     w1, [w0+42]
    enable_interrupts();
    16a4:	52 20 ef    	clr.w     0x52
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    16a6:	1e 00 78    	mov.w     [w14], w0
    16a8:	d0 10 90    	mov.w     [w0+42], w1
    16aa:	1e 00 78    	mov.w     [w14], w0
    16ac:	30 18 90    	mov.w     [w0+54], w0
    16ae:	80 8f 50    	sub.w     w1, w0, [w15]
    16b0:	07 00 39    	bra       NC, 0x16c0 <.L5>
        bitset(self->UxSTA, 10);                    // enough, enable data
    16b2:	1e 00 78    	mov.w     [w14], w0
    16b4:	10 00 90    	mov.w     [w0+2], w0
    16b6:	9e 00 78    	mov.w     [w14], w1
    16b8:	91 00 90    	mov.w     [w1+2], w1
    16ba:	91 00 78    	mov.w     [w1], w1
    16bc:	01 a0 a0    	bset.w    w1, #0xa
    16be:	01 08 78    	mov.w     w1, [w0]

000016c0 <.L5>:
                                                    // transmission
}
    16c0:	00 80 fa    	ulnk      
    16c2:	00 00 06    	return    

000016c4 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    16c4:	04 00 fa    	lnk       #0x4
    16c6:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    16c8:	1e 00 90    	mov.w     [w14+2], w0
    16ca:	50 00 90    	mov.w     [w0+10], w0
    16cc:	9e 00 90    	mov.w     [w14+2], w1
    16ce:	d1 00 90    	mov.w     [w1+10], w1
    16d0:	11 01 78    	mov.w     [w1], w2
    16d2:	9e 00 90    	mov.w     [w14+2], w1
    16d4:	e1 48 90    	mov.b     [w1+14], w1
    16d6:	81 80 fb    	ze        w1, w1
    16d8:	13 00 20    	mov.w     #0x1, w3
    16da:	81 18 dd    	sl.w      w3, w1, w1
    16dc:	81 80 ea    	com.w     w1, w1
    16de:	81 00 61    	and.w     w2, w1, w1
    16e0:	01 08 78    	mov.w     w1, [w0]
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    16e2:	1e 00 90    	mov.w     [w14+2], w0
    16e4:	50 10 90    	mov.w     [w0+42], w0
    16e6:	00 00 e0    	cp0.w     w0
    16e8:	26 00 3a    	bra       NZ, 0x1736 <.L13>
        bitclear(self->UxSTA, 10);      // disable data transmission
    16ea:	1e 00 90    	mov.w     [w14+2], w0
    16ec:	10 00 90    	mov.w     [w0+2], w0
    16ee:	9e 00 90    	mov.w     [w14+2], w1
    16f0:	91 00 90    	mov.w     [w1+2], w1
    16f2:	91 00 78    	mov.w     [w1], w1
    16f4:	01 a0 a1    	bclr.w    w1, #0xa
    16f6:	01 08 78    	mov.w     w1, [w0]
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    16f8:	1f 00 37    	bra       0x1738 <.L10>

000016fa <.L12>:
        disable_interrupts();
    16fa:	ff 3f fc    	disi      #0x3fff
        ch = self->TXbuffer.data[self->TXbuffer.head];
    16fc:	1e 00 90    	mov.w     [w14+2], w0
    16fe:	90 10 90    	mov.w     [w0+34], w1
    1700:	1e 00 90    	mov.w     [w14+2], w0
    1702:	30 10 90    	mov.w     [w0+38], w0
    1704:	00 80 40    	add.w     w1, w0, w0
    1706:	10 4f 78    	mov.b     [w0], [w14]
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    1708:	1e 00 90    	mov.w     [w14+2], w0
    170a:	30 10 90    	mov.w     [w0+38], w0
    170c:	80 00 e8    	inc.w     w0, w1
    170e:	1e 00 90    	mov.w     [w14+2], w0
    1710:	20 10 90    	mov.w     [w0+36], w0
    1712:	00 01 78    	mov.w     w0, w2
    1714:	11 00 09    	repeat    #0x11
    1716:	82 80 d8    	div.uw    w1, w2
    1718:	80 00 fd    	exch      w0, w1
    171a:	80 00 78    	mov.w     w0, w1
    171c:	1e 00 90    	mov.w     [w14+2], w0
    171e:	31 10 98    	mov.w     w1, [w0+38]
        self->TXbuffer.count--;
    1720:	1e 00 90    	mov.w     [w14+2], w0
    1722:	50 10 90    	mov.w     [w0+42], w0
    1724:	80 00 e9    	dec.w     w0, w1
    1726:	1e 00 90    	mov.w     [w14+2], w0
    1728:	51 10 98    	mov.w     w1, [w0+42]
        enable_interrupts();
    172a:	52 20 ef    	clr.w     0x52
        *(self->UxTXREG) = (uint16_t)ch;
    172c:	1e 00 90    	mov.w     [w14+2], w0
    172e:	20 00 90    	mov.w     [w0+4], w0
    1730:	9e 80 fb    	ze        [w14], w1
    1732:	01 08 78    	mov.w     w1, [w0]
    1734:	01 00 37    	bra       0x1738 <.L10>

00001736 <.L13>:
    1736:	00 00 00    	nop       

00001738 <.L10>:
    1738:	1e 00 90    	mov.w     [w14+2], w0
    173a:	10 00 90    	mov.w     [w0+2], w0
    173c:	90 00 78    	mov.w     [w0], w1
    173e:	00 20 20    	mov.w     #0x200, w0
    1740:	00 80 60    	and.w     w1, w0, w0
    1742:	00 00 e0    	cp0.w     w0
    1744:	04 00 3a    	bra       NZ, 0x174e <.L8>
    1746:	1e 00 90    	mov.w     [w14+2], w0
    1748:	50 10 90    	mov.w     [w0+42], w0
    174a:	00 00 e0    	cp0.w     w0
    174c:	d6 ff 3a    	bra       NZ, 0x16fa <.L12>

0000174e <.L8>:
    }
}
    174e:	00 80 fa    	ulnk      
    1750:	00 00 06    	return    

00001752 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1752:	04 00 fa    	lnk       #0x4
    1754:	10 07 98    	mov.w     w0, [w14+2]
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1756:	00 00 00    	nop       

00001758 <.L15>:
    1758:	1e 00 90    	mov.w     [w14+2], w0
    175a:	20 18 90    	mov.w     [w0+52], w0
    175c:	00 00 e0    	cp0.w     w0
    175e:	fc ff 32    	bra       Z, 0x1758 <.L15>
    disable_interrupts();
    1760:	ff 3f fc    	disi      #0x3fff
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1762:	1e 00 90    	mov.w     [w14+2], w0
    1764:	e0 10 90    	mov.w     [w0+44], w1
    1766:	1e 00 90    	mov.w     [w14+2], w0
    1768:	00 18 90    	mov.w     [w0+48], w0
    176a:	00 80 40    	add.w     w1, w0, w0
    176c:	10 4f 78    	mov.b     [w0], [w14]
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    176e:	1e 00 90    	mov.w     [w14+2], w0
    1770:	00 18 90    	mov.w     [w0+48], w0
    1772:	80 00 e8    	inc.w     w0, w1
    1774:	1e 00 90    	mov.w     [w14+2], w0
    1776:	70 10 90    	mov.w     [w0+46], w0
    1778:	00 01 78    	mov.w     w0, w2
    177a:	11 00 09    	repeat    #0x11
    177c:	82 80 d8    	div.uw    w1, w2
    177e:	80 00 fd    	exch      w0, w1
    1780:	80 00 78    	mov.w     w0, w1
    1782:	1e 00 90    	mov.w     [w14+2], w0
    1784:	01 18 98    	mov.w     w1, [w0+48]
    self->RXbuffer.count--;
    1786:	1e 00 90    	mov.w     [w14+2], w0
    1788:	20 18 90    	mov.w     [w0+52], w0
    178a:	80 00 e9    	dec.w     w0, w1
    178c:	1e 00 90    	mov.w     [w14+2], w0
    178e:	21 18 98    	mov.w     w1, [w0+52]
    enable_interrupts();
    1790:	52 20 ef    	clr.w     0x52
    return ch;
    1792:	1e 40 78    	mov.b     [w14], w0
}
    1794:	00 80 fa    	ulnk      
    1796:	00 00 06    	return    

00001798 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    1798:	02 00 fa    	lnk       #0x2
    179a:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    179c:	1e 00 78    	mov.w     [w14], w0
    179e:	50 00 90    	mov.w     [w0+10], w0
    17a0:	9e 00 78    	mov.w     [w14], w1
    17a2:	d1 00 90    	mov.w     [w1+10], w1
    17a4:	11 01 78    	mov.w     [w1], w2
    17a6:	9e 00 78    	mov.w     [w14], w1
    17a8:	f1 48 90    	mov.b     [w1+15], w1
    17aa:	81 80 fb    	ze        w1, w1
    17ac:	13 00 20    	mov.w     #0x1, w3
    17ae:	81 18 dd    	sl.w      w3, w1, w1
    17b0:	81 80 ea    	com.w     w1, w1
    17b2:	81 00 61    	and.w     w2, w1, w1
    17b4:	01 08 78    	mov.w     w1, [w0]
    while ((bitread(self->UxSTA, 0)==1) && 
    17b6:	1d 00 37    	bra       0x17f2 <.L17>

000017b8 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    17b8:	ff 3f fc    	disi      #0x3fff
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    17ba:	1e 00 78    	mov.w     [w14], w0
    17bc:	e0 10 90    	mov.w     [w0+44], w1
    17be:	1e 00 78    	mov.w     [w14], w0
    17c0:	10 18 90    	mov.w     [w0+50], w0
    17c2:	00 80 40    	add.w     w1, w0, w0
    17c4:	9e 00 78    	mov.w     [w14], w1
    17c6:	b1 00 90    	mov.w     [w1+6], w1
    17c8:	91 00 78    	mov.w     [w1], w1
    17ca:	81 40 78    	mov.b     w1, w1
    17cc:	01 48 78    	mov.b     w1, [w0]
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    17ce:	1e 00 78    	mov.w     [w14], w0
    17d0:	10 18 90    	mov.w     [w0+50], w0
    17d2:	80 00 e8    	inc.w     w0, w1
    17d4:	1e 00 78    	mov.w     [w14], w0
    17d6:	70 10 90    	mov.w     [w0+46], w0
    17d8:	00 01 78    	mov.w     w0, w2
    17da:	11 00 09    	repeat    #0x11
    17dc:	82 80 d8    	div.uw    w1, w2
    17de:	80 00 fd    	exch      w0, w1
    17e0:	80 00 78    	mov.w     w0, w1
    17e2:	1e 00 78    	mov.w     [w14], w0
    17e4:	11 18 98    	mov.w     w1, [w0+50]
        self->RXbuffer.count++;
    17e6:	1e 00 78    	mov.w     [w14], w0
    17e8:	20 18 90    	mov.w     [w0+52], w0
    17ea:	80 00 e8    	inc.w     w0, w1
    17ec:	1e 00 78    	mov.w     [w14], w0
    17ee:	21 18 98    	mov.w     w1, [w0+52]
        enable_interrupts();
    17f0:	52 20 ef    	clr.w     0x52

000017f2 <.L17>:
    17f2:	1e 00 78    	mov.w     [w14], w0
    17f4:	10 00 90    	mov.w     [w0+2], w0
    17f6:	10 00 78    	mov.w     [w0], w0
    17f8:	61 00 60    	and.w     w0, #0x1, w0
    17fa:	00 40 78    	mov.b     w0, w0
    17fc:	00 04 e0    	cp0.b     w0
    17fe:	06 00 32    	bra       Z, 0x180c <.L16>
    1800:	1e 00 78    	mov.w     [w14], w0
    1802:	a0 18 90    	mov.w     [w0+52], w1
    1804:	1e 00 78    	mov.w     [w14], w0
    1806:	70 10 90    	mov.w     [w0+46], w0
    1808:	80 8f 50    	sub.w     w1, w0, [w15]
    180a:	d6 ff 3a    	bra       NZ, 0x17b8 <.L19>

0000180c <.L16>:
    }
}
    180c:	00 80 fa    	ulnk      
    180e:	00 00 06    	return    

00001810 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    1810:	36 00 f8    	push      0x36
    1812:	80 9f be    	mov.d     w0, [w15++]
    1814:	82 9f be    	mov.d     w2, [w15++]
    1816:	84 9f be    	mov.d     w4, [w15++]
    1818:	86 9f be    	mov.d     w6, [w15++]
    181a:	32 00 f8    	push      0x32
    181c:	34 00 f8    	push      0x34
    181e:	10 00 20    	mov.w     #0x1, w0
    1820:	a0 01 88    	mov.w     w0, 0x34
    1822:	00 20 20    	mov.w     #0x200, w0
    1824:	90 01 88    	mov.w     w0, 0x32
    1826:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart1);
    1828:	c0 9f 20    	mov.w     #0x9fc, w0
    182a:	4c ff 07    	rcall     0x16c4 <___serviceTxInterrupt> <L0> <.LFB3> <.LFE2>
}
    182c:	00 80 fa    	ulnk      
    182e:	34 00 f9    	pop       0x34
    1830:	32 00 f9    	pop       0x32
    1832:	4f 03 be    	mov.d     [--w15], w6
    1834:	4f 02 be    	mov.d     [--w15], w4
    1836:	4f 01 be    	mov.d     [--w15], w2
    1838:	4f 00 be    	mov.d     [--w15], w0
    183a:	36 00 f9    	pop       0x36
    183c:	00 40 06    	retfie    

0000183e <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    183e:	36 00 f8    	push      0x36
    1840:	80 9f be    	mov.d     w0, [w15++]
    1842:	82 9f be    	mov.d     w2, [w15++]
    1844:	84 9f be    	mov.d     w4, [w15++]
    1846:	86 9f be    	mov.d     w6, [w15++]
    1848:	32 00 f8    	push      0x32
    184a:	34 00 f8    	push      0x34
    184c:	10 00 20    	mov.w     #0x1, w0
    184e:	a0 01 88    	mov.w     w0, 0x34
    1850:	00 20 20    	mov.w     #0x200, w0
    1852:	90 01 88    	mov.w     w0, 0x32
    1854:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart1);
    1856:	c0 9f 20    	mov.w     #0x9fc, w0
    1858:	9f ff 07    	rcall     0x1798 <___serviceRxInterrupt> <L0> <.LFB5> <.LFE4>
}
    185a:	00 80 fa    	ulnk      
    185c:	34 00 f9    	pop       0x34
    185e:	32 00 f9    	pop       0x32
    1860:	4f 03 be    	mov.d     [--w15], w6
    1862:	4f 02 be    	mov.d     [--w15], w4
    1864:	4f 01 be    	mov.d     [--w15], w2
    1866:	4f 00 be    	mov.d     [--w15], w0
    1868:	36 00 f9    	pop       0x36
    186a:	00 40 06    	retfie    

0000186c <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    186c:	36 00 f8    	push      0x36
    186e:	80 9f be    	mov.d     w0, [w15++]
    1870:	82 9f be    	mov.d     w2, [w15++]
    1872:	84 9f be    	mov.d     w4, [w15++]
    1874:	86 9f be    	mov.d     w6, [w15++]
    1876:	32 00 f8    	push      0x32
    1878:	34 00 f8    	push      0x34
    187a:	10 00 20    	mov.w     #0x1, w0
    187c:	a0 01 88    	mov.w     w0, 0x34
    187e:	00 20 20    	mov.w     #0x200, w0
    1880:	90 01 88    	mov.w     w0, 0x32
    1882:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart2);
    1884:	80 a3 20    	mov.w     #0xa38, w0
    1886:	1e ff 07    	rcall     0x16c4 <___serviceTxInterrupt> <L0> <.LFB3> <.LFE2>
}
    1888:	00 80 fa    	ulnk      
    188a:	34 00 f9    	pop       0x34
    188c:	32 00 f9    	pop       0x32
    188e:	4f 03 be    	mov.d     [--w15], w6
    1890:	4f 02 be    	mov.d     [--w15], w4
    1892:	4f 01 be    	mov.d     [--w15], w2
    1894:	4f 00 be    	mov.d     [--w15], w0
    1896:	36 00 f9    	pop       0x36
    1898:	00 40 06    	retfie    

0000189a <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    189a:	36 00 f8    	push      0x36
    189c:	80 9f be    	mov.d     w0, [w15++]
    189e:	82 9f be    	mov.d     w2, [w15++]
    18a0:	84 9f be    	mov.d     w4, [w15++]
    18a2:	86 9f be    	mov.d     w6, [w15++]
    18a4:	32 00 f8    	push      0x32
    18a6:	34 00 f8    	push      0x34
    18a8:	10 00 20    	mov.w     #0x1, w0
    18aa:	a0 01 88    	mov.w     w0, 0x34
    18ac:	00 20 20    	mov.w     #0x200, w0
    18ae:	90 01 88    	mov.w     w0, 0x32
    18b0:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart2);
    18b2:	80 a3 20    	mov.w     #0xa38, w0
    18b4:	71 ff 07    	rcall     0x1798 <___serviceRxInterrupt> <L0> <.LFB5> <.LFE4>
}
    18b6:	00 80 fa    	ulnk      
    18b8:	34 00 f9    	pop       0x34
    18ba:	32 00 f9    	pop       0x32
    18bc:	4f 03 be    	mov.d     [--w15], w6
    18be:	4f 02 be    	mov.d     [--w15], w4
    18c0:	4f 01 be    	mov.d     [--w15], w2
    18c2:	4f 00 be    	mov.d     [--w15], w0
    18c4:	36 00 f9    	pop       0x36
    18c6:	00 40 06    	retfie    

000018c8 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    18c8:	36 00 f8    	push      0x36
    18ca:	80 9f be    	mov.d     w0, [w15++]
    18cc:	82 9f be    	mov.d     w2, [w15++]
    18ce:	84 9f be    	mov.d     w4, [w15++]
    18d0:	86 9f be    	mov.d     w6, [w15++]
    18d2:	32 00 f8    	push      0x32
    18d4:	34 00 f8    	push      0x34
    18d6:	10 00 20    	mov.w     #0x1, w0
    18d8:	a0 01 88    	mov.w     w0, 0x34
    18da:	00 20 20    	mov.w     #0x200, w0
    18dc:	90 01 88    	mov.w     w0, 0x32
    18de:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart3);
    18e0:	40 a7 20    	mov.w     #0xa74, w0
    18e2:	f0 fe 07    	rcall     0x16c4 <___serviceTxInterrupt> <L0> <.LFB3> <.LFE2>
}
    18e4:	00 80 fa    	ulnk      
    18e6:	34 00 f9    	pop       0x34
    18e8:	32 00 f9    	pop       0x32
    18ea:	4f 03 be    	mov.d     [--w15], w6
    18ec:	4f 02 be    	mov.d     [--w15], w4
    18ee:	4f 01 be    	mov.d     [--w15], w2
    18f0:	4f 00 be    	mov.d     [--w15], w0
    18f2:	36 00 f9    	pop       0x36
    18f4:	00 40 06    	retfie    

000018f6 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    18f6:	36 00 f8    	push      0x36
    18f8:	80 9f be    	mov.d     w0, [w15++]
    18fa:	82 9f be    	mov.d     w2, [w15++]
    18fc:	84 9f be    	mov.d     w4, [w15++]
    18fe:	86 9f be    	mov.d     w6, [w15++]
    1900:	32 00 f8    	push      0x32
    1902:	34 00 f8    	push      0x34
    1904:	10 00 20    	mov.w     #0x1, w0
    1906:	a0 01 88    	mov.w     w0, 0x34
    1908:	00 20 20    	mov.w     #0x200, w0
    190a:	90 01 88    	mov.w     w0, 0x32
    190c:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart3);
    190e:	40 a7 20    	mov.w     #0xa74, w0
    1910:	43 ff 07    	rcall     0x1798 <___serviceRxInterrupt> <L0> <.LFB5> <.LFE4>
}
    1912:	00 80 fa    	ulnk      
    1914:	34 00 f9    	pop       0x34
    1916:	32 00 f9    	pop       0x32
    1918:	4f 03 be    	mov.d     [--w15], w6
    191a:	4f 02 be    	mov.d     [--w15], w4
    191c:	4f 01 be    	mov.d     [--w15], w2
    191e:	4f 00 be    	mov.d     [--w15], w0
    1920:	36 00 f9    	pop       0x36
    1922:	00 40 06    	retfie    

00001924 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    1924:	36 00 f8    	push      0x36
    1926:	80 9f be    	mov.d     w0, [w15++]
    1928:	82 9f be    	mov.d     w2, [w15++]
    192a:	84 9f be    	mov.d     w4, [w15++]
    192c:	86 9f be    	mov.d     w6, [w15++]
    192e:	32 00 f8    	push      0x32
    1930:	34 00 f8    	push      0x34
    1932:	10 00 20    	mov.w     #0x1, w0
    1934:	a0 01 88    	mov.w     w0, 0x34
    1936:	00 20 20    	mov.w     #0x200, w0
    1938:	90 01 88    	mov.w     w0, 0x32
    193a:	00 00 fa    	lnk       #0x0
    __serviceTxInterrupt(&uart4);
    193c:	00 ab 20    	mov.w     #0xab0, w0
    193e:	c2 fe 07    	rcall     0x16c4 <___serviceTxInterrupt> <L0> <.LFB3> <.LFE2>
}
    1940:	00 80 fa    	ulnk      
    1942:	34 00 f9    	pop       0x34
    1944:	32 00 f9    	pop       0x32
    1946:	4f 03 be    	mov.d     [--w15], w6
    1948:	4f 02 be    	mov.d     [--w15], w4
    194a:	4f 01 be    	mov.d     [--w15], w2
    194c:	4f 00 be    	mov.d     [--w15], w0
    194e:	36 00 f9    	pop       0x36
    1950:	00 40 06    	retfie    

00001952 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    1952:	36 00 f8    	push      0x36
    1954:	80 9f be    	mov.d     w0, [w15++]
    1956:	82 9f be    	mov.d     w2, [w15++]
    1958:	84 9f be    	mov.d     w4, [w15++]
    195a:	86 9f be    	mov.d     w6, [w15++]
    195c:	32 00 f8    	push      0x32
    195e:	34 00 f8    	push      0x34
    1960:	10 00 20    	mov.w     #0x1, w0
    1962:	a0 01 88    	mov.w     w0, 0x34
    1964:	00 20 20    	mov.w     #0x200, w0
    1966:	90 01 88    	mov.w     w0, 0x32
    1968:	00 00 fa    	lnk       #0x0
    __serviceRxInterrupt(&uart4);
    196a:	00 ab 20    	mov.w     #0xab0, w0
    196c:	15 ff 07    	rcall     0x1798 <___serviceRxInterrupt> <L0> <.LFB5> <.LFE4>
}
    196e:	00 80 fa    	ulnk      
    1970:	34 00 f9    	pop       0x34
    1972:	32 00 f9    	pop       0x32
    1974:	4f 03 be    	mov.d     [--w15], w6
    1976:	4f 02 be    	mov.d     [--w15], w4
    1978:	4f 01 be    	mov.d     [--w15], w2
    197a:	4f 00 be    	mov.d     [--w15], w0
    197c:	36 00 f9    	pop       0x36
    197e:	00 40 06    	retfie    

00001980 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    1980:	08 00 fa    	lnk       #0x8
    1982:	10 07 98    	mov.w     w0, [w14+2]
    1984:	21 07 98    	mov.w     w1, [w14+4]
    1986:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    1988:	1e 00 90    	mov.w     [w14+2], w0
    198a:	00 00 e0    	cp0.w     w0
    198c:	25 00 35    	bra       LT, 0x19d8 <.L37>
    198e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1990:	03 00 34    	bra       LE, 0x1998 <.L30>
    1992:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1994:	11 00 32    	bra       Z, 0x19b8 <.L31>
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    1996:	21 00 37    	bra       0x19da <.L34>

00001998 <.L30>:
    1998:	00 00 eb    	clr.w     w0
    199a:	00 0f 78    	mov.w     w0, [w14]
    199c:	08 00 37    	bra       0x19ae <.L32>

0000199e <.L33>:
    199e:	2e 00 90    	mov.w     [w14+4], w0
    19a0:	90 40 78    	mov.b     [w0], w1
    19a2:	2e 00 90    	mov.w     [w14+4], w0
    19a4:	00 00 e8    	inc.w     w0, w0
    19a6:	20 07 98    	mov.w     w0, [w14+4]
    19a8:	00 42 80    	mov.w     0x840, w0
    19aa:	48 04 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    19ac:	1e 0f e8    	inc.w     [w14], [w14]

000019ae <.L32>:
    19ae:	9e 00 78    	mov.w     [w14], w1
    19b0:	3e 00 90    	mov.w     [w14+6], w0
    19b2:	80 8f 50    	sub.w     w1, w0, [w15]
    19b4:	f4 ff 39    	bra       NC, 0x199e <.L33>
    19b6:	11 00 37    	bra       0x19da <.L34>

000019b8 <.L31>:
    19b8:	00 00 eb    	clr.w     w0
    19ba:	00 0f 78    	mov.w     w0, [w14]
    19bc:	08 00 37    	bra       0x19ce <.L35>

000019be <.L36>:
    19be:	2e 00 90    	mov.w     [w14+4], w0
    19c0:	90 40 78    	mov.b     [w0], w1
    19c2:	2e 00 90    	mov.w     [w14+4], w0
    19c4:	00 00 e8    	inc.w     w0, w0
    19c6:	20 07 98    	mov.w     w0, [w14+4]
    19c8:	10 42 80    	mov.w     0x842, w0
    19ca:	38 04 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    19cc:	1e 0f e8    	inc.w     [w14], [w14]

000019ce <.L35>:
    19ce:	9e 00 78    	mov.w     [w14], w1
    19d0:	3e 00 90    	mov.w     [w14+6], w0
    19d2:	80 8f 50    	sub.w     w1, w0, [w15]
    19d4:	f4 ff 39    	bra       NC, 0x19be <.L36>
    19d6:	01 00 37    	bra       0x19da <.L34>

000019d8 <.L37>:
    19d8:	00 00 00    	nop       

000019da <.L34>:
    }
    return len;
    19da:	3e 00 90    	mov.w     [w14+6], w0
}
    19dc:	00 80 fa    	ulnk      
    19de:	00 00 06    	return    

000019e0 <_init_uart>:

void init_uart(void) {
    19e0:	00 00 fa    	lnk       #0x0
    init_pin();
    19e2:	c6 07 07    	rcall     0x2970 <_init_pin> <L0> <.LFB3> <.LFE2>

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    19e4:	40 6d 20    	mov.w     #0x6d4, w0
    19e6:	80 1f 78    	mov.w     w0, [w15++]
    19e8:	57 01 20    	mov.w     #0x15, w7
    19ea:	86 c0 b3    	mov.b     #0x8, w6
    19ec:	80 82 eb    	setm.w    w5
    19ee:	64 c0 b3    	mov.b     #0x6, w4
    19f0:	80 01 eb    	clr.w     w3
    19f2:	02 2f 20    	mov.w     #0x2f0, w2
    19f4:	21 2f 20    	mov.w     #0x2f2, w1
    19f6:	c0 ae 20    	mov.w     #0xaec, w0
    19f8:	cf 08 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    19fa:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    19fc:	a0 6d 20    	mov.w     #0x6da, w0
    19fe:	80 1f 78    	mov.w     w0, [w15++]
    1a00:	a7 01 20    	mov.w     #0x1a, w7
    1a02:	00 43 eb    	clr.b     w6
    1a04:	80 82 eb    	setm.w    w5
    1a06:	74 c0 b3    	mov.b     #0x7, w4
    1a08:	80 01 eb    	clr.w     w3
    1a0a:	02 2f 20    	mov.w     #0x2f0, w2
    1a0c:	21 2f 20    	mov.w     #0x2f2, w1
    1a0e:	20 b0 20    	mov.w     #0xb02, w0
    1a10:	c3 08 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    1a12:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    1a14:	40 00 20    	mov.w     #0x4, w0
    1a16:	80 1f 78    	mov.w     w0, [w15++]
    1a18:	30 00 20    	mov.w     #0x3, w0
    1a1a:	80 1f 78    	mov.w     w0, [w15++]
    1a1c:	80 c0 b3    	mov.b     #0x8, w0
    1a1e:	80 1f 78    	mov.w     w0, [w15++]
    1a20:	00 40 eb    	clr.b     w0
    1a22:	80 1f 78    	mov.w     w0, [w15++]
    1a24:	40 6a 20    	mov.w     #0x6a4, w0
    1a26:	80 1f 78    	mov.w     w0, [w15++]
    1a28:	40 6a 20    	mov.w     #0x6a4, w0
    1a2a:	80 1f 78    	mov.w     w0, [w15++]
    1a2c:	b0 c0 b3    	mov.b     #0xb, w0
    1a2e:	80 1f 78    	mov.w     w0, [w15++]
    1a30:	c0 c0 b3    	mov.b     #0xc, w0
    1a32:	80 1f 78    	mov.w     w0, [w15++]
    1a34:	47 09 20    	mov.w     #0x94, w7
    1a36:	46 08 20    	mov.w     #0x84, w6
    1a38:	85 22 20    	mov.w     #0x228, w5
    1a3a:	64 22 20    	mov.w     #0x226, w4
    1a3c:	43 22 20    	mov.w     #0x224, w3
    1a3e:	22 22 20    	mov.w     #0x222, w2
    1a40:	01 22 20    	mov.w     #0x220, w1
    1a42:	c0 9f 20    	mov.w     #0x9fc, w0
    1a44:	6b 00 07    	rcall     0x1b1c <_uart_init> <L0> <.LFB16> <.LFE15>
    1a46:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    1a48:	60 00 20    	mov.w     #0x6, w0
    1a4a:	80 1f 78    	mov.w     w0, [w15++]
    1a4c:	50 00 20    	mov.w     #0x5, w0
    1a4e:	80 1f 78    	mov.w     w0, [w15++]
    1a50:	80 c0 b3    	mov.b     #0x8, w0
    1a52:	80 1f 78    	mov.w     w0, [w15++]
    1a54:	00 40 eb    	clr.b     w0
    1a56:	80 1f 78    	mov.w     w0, [w15++]
    1a58:	60 6a 20    	mov.w     #0x6a6, w0
    1a5a:	80 1f 78    	mov.w     w0, [w15++]
    1a5c:	60 6a 20    	mov.w     #0x6a6, w0
    1a5e:	80 1f 78    	mov.w     w0, [w15++]
    1a60:	e0 c0 b3    	mov.b     #0xe, w0
    1a62:	80 1f 78    	mov.w     w0, [w15++]
    1a64:	f0 c0 b3    	mov.b     #0xf, w0
    1a66:	80 1f 78    	mov.w     w0, [w15++]
    1a68:	67 09 20    	mov.w     #0x96, w7
    1a6a:	66 08 20    	mov.w     #0x86, w6
    1a6c:	85 23 20    	mov.w     #0x238, w5
    1a6e:	64 23 20    	mov.w     #0x236, w4
    1a70:	43 23 20    	mov.w     #0x234, w3
    1a72:	22 23 20    	mov.w     #0x232, w2
    1a74:	01 23 20    	mov.w     #0x230, w1
    1a76:	80 a3 20    	mov.w     #0xa38, w0
    1a78:	51 00 07    	rcall     0x1b1c <_uart_init> <L0> <.LFB16> <.LFE15>
    1a7a:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    1a7c:	d0 01 20    	mov.w     #0x1d, w0
    1a7e:	80 1f 78    	mov.w     w0, [w15++]
    1a80:	c0 01 20    	mov.w     #0x1c, w0
    1a82:	80 1f 78    	mov.w     w0, [w15++]
    1a84:	80 c0 b3    	mov.b     #0x8, w0
    1a86:	80 1f 78    	mov.w     w0, [w15++]
    1a88:	80 c0 b3    	mov.b     #0x8, w0
    1a8a:	80 1f 78    	mov.w     w0, [w15++]
    1a8c:	a0 6a 20    	mov.w     #0x6aa, w0
    1a8e:	80 1f 78    	mov.w     w0, [w15++]
    1a90:	20 6a 20    	mov.w     #0x6a2, w0
    1a92:	80 1f 78    	mov.w     w0, [w15++]
    1a94:	20 c0 b3    	mov.b     #0x2, w0
    1a96:	80 1f 78    	mov.w     w0, [w15++]
    1a98:	30 c0 b3    	mov.b     #0x3, w0
    1a9a:	80 1f 78    	mov.w     w0, [w15++]
    1a9c:	e7 09 20    	mov.w     #0x9e, w7
    1a9e:	e6 08 20    	mov.w     #0x8e, w6
    1aa0:	85 25 20    	mov.w     #0x258, w5
    1aa2:	64 25 20    	mov.w     #0x256, w4
    1aa4:	43 25 20    	mov.w     #0x254, w3
    1aa6:	22 25 20    	mov.w     #0x252, w2
    1aa8:	01 25 20    	mov.w     #0x250, w1
    1aaa:	40 a7 20    	mov.w     #0xa74, w0
    1aac:	37 00 07    	rcall     0x1b1c <_uart_init> <L0> <.LFB16> <.LFE15>
    1aae:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    1ab0:	f0 01 20    	mov.w     #0x1f, w0
    1ab2:	80 1f 78    	mov.w     w0, [w15++]
    1ab4:	e0 01 20    	mov.w     #0x1e, w0
    1ab6:	80 1f 78    	mov.w     w0, [w15++]
    1ab8:	80 c0 b3    	mov.b     #0x8, w0
    1aba:	80 1f 78    	mov.w     w0, [w15++]
    1abc:	00 40 eb    	clr.b     w0
    1abe:	80 1f 78    	mov.w     w0, [w15++]
    1ac0:	60 6b 20    	mov.w     #0x6b6, w0
    1ac2:	80 1f 78    	mov.w     w0, [w15++]
    1ac4:	60 6b 20    	mov.w     #0x6b6, w0
    1ac6:	80 1f 78    	mov.w     w0, [w15++]
    1ac8:	80 c0 b3    	mov.b     #0x8, w0
    1aca:	80 1f 78    	mov.w     w0, [w15++]
    1acc:	90 c0 b3    	mov.b     #0x9, w0
    1ace:	80 1f 78    	mov.w     w0, [w15++]
    1ad0:	e7 09 20    	mov.w     #0x9e, w7
    1ad2:	e6 08 20    	mov.w     #0x8e, w6
    1ad4:	85 2b 20    	mov.w     #0x2b8, w5
    1ad6:	64 2b 20    	mov.w     #0x2b6, w4
    1ad8:	43 2b 20    	mov.w     #0x2b4, w3
    1ada:	22 2b 20    	mov.w     #0x2b2, w2
    1adc:	01 2b 20    	mov.w     #0x2b0, w1
    1ade:	00 ab 20    	mov.w     #0xab0, w0
    1ae0:	1d 00 07    	rcall     0x1b1c <_uart_init> <L0> <.LFB16> <.LFE15>
    1ae2:	f0 87 57    	sub.w     w15, #0x10, w15
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    1ae4:	00 00 eb    	clr.w     w0
    1ae6:	80 1f 78    	mov.w     w0, [w15++]
    1ae8:	00 00 eb    	clr.w     w0
    1aea:	80 1f 78    	mov.w     w0, [w15++]
    1aec:	00 00 eb    	clr.w     w0
    1aee:	80 1f 78    	mov.w     w0, [w15++]
    1af0:	00 00 eb    	clr.w     w0
    1af2:	80 1f 78    	mov.w     w0, [w15++]
    1af4:	00 00 eb    	clr.w     w0
    1af6:	80 1f 78    	mov.w     w0, [w15++]
    1af8:	10 00 20    	mov.w     #0x1, w0
    1afa:	80 1f 78    	mov.w     w0, [w15++]
    1afc:	e5 c4 b3    	mov.b     #0x4e, w5
    1afe:	06 00 20    	mov.w     #0x0, w6
    1b00:	67 69 24    	mov.w     #0x4696, w7
    1b02:	00 02 eb    	clr.w     w4
    1b04:	80 01 eb    	clr.w     w3
    1b06:	22 b0 20    	mov.w     #0xb02, w2
    1b08:	c1 ae 20    	mov.w     #0xaec, w1
    1b0a:	c0 9f 20    	mov.w     #0x9fc, w0
    1b0c:	72 00 07    	rcall     0x1bf2 <_uart_open> <L0> <.LFB17> <.LFE16>
    1b0e:	ec 87 57    	sub.w     w15, #0xc, w15
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1b10:	c0 9f 20    	mov.w     #0x9fc, w0
    1b12:	00 42 88    	mov.w     w0, 0x840
    _stderr = &uart1;
    1b14:	c0 9f 20    	mov.w     #0x9fc, w0
    1b16:	10 42 88    	mov.w     w0, 0x842
}
    1b18:	00 80 fa    	ulnk      
    1b1a:	00 00 06    	return    

00001b1c <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1b1c:	10 00 fa    	lnk       #0x10
    1b1e:	00 0f 78    	mov.w     w0, [w14]
    1b20:	11 07 98    	mov.w     w1, [w14+2]
    1b22:	22 07 98    	mov.w     w2, [w14+4]
    1b24:	33 07 98    	mov.w     w3, [w14+6]
    1b26:	44 07 98    	mov.w     w4, [w14+8]
    1b28:	55 07 98    	mov.w     w5, [w14+10]
    1b2a:	66 07 98    	mov.w     w6, [w14+12]
    1b2c:	77 07 98    	mov.w     w7, [w14+14]
    self->UxMODE = UxMODE;
    1b2e:	1e 00 78    	mov.w     [w14], w0
    1b30:	9e 00 90    	mov.w     [w14+2], w1
    1b32:	01 08 78    	mov.w     w1, [w0]
    self->UxSTA = UxSTA;
    1b34:	1e 00 78    	mov.w     [w14], w0
    1b36:	ae 00 90    	mov.w     [w14+4], w1
    1b38:	11 00 98    	mov.w     w1, [w0+2]
    self->UxTXREG = UxTXREG;
    1b3a:	1e 00 78    	mov.w     [w14], w0
    1b3c:	be 00 90    	mov.w     [w14+6], w1
    1b3e:	21 00 98    	mov.w     w1, [w0+4]
    self->UxRXREG = UxRXREG;
    1b40:	1e 00 78    	mov.w     [w14], w0
    1b42:	ce 00 90    	mov.w     [w14+8], w1
    1b44:	31 00 98    	mov.w     w1, [w0+6]
    self->UxBRG = UxBRG;
    1b46:	1e 00 78    	mov.w     [w14], w0
    1b48:	de 00 90    	mov.w     [w14+10], w1
    1b4a:	41 00 98    	mov.w     w1, [w0+8]
    self->IFSy = IFSy;
    1b4c:	1e 00 78    	mov.w     [w14], w0
    1b4e:	ee 00 90    	mov.w     [w14+12], w1
    1b50:	51 00 98    	mov.w     w1, [w0+10]
    self->IECy = IECy;
    1b52:	1e 00 78    	mov.w     [w14], w0
    1b54:	fe 00 90    	mov.w     [w14+14], w1
    1b56:	61 00 98    	mov.w     w1, [w0+12]
    self->UxTXIF = UxTXIF;
    1b58:	1e 00 78    	mov.w     [w14], w0
    1b5a:	8e f8 97    	mov.b     [w14-8], w1
    1b5c:	61 48 98    	mov.b     w1, [w0+14]
    self->UxRXIF = UxRXIF;
    1b5e:	1e 00 78    	mov.w     [w14], w0
    1b60:	ee f0 97    	mov.b     [w14-10], w1
    1b62:	71 48 98    	mov.b     w1, [w0+15]
    self->RXrpinr = RXrpinr;
    1b64:	1e 00 78    	mov.w     [w14], w0
    1b66:	ae b8 97    	mov.w     [w14-12], w1
    1b68:	01 08 98    	mov.w     w1, [w0+16]
    self->CTSrpinr = CTSrpinr;
    1b6a:	1e 00 78    	mov.w     [w14], w0
    1b6c:	9e b8 97    	mov.w     [w14-14], w1
    1b6e:	11 08 98    	mov.w     w1, [w0+18]
    self->RXrpshift = RXrpshift;
    1b70:	1e 00 78    	mov.w     [w14], w0
    1b72:	8e f0 97    	mov.b     [w14-16], w1
    1b74:	41 50 98    	mov.b     w1, [w0+20]
    self->CTSrpshift = CTSrpshift;
    1b76:	1e 00 78    	mov.w     [w14], w0
    1b78:	ee e8 97    	mov.b     [w14-18], w1
    1b7a:	51 50 98    	mov.b     w1, [w0+21]
    self->TXrpnum = TXrpnum;
    1b7c:	1e 00 78    	mov.w     [w14], w0
    1b7e:	ee b0 97    	mov.w     [w14-20], w1
    1b80:	31 08 98    	mov.w     w1, [w0+22]
    self->RTSrpnum = RTSrpnum;
    1b82:	1e 00 78    	mov.w     [w14], w0
    1b84:	de b0 97    	mov.w     [w14-22], w1
    1b86:	41 08 98    	mov.w     w1, [w0+24]
    self->TX = NULL;
    1b88:	1e 00 78    	mov.w     [w14], w0
    1b8a:	80 00 eb    	clr.w     w1
    1b8c:	51 08 98    	mov.w     w1, [w0+26]
    self->RX = NULL;
    1b8e:	1e 00 78    	mov.w     [w14], w0
    1b90:	80 00 eb    	clr.w     w1
    1b92:	61 08 98    	mov.w     w1, [w0+28]
    self->RTS = NULL;
    1b94:	1e 00 78    	mov.w     [w14], w0
    1b96:	80 00 eb    	clr.w     w1
    1b98:	71 08 98    	mov.w     w1, [w0+30]
    self->CTS = NULL;
    1b9a:	1e 00 78    	mov.w     [w14], w0
    1b9c:	80 00 eb    	clr.w     w1
    1b9e:	01 10 98    	mov.w     w1, [w0+32]
    self->TXbuffer.data = NULL;
    1ba0:	1e 00 78    	mov.w     [w14], w0
    1ba2:	80 00 eb    	clr.w     w1
    1ba4:	11 10 98    	mov.w     w1, [w0+34]
    self->TXbuffer.length = 0;
    1ba6:	1e 00 78    	mov.w     [w14], w0
    1ba8:	80 00 eb    	clr.w     w1
    1baa:	21 10 98    	mov.w     w1, [w0+36]
    self->TXbuffer.head = 0;
    1bac:	1e 00 78    	mov.w     [w14], w0
    1bae:	80 00 eb    	clr.w     w1
    1bb0:	31 10 98    	mov.w     w1, [w0+38]
    self->TXbuffer.tail = 0;
    1bb2:	1e 00 78    	mov.w     [w14], w0
    1bb4:	80 00 eb    	clr.w     w1
    1bb6:	41 10 98    	mov.w     w1, [w0+40]
    self->TXbuffer.count = 0;
    1bb8:	1e 00 78    	mov.w     [w14], w0
    1bba:	80 00 eb    	clr.w     w1
    1bbc:	51 10 98    	mov.w     w1, [w0+42]
    self->RXbuffer.data = NULL;
    1bbe:	1e 00 78    	mov.w     [w14], w0
    1bc0:	80 00 eb    	clr.w     w1
    1bc2:	61 10 98    	mov.w     w1, [w0+44]
    self->RXbuffer.length = 0;
    1bc4:	1e 00 78    	mov.w     [w14], w0
    1bc6:	80 00 eb    	clr.w     w1
    1bc8:	71 10 98    	mov.w     w1, [w0+46]
    self->RXbuffer.head = 0;
    1bca:	1e 00 78    	mov.w     [w14], w0
    1bcc:	80 00 eb    	clr.w     w1
    1bce:	01 18 98    	mov.w     w1, [w0+48]
    self->RXbuffer.tail = 0;
    1bd0:	1e 00 78    	mov.w     [w14], w0
    1bd2:	80 00 eb    	clr.w     w1
    1bd4:	11 18 98    	mov.w     w1, [w0+50]
    self->RXbuffer.count = 0;
    1bd6:	1e 00 78    	mov.w     [w14], w0
    1bd8:	80 00 eb    	clr.w     w1
    1bda:	21 18 98    	mov.w     w1, [w0+52]
    self->TXthreshold = 1;
    1bdc:	1e 00 78    	mov.w     [w14], w0
    1bde:	11 00 20    	mov.w     #0x1, w1
    1be0:	31 18 98    	mov.w     w1, [w0+54]
    self->putc = NULL;
    1be2:	1e 00 78    	mov.w     [w14], w0
    1be4:	80 00 eb    	clr.w     w1
    1be6:	41 18 98    	mov.w     w1, [w0+56]
    self->getc = NULL;
    1be8:	1e 00 78    	mov.w     [w14], w0
    1bea:	80 00 eb    	clr.w     w1
    1bec:	51 18 98    	mov.w     w1, [w0+58]
}
    1bee:	00 80 fa    	ulnk      
    1bf0:	00 00 06    	return    

00001bf2 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1bf2:	10 00 fa    	lnk       #0x10
    1bf4:	88 1f 78    	mov.w     w8, [w15++]
    1bf6:	00 0f 78    	mov.w     w0, [w14]
    1bf8:	11 07 98    	mov.w     w1, [w14+2]
    1bfa:	22 07 98    	mov.w     w2, [w14+4]
    1bfc:	33 07 98    	mov.w     w3, [w14+6]
    1bfe:	44 07 98    	mov.w     w4, [w14+8]
    1c00:	56 07 98    	mov.w     w6, [w14+10]
    1c02:	67 07 98    	mov.w     w7, [w14+12]
    1c04:	65 4f 98    	mov.b     w5, [w14+14]
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1c06:	1e 00 78    	mov.w     [w14], w0
    1c08:	10 00 78    	mov.w     [w0], w0
    1c0a:	80 00 eb    	clr.w     w1
    1c0c:	01 08 78    	mov.w     w1, [w0]
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1c0e:	1e 00 90    	mov.w     [w14+2], w0
    1c10:	60 00 90    	mov.w     [w0+12], w0
    1c12:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c14:	0c 02 32    	bra       Z, 0x202e <.L73>
    1c16:	2e 00 90    	mov.w     [w14+4], w0
    1c18:	60 00 90    	mov.w     [w0+12], w0
    1c1a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c1c:	0a 02 32    	bra       Z, 0x2032 <.L74>
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1c1e:	1e 00 90    	mov.w     [w14+2], w0
    1c20:	00 08 90    	mov.w     [w0+16], w0
    1c22:	00 00 e0    	cp0.w     w0
    1c24:	69 00 3a    	bra       NZ, 0x1cf8 <.L44>
    1c26:	2e 00 90    	mov.w     [w14+4], w0
    1c28:	00 08 90    	mov.w     [w0+16], w0
    1c2a:	00 00 e0    	cp0.w     w0
    1c2c:	65 00 3a    	bra       NZ, 0x1cf8 <.L44>
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1c2e:	1e 00 90    	mov.w     [w14+2], w0
    1c30:	06 08 07    	rcall     0x2c3e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_set(TX);
    1c32:	1e 00 90    	mov.w     [w14+2], w0
    1c34:	61 08 07    	rcall     0x2cf8 <_pin_set> <L0> <.LFB8> <.LFE7>
        pin_digitalIn(RX);
    1c36:	2e 00 90    	mov.w     [w14+4], w0
    1c38:	db 07 07    	rcall     0x2bf0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
        self->TX = TX;
    1c3a:	1e 00 78    	mov.w     [w14], w0
    1c3c:	9e 00 90    	mov.w     [w14+2], w1
    1c3e:	51 08 98    	mov.w     w1, [w0+26]
        TX->owner = (void *)self;
    1c40:	1e 00 90    	mov.w     [w14+2], w0
    1c42:	9e 00 78    	mov.w     [w14], w1
    1c44:	01 08 98    	mov.w     w1, [w0+16]
        TX->write = NULL;
    1c46:	1e 00 90    	mov.w     [w14+2], w0
    1c48:	80 00 eb    	clr.w     w1
    1c4a:	11 08 98    	mov.w     w1, [w0+18]
        TX->read = NULL;
    1c4c:	1e 00 90    	mov.w     [w14+2], w0
    1c4e:	80 00 eb    	clr.w     w1
    1c50:	21 08 98    	mov.w     w1, [w0+20]
        self->RX = RX;
    1c52:	1e 00 78    	mov.w     [w14], w0
    1c54:	ae 00 90    	mov.w     [w14+4], w1
    1c56:	61 08 98    	mov.w     w1, [w0+28]
        RX->owner = (void *)self;
    1c58:	2e 00 90    	mov.w     [w14+4], w0
    1c5a:	9e 00 78    	mov.w     [w14], w1
    1c5c:	01 08 98    	mov.w     w1, [w0+16]
        RX->write = NULL;
    1c5e:	2e 00 90    	mov.w     [w14+4], w0
    1c60:	80 00 eb    	clr.w     w1
    1c62:	11 08 98    	mov.w     w1, [w0+18]
        RX->read = NULL;
    1c64:	2e 00 90    	mov.w     [w14+4], w0
    1c66:	80 00 eb    	clr.w     w1
    1c68:	21 08 98    	mov.w     w1, [w0+20]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1c6a:	11 3a 80    	mov.w     0x742, w1
    1c6c:	f0 0b 20    	mov.w     #0xbf, w0
    1c6e:	00 81 60    	and.w     w1, w0, w2
    1c70:	60 04 20    	mov.w     #0x46, w0
    1c72:	71 05 20    	mov.w     #0x57, w1
    1c74:	23 74 20    	mov.w     #0x742, w3
    1c76:	80 49 78    	mov.b     w0, [w3]
    1c78:	81 49 78    	mov.b     w1, [w3]
    1c7a:	82 49 78    	mov.b     w2, [w3]
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1c7c:	1e 00 90    	mov.w     [w14+2], w0
    1c7e:	70 00 90    	mov.w     [w0+14], w0
    1c80:	9e 00 90    	mov.w     [w14+2], w1
    1c82:	f1 00 90    	mov.w     [w1+14], w1
    1c84:	11 01 78    	mov.w     [w1], w2
    1c86:	9e 00 90    	mov.w     [w14+2], w1
    1c88:	a1 48 90    	mov.b     [w1+10], w1
    1c8a:	81 80 fb    	ze        w1, w1
    1c8c:	f3 03 20    	mov.w     #0x3f, w3
    1c8e:	81 18 dd    	sl.w      w3, w1, w1
    1c90:	81 80 ea    	com.w     w1, w1
    1c92:	81 00 61    	and.w     w2, w1, w1
    1c94:	01 08 78    	mov.w     w1, [w0]
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1c96:	1e 00 90    	mov.w     [w14+2], w0
    1c98:	70 00 90    	mov.w     [w0+14], w0
    1c9a:	9e 00 90    	mov.w     [w14+2], w1
    1c9c:	f1 00 90    	mov.w     [w1+14], w1
    1c9e:	11 01 78    	mov.w     [w1], w2
    1ca0:	9e 00 78    	mov.w     [w14], w1
    1ca2:	b1 09 90    	mov.w     [w1+22], w3
    1ca4:	9e 00 90    	mov.w     [w14+2], w1
    1ca6:	a1 48 90    	mov.b     [w1+10], w1
    1ca8:	81 80 fb    	ze        w1, w1
    1caa:	81 18 dd    	sl.w      w3, w1, w1
    1cac:	82 80 70    	ior.w     w1, w2, w1
    1cae:	01 08 78    	mov.w     w1, [w0]
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1cb0:	1e 00 78    	mov.w     [w14], w0
    1cb2:	00 08 90    	mov.w     [w0+16], w0
    1cb4:	9e 00 78    	mov.w     [w14], w1
    1cb6:	81 08 90    	mov.w     [w1+16], w1
    1cb8:	11 01 78    	mov.w     [w1], w2
    1cba:	9e 00 78    	mov.w     [w14], w1
    1cbc:	c1 50 90    	mov.b     [w1+20], w1
    1cbe:	81 80 fb    	ze        w1, w1
    1cc0:	f3 03 20    	mov.w     #0x3f, w3
    1cc2:	81 18 dd    	sl.w      w3, w1, w1
    1cc4:	81 80 ea    	com.w     w1, w1
    1cc6:	81 00 61    	and.w     w2, w1, w1
    1cc8:	01 08 78    	mov.w     w1, [w0]
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1cca:	1e 00 78    	mov.w     [w14], w0
    1ccc:	00 08 90    	mov.w     [w0+16], w0
    1cce:	9e 00 78    	mov.w     [w14], w1
    1cd0:	81 08 90    	mov.w     [w1+16], w1
    1cd2:	11 01 78    	mov.w     [w1], w2
    1cd4:	ae 00 90    	mov.w     [w14+4], w1
    1cd6:	e1 01 90    	mov.w     [w1+12], w3
    1cd8:	9e 00 78    	mov.w     [w14], w1
    1cda:	c1 50 90    	mov.b     [w1+20], w1
    1cdc:	81 80 fb    	ze        w1, w1
    1cde:	81 18 dd    	sl.w      w3, w1, w1
    1ce0:	82 80 70    	ior.w     w1, w2, w1
    1ce2:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    1ce4:	10 3a 80    	mov.w     0x742, w0
    1ce6:	00 01 78    	mov.w     w0, w2
    1ce8:	02 60 a0    	bset.w    w2, #0x6
    1cea:	60 04 20    	mov.w     #0x46, w0
    1cec:	71 05 20    	mov.w     #0x57, w1
    1cee:	23 74 20    	mov.w     #0x742, w3
    1cf0:	80 49 78    	mov.b     w0, [w3]
    1cf2:	81 49 78    	mov.b     w1, [w3]
    1cf4:	82 49 78    	mov.b     w2, [w3]
    1cf6:	0a 00 37    	bra       0x1d0c <.L45>

00001cf8 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1cf8:	1e 00 78    	mov.w     [w14], w0
    1cfa:	d0 08 90    	mov.w     [w0+26], w1
    1cfc:	1e 00 90    	mov.w     [w14+2], w0
    1cfe:	80 8f 50    	sub.w     w1, w0, [w15]
    1d00:	9a 01 3a    	bra       NZ, 0x2036 <.L75>
    1d02:	1e 00 78    	mov.w     [w14], w0
    1d04:	e0 08 90    	mov.w     [w0+28], w1
    1d06:	2e 00 90    	mov.w     [w14+4], w0
    1d08:	80 8f 50    	sub.w     w1, w0, [w15]
    1d0a:	97 01 3a    	bra       NZ, 0x203a <.L76>

00001d0c <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1d0c:	3e 00 90    	mov.w     [w14+6], w0
    1d0e:	00 00 e0    	cp0.w     w0
    1d10:	87 00 32    	bra       Z, 0x1e20 <.L47>
    1d12:	4e 00 90    	mov.w     [w14+8], w0
    1d14:	00 00 e0    	cp0.w     w0
    1d16:	84 00 32    	bra       Z, 0x1e20 <.L47>
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1d18:	3e 00 90    	mov.w     [w14+6], w0
    1d1a:	60 00 90    	mov.w     [w0+12], w0
    1d1c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1d1e:	8f 01 32    	bra       Z, 0x203e <.L77>
    1d20:	4e 00 90    	mov.w     [w14+8], w0
    1d22:	60 00 90    	mov.w     [w0+12], w0
    1d24:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1d26:	8d 01 32    	bra       Z, 0x2042 <.L78>
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1d28:	3e 00 90    	mov.w     [w14+6], w0
    1d2a:	00 08 90    	mov.w     [w0+16], w0
    1d2c:	00 00 e0    	cp0.w     w0
    1d2e:	69 00 3a    	bra       NZ, 0x1e02 <.L50>
    1d30:	4e 00 90    	mov.w     [w14+8], w0
    1d32:	00 08 90    	mov.w     [w0+16], w0
    1d34:	00 00 e0    	cp0.w     w0
    1d36:	65 00 3a    	bra       NZ, 0x1e02 <.L50>
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1d38:	3e 00 90    	mov.w     [w14+6], w0
    1d3a:	81 07 07    	rcall     0x2c3e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
            pin_set(RTS);
    1d3c:	3e 00 90    	mov.w     [w14+6], w0
    1d3e:	dc 07 07    	rcall     0x2cf8 <_pin_set> <L0> <.LFB8> <.LFE7>
            pin_digitalIn(CTS);
    1d40:	4e 00 90    	mov.w     [w14+8], w0
    1d42:	56 07 07    	rcall     0x2bf0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
            self->RTS = RTS;
    1d44:	1e 00 78    	mov.w     [w14], w0
    1d46:	be 00 90    	mov.w     [w14+6], w1
    1d48:	71 08 98    	mov.w     w1, [w0+30]
            RTS->owner = (void *)self;
    1d4a:	3e 00 90    	mov.w     [w14+6], w0
    1d4c:	9e 00 78    	mov.w     [w14], w1
    1d4e:	01 08 98    	mov.w     w1, [w0+16]
            RTS->write = NULL;
    1d50:	3e 00 90    	mov.w     [w14+6], w0
    1d52:	80 00 eb    	clr.w     w1
    1d54:	11 08 98    	mov.w     w1, [w0+18]
            RTS->read = NULL;
    1d56:	3e 00 90    	mov.w     [w14+6], w0
    1d58:	80 00 eb    	clr.w     w1
    1d5a:	21 08 98    	mov.w     w1, [w0+20]
            self->CTS = CTS;
    1d5c:	1e 00 78    	mov.w     [w14], w0
    1d5e:	ce 00 90    	mov.w     [w14+8], w1
    1d60:	01 10 98    	mov.w     w1, [w0+32]
            CTS->owner = (void *)self;
    1d62:	4e 00 90    	mov.w     [w14+8], w0
    1d64:	9e 00 78    	mov.w     [w14], w1
    1d66:	01 08 98    	mov.w     w1, [w0+16]
            CTS->write = NULL;
    1d68:	4e 00 90    	mov.w     [w14+8], w0
    1d6a:	80 00 eb    	clr.w     w1
    1d6c:	11 08 98    	mov.w     w1, [w0+18]
            CTS->read = NULL;
    1d6e:	4e 00 90    	mov.w     [w14+8], w0
    1d70:	80 00 eb    	clr.w     w1
    1d72:	21 08 98    	mov.w     w1, [w0+20]
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1d74:	11 3a 80    	mov.w     0x742, w1
    1d76:	f0 0b 20    	mov.w     #0xbf, w0
    1d78:	00 81 60    	and.w     w1, w0, w2
    1d7a:	60 04 20    	mov.w     #0x46, w0
    1d7c:	71 05 20    	mov.w     #0x57, w1
    1d7e:	23 74 20    	mov.w     #0x742, w3
    1d80:	80 49 78    	mov.b     w0, [w3]
    1d82:	81 49 78    	mov.b     w1, [w3]
    1d84:	82 49 78    	mov.b     w2, [w3]
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1d86:	3e 00 90    	mov.w     [w14+6], w0
    1d88:	70 00 90    	mov.w     [w0+14], w0
    1d8a:	be 00 90    	mov.w     [w14+6], w1
    1d8c:	f1 00 90    	mov.w     [w1+14], w1
    1d8e:	11 01 78    	mov.w     [w1], w2
    1d90:	be 00 90    	mov.w     [w14+6], w1
    1d92:	a1 48 90    	mov.b     [w1+10], w1
    1d94:	81 80 fb    	ze        w1, w1
    1d96:	f3 03 20    	mov.w     #0x3f, w3
    1d98:	81 18 dd    	sl.w      w3, w1, w1
    1d9a:	81 80 ea    	com.w     w1, w1
    1d9c:	81 00 61    	and.w     w2, w1, w1
    1d9e:	01 08 78    	mov.w     w1, [w0]
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1da0:	3e 00 90    	mov.w     [w14+6], w0
    1da2:	70 00 90    	mov.w     [w0+14], w0
    1da4:	be 00 90    	mov.w     [w14+6], w1
    1da6:	f1 00 90    	mov.w     [w1+14], w1
    1da8:	11 01 78    	mov.w     [w1], w2
    1daa:	9e 00 78    	mov.w     [w14], w1
    1dac:	c1 09 90    	mov.w     [w1+24], w3
    1dae:	be 00 90    	mov.w     [w14+6], w1
    1db0:	a1 48 90    	mov.b     [w1+10], w1
    1db2:	81 80 fb    	ze        w1, w1
    1db4:	81 18 dd    	sl.w      w3, w1, w1
    1db6:	82 80 70    	ior.w     w1, w2, w1
    1db8:	01 08 78    	mov.w     w1, [w0]
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1dba:	1e 00 78    	mov.w     [w14], w0
    1dbc:	10 08 90    	mov.w     [w0+18], w0
    1dbe:	9e 00 78    	mov.w     [w14], w1
    1dc0:	91 08 90    	mov.w     [w1+18], w1
    1dc2:	11 01 78    	mov.w     [w1], w2
    1dc4:	9e 00 78    	mov.w     [w14], w1
    1dc6:	d1 50 90    	mov.b     [w1+21], w1
    1dc8:	81 80 fb    	ze        w1, w1
    1dca:	f3 03 20    	mov.w     #0x3f, w3
    1dcc:	81 18 dd    	sl.w      w3, w1, w1
    1dce:	81 80 ea    	com.w     w1, w1
    1dd0:	81 00 61    	and.w     w2, w1, w1
    1dd2:	01 08 78    	mov.w     w1, [w0]

00001dd4 <.L0>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1dd4:	1e 00 78    	mov.w     [w14], w0
    1dd6:	10 08 90    	mov.w     [w0+18], w0
    1dd8:	9e 00 78    	mov.w     [w14], w1
    1dda:	91 08 90    	mov.w     [w1+18], w1
    1ddc:	11 01 78    	mov.w     [w1], w2
    1dde:	ce 00 90    	mov.w     [w14+8], w1
    1de0:	e1 01 90    	mov.w     [w1+12], w3
    1de2:	9e 00 78    	mov.w     [w14], w1
    1de4:	d1 50 90    	mov.b     [w1+21], w1
    1de6:	81 80 fb    	ze        w1, w1
    1de8:	81 18 dd    	sl.w      w3, w1, w1
    1dea:	82 80 70    	ior.w     w1, w2, w1
    1dec:	01 08 78    	mov.w     w1, [w0]

00001dee <.L0>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1dee:	10 3a 80    	mov.w     0x742, w0
    1df0:	00 01 78    	mov.w     w0, w2
    1df2:	02 60 a0    	bset.w    w2, #0x6
    1df4:	60 04 20    	mov.w     #0x46, w0
    1df6:	71 05 20    	mov.w     #0x57, w1
    1df8:	23 74 20    	mov.w     #0x742, w3
    1dfa:	80 49 78    	mov.b     w0, [w3]
    1dfc:	81 49 78    	mov.b     w1, [w3]
    1dfe:	82 49 78    	mov.b     w2, [w3]
    1e00:	0a 00 37    	bra       0x1e16 <.L51>

00001e02 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1e02:	1e 00 78    	mov.w     [w14], w0
    1e04:	f0 08 90    	mov.w     [w0+30], w1
    1e06:	3e 00 90    	mov.w     [w14+6], w0
    1e08:	80 8f 50    	sub.w     w1, w0, [w15]
    1e0a:	1d 01 3a    	bra       NZ, 0x2046 <.L79>
    1e0c:	1e 00 78    	mov.w     [w14], w0
    1e0e:	80 10 90    	mov.w     [w0+32], w1
    1e10:	4e 00 90    	mov.w     [w14+8], w0
    1e12:	80 8f 50    	sub.w     w1, w0, [w15]
    1e14:	1a 01 3a    	bra       NZ, 0x204a <.L80>

00001e16 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1e16:	1e 00 78    	mov.w     [w14], w0
    1e18:	10 00 78    	mov.w     [w0], w0
    1e1a:	01 20 20    	mov.w     #0x200, w1
    1e1c:	01 08 78    	mov.w     w1, [w0]
    1e1e:	06 00 37    	bra       0x1e2c <.L53>

00001e20 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1e20:	3e 00 90    	mov.w     [w14+6], w0
    1e22:	00 00 e0    	cp0.w     w0
    1e24:	14 01 3a    	bra       NZ, 0x204e <.L81>
    1e26:	4e 00 90    	mov.w     [w14+8], w0
    1e28:	00 00 e0    	cp0.w     w0
    1e2a:	13 01 3a    	bra       NZ, 0x2052 <.L82>

00001e2c <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1e2c:	18 c0 b3    	mov.b     #0x1, w8
    1e2e:	02 40 22    	mov.w     #0x2400, w2
    1e30:	43 a7 24    	mov.w     #0x4a74, w3
    1e32:	5e 00 90    	mov.w     [w14+10], w0
    1e34:	ee 00 90    	mov.w     [w14+12], w1
    1e36:	af fa 07    	rcall     0x1396 <___gesf2> <___gtsf2>
    1e38:	00 00 e0    	cp0.w     w0
    1e3a:	01 00 3c    	bra       GT, 0x1e3e <.L55>
    1e3c:	00 44 eb    	clr.b     w8

00001e3e <.L55>:
    1e3e:	08 04 e0    	cp0.b     w8
    1e40:	04 00 32    	bra       Z, 0x1e4a <.L56>
        baudrate = FCY/4.;
    1e42:	00 40 22    	mov.w     #0x2400, w0
    1e44:	41 a7 24    	mov.w     #0x4a74, w1
    1e46:	50 07 98    	mov.w     w0, [w14+10]
    1e48:	61 07 98    	mov.w     w1, [w14+12]

00001e4a <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1e4a:	18 c0 b3    	mov.b     #0x1, w8
    1e4c:	02 40 22    	mov.w     #0x2400, w2
    1e4e:	43 17 24    	mov.w     #0x4174, w3
    1e50:	5e 00 90    	mov.w     [w14+10], w0
    1e52:	ee 00 90    	mov.w     [w14+12], w1
    1e54:	9e fa 07    	rcall     0x1392 <___eqsf2> <___lesf2> <___ltsf2>
    1e56:	00 00 e0    	cp0.w     w0
    1e58:	01 00 35    	bra       LT, 0x1e5c <.L57>
    1e5a:	00 44 eb    	clr.b     w8

00001e5c <.L57>:
    1e5c:	08 04 e0    	cp0.b     w8
    1e5e:	04 00 32    	bra       Z, 0x1e68 <.L58>
        baudrate = FCY/(16.*65536.);
    1e60:	00 40 22    	mov.w     #0x2400, w0
    1e62:	41 17 24    	mov.w     #0x4174, w1
    1e64:	50 07 98    	mov.w     w0, [w14+10]
    1e66:	61 07 98    	mov.w     w1, [w14+12]

00001e68 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1e68:	18 c0 b3    	mov.b     #0x1, w8
    1e6a:	02 40 22    	mov.w     #0x2400, w2
    1e6c:	43 27 24    	mov.w     #0x4274, w3
    1e6e:	5e 00 90    	mov.w     [w14+10], w0
    1e70:	ee 00 90    	mov.w     [w14+12], w1
    1e72:	8f fa 07    	rcall     0x1392 <___eqsf2> <___lesf2> <___ltsf2>
    1e74:	00 00 e0    	cp0.w     w0
    1e76:	01 00 34    	bra       LE, 0x1e7a <.L59>
    1e78:	00 44 eb    	clr.b     w8

00001e7a <.L59>:
    1e7a:	08 04 e0    	cp0.b     w8
    1e7c:	0f 00 32    	bra       Z, 0x1e9c <.L60>
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1e7e:	1e 00 78    	mov.w     [w14], w0
    1e80:	40 04 90    	mov.w     [w0+8], w8
    1e82:	5e 01 90    	mov.w     [w14+10], w2
    1e84:	ee 01 90    	mov.w     [w14+12], w3
    1e86:	00 40 22    	mov.w     #0x2400, w0
    1e88:	41 97 24    	mov.w     #0x4974, w1
    1e8a:	41 fa 07    	rcall     0x130e <___divsf3>
    1e8c:	02 00 20    	mov.w     #0x0, w2
    1e8e:	03 f0 23    	mov.w     #0x3f00, w3
    1e90:	e1 f9 07    	rcall     0x1254 <___addsf3>
    1e92:	83 fa 07    	rcall     0x139a <___fixunssfsi>
    1e94:	00 00 78    	mov.w     w0, w0
    1e96:	00 00 e9    	dec.w     w0, w0
    1e98:	00 0c 78    	mov.w     w0, [w8]
    1e9a:	15 00 37    	bra       0x1ec6 <.L61>

00001e9c <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1e9c:	1e 00 78    	mov.w     [w14], w0
    1e9e:	10 00 78    	mov.w     [w0], w0
    1ea0:	9e 00 78    	mov.w     [w14], w1
    1ea2:	91 00 78    	mov.w     [w1], w1
    1ea4:	91 00 78    	mov.w     [w1], w1
    1ea6:	01 30 a0    	bset.w    w1, #0x3
    1ea8:	01 08 78    	mov.w     w1, [w0]
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1eaa:	1e 00 78    	mov.w     [w14], w0
    1eac:	40 04 90    	mov.w     [w0+8], w8
    1eae:	5e 01 90    	mov.w     [w14+10], w2
    1eb0:	ee 01 90    	mov.w     [w14+12], w3
    1eb2:	00 40 22    	mov.w     #0x2400, w0
    1eb4:	41 a7 24    	mov.w     #0x4a74, w1
    1eb6:	2b fa 07    	rcall     0x130e <___divsf3>
    1eb8:	02 00 20    	mov.w     #0x0, w2
    1eba:	03 f0 23    	mov.w     #0x3f00, w3
    1ebc:	cb f9 07    	rcall     0x1254 <___addsf3>
    1ebe:	6d fa 07    	rcall     0x139a <___fixunssfsi>
    1ec0:	00 00 78    	mov.w     w0, w0
    1ec2:	00 00 e9    	dec.w     w0, w0
    1ec4:	00 0c 78    	mov.w     w0, [w8]

00001ec6 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1ec6:	ee 48 90    	mov.b     [w14+14], w1
    1ec8:	50 c4 b3    	mov.b     #0x45, w0
    1eca:	80 cf 50    	sub.b     w1, w0, [w15]
    1ecc:	04 00 32    	bra       Z, 0x1ed6 <.L62>
    1ece:	ee 48 90    	mov.b     [w14+14], w1
    1ed0:	50 c6 b3    	mov.b     #0x65, w0
    1ed2:	80 cf 50    	sub.b     w1, w0, [w15]
    1ed4:	08 00 3a    	bra       NZ, 0x1ee6 <.L63>

00001ed6 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1ed6:	1e 00 78    	mov.w     [w14], w0
    1ed8:	10 00 78    	mov.w     [w0], w0
    1eda:	9e 00 78    	mov.w     [w14], w1
    1edc:	91 00 78    	mov.w     [w1], w1
    1ede:	91 00 78    	mov.w     [w1], w1
    1ee0:	01 10 a0    	bset.w    w1, #0x1
    1ee2:	01 08 78    	mov.w     w1, [w0]
    1ee4:	18 00 37    	bra       0x1f16 <.L64>

00001ee6 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1ee6:	ee 48 90    	mov.b     [w14+14], w1
    1ee8:	f0 c4 b3    	mov.b     #0x4f, w0
    1eea:	80 cf 50    	sub.b     w1, w0, [w15]
    1eec:	04 00 32    	bra       Z, 0x1ef6 <.L65>
    1eee:	ee 48 90    	mov.b     [w14+14], w1
    1ef0:	f0 c6 b3    	mov.b     #0x6f, w0
    1ef2:	80 cf 50    	sub.b     w1, w0, [w15]
    1ef4:	08 00 3a    	bra       NZ, 0x1f06 <.L66>

00001ef6 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1ef6:	1e 00 78    	mov.w     [w14], w0
    1ef8:	10 00 78    	mov.w     [w0], w0
    1efa:	9e 00 78    	mov.w     [w14], w1
    1efc:	91 00 78    	mov.w     [w1], w1
    1efe:	91 00 78    	mov.w     [w1], w1
    1f00:	01 20 a0    	bset.w    w1, #0x2
    1f02:	01 08 78    	mov.w     w1, [w0]
    1f04:	08 00 37    	bra       0x1f16 <.L64>

00001f06 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1f06:	ee 48 90    	mov.b     [w14+14], w1
    1f08:	e0 c4 b3    	mov.b     #0x4e, w0
    1f0a:	80 cf 50    	sub.b     w1, w0, [w15]
    1f0c:	04 00 32    	bra       Z, 0x1f16 <.L64>
    1f0e:	ee 48 90    	mov.b     [w14+14], w1
    1f10:	e0 c6 b3    	mov.b     #0x6e, w0
    1f12:	80 cf 50    	sub.b     w1, w0, [w15]
    1f14:	a0 00 3a    	bra       NZ, 0x2056 <.L83>

00001f16 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1f16:	4e b8 97    	mov.w     [w14-8], w0
    1f18:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1f1a:	08 00 3a    	bra       NZ, 0x1f2c <.L67>
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1f1c:	1e 00 78    	mov.w     [w14], w0
    1f1e:	10 00 78    	mov.w     [w0], w0
    1f20:	9e 00 78    	mov.w     [w14], w1
    1f22:	91 00 78    	mov.w     [w1], w1
    1f24:	91 00 78    	mov.w     [w1], w1
    1f26:	01 00 a0    	bset.w    w1, #0x0
    1f28:	01 08 78    	mov.w     w1, [w0]
    1f2a:	03 00 37    	bra       0x1f32 <.L68>

00001f2c <.L67>:
    } else if (stopbits!=1) {
    1f2c:	4e b8 97    	mov.w     [w14-8], w0
    1f2e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1f30:	94 00 3a    	bra       NZ, 0x205a <.L84>

00001f32 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1f32:	2e b8 97    	mov.w     [w14-12], w0
    1f34:	00 00 e0    	cp0.w     w0
    1f36:	04 00 3a    	bra       NZ, 0x1f40 <.L69>
        self->putc = __putc_nobuffer;
    1f38:	1e 00 78    	mov.w     [w14], w0
    1f3a:	c1 61 21    	mov.w     #0x161c, w1
    1f3c:	41 18 98    	mov.w     w1, [w0+56]
    1f3e:	35 00 37    	bra       0x1faa <.L70>

00001f40 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1f40:	1e 00 78    	mov.w     [w14], w0
    1f42:	10 00 90    	mov.w     [w0+2], w0
    1f44:	9e 00 78    	mov.w     [w14], w1
    1f46:	91 00 90    	mov.w     [w1+2], w1
    1f48:	91 00 78    	mov.w     [w1], w1
    1f4a:	01 d0 a0    	bset.w    w1, #0xd
    1f4c:	01 08 78    	mov.w     w1, [w0]
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1f4e:	1e 00 78    	mov.w     [w14], w0
    1f50:	ae b8 97    	mov.w     [w14-12], w1
    1f52:	11 10 98    	mov.w     w1, [w0+34]
        self->TXbuffer.length = TXbufferlen;
    1f54:	1e 00 78    	mov.w     [w14], w0
    1f56:	9e b8 97    	mov.w     [w14-14], w1
    1f58:	21 10 98    	mov.w     w1, [w0+36]
        self->TXbuffer.head = 0;
    1f5a:	1e 00 78    	mov.w     [w14], w0
    1f5c:	80 00 eb    	clr.w     w1
    1f5e:	31 10 98    	mov.w     w1, [w0+38]
        self->TXbuffer.tail = 0;
    1f60:	1e 00 78    	mov.w     [w14], w0
    1f62:	80 00 eb    	clr.w     w1
    1f64:	41 10 98    	mov.w     w1, [w0+40]
        self->TXbuffer.count = 0;
    1f66:	1e 00 78    	mov.w     [w14], w0
    1f68:	80 00 eb    	clr.w     w1
    1f6a:	51 10 98    	mov.w     w1, [w0+42]
        self->TXthreshold = TXthreshold;
    1f6c:	1e 00 78    	mov.w     [w14], w0
    1f6e:	be b8 97    	mov.w     [w14-10], w1
    1f70:	31 18 98    	mov.w     w1, [w0+54]
        self->putc = __putc_buffer;
    1f72:	1e 00 78    	mov.w     [w14], w0
    1f74:	e1 65 21    	mov.w     #0x165e, w1
    1f76:	41 18 98    	mov.w     w1, [w0+56]
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1f78:	1e 00 78    	mov.w     [w14], w0
    1f7a:	50 00 90    	mov.w     [w0+10], w0
    1f7c:	9e 00 78    	mov.w     [w14], w1
    1f7e:	d1 00 90    	mov.w     [w1+10], w1
    1f80:	11 01 78    	mov.w     [w1], w2
    1f82:	9e 00 78    	mov.w     [w14], w1
    1f84:	e1 48 90    	mov.b     [w1+14], w1
    1f86:	81 80 fb    	ze        w1, w1
    1f88:	13 00 20    	mov.w     #0x1, w3
    1f8a:	81 18 dd    	sl.w      w3, w1, w1
    1f8c:	81 80 ea    	com.w     w1, w1
    1f8e:	81 00 61    	and.w     w2, w1, w1
    1f90:	01 08 78    	mov.w     w1, [w0]
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1f92:	1e 00 78    	mov.w     [w14], w0
    1f94:	60 00 90    	mov.w     [w0+12], w0
    1f96:	9e 00 78    	mov.w     [w14], w1
    1f98:	e1 00 90    	mov.w     [w1+12], w1
    1f9a:	11 01 78    	mov.w     [w1], w2
    1f9c:	9e 00 78    	mov.w     [w14], w1
    1f9e:	e1 48 90    	mov.b     [w1+14], w1
    1fa0:	81 80 fb    	ze        w1, w1
    1fa2:	13 00 20    	mov.w     #0x1, w3
    1fa4:	81 18 dd    	sl.w      w3, w1, w1
    1fa6:	82 80 70    	ior.w     w1, w2, w1
    1fa8:	01 08 78    	mov.w     w1, [w0]

00001faa <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1faa:	0e b8 97    	mov.w     [w14-16], w0
    1fac:	00 00 e0    	cp0.w     w0
    1fae:	04 00 3a    	bra       NZ, 0x1fb8 <.L71>
        self->getc = __getc_nobuffer;
    1fb0:	1e 00 78    	mov.w     [w14], w0
    1fb2:	01 64 21    	mov.w     #0x1640, w1
    1fb4:	51 18 98    	mov.w     w1, [w0+58]
    1fb6:	2b 00 37    	bra       0x200e <.L72>

00001fb8 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1fb8:	1e 00 78    	mov.w     [w14], w0
    1fba:	8e b8 97    	mov.w     [w14-16], w1
    1fbc:	61 10 98    	mov.w     w1, [w0+44]
        self->RXbuffer.length = RXbufferlen;
    1fbe:	1e 00 78    	mov.w     [w14], w0
    1fc0:	fe b0 97    	mov.w     [w14-18], w1
    1fc2:	71 10 98    	mov.w     w1, [w0+46]
        self->RXbuffer.head = 0;
    1fc4:	1e 00 78    	mov.w     [w14], w0
    1fc6:	80 00 eb    	clr.w     w1
    1fc8:	01 18 98    	mov.w     w1, [w0+48]
        self->RXbuffer.tail = 0;
    1fca:	1e 00 78    	mov.w     [w14], w0
    1fcc:	80 00 eb    	clr.w     w1
    1fce:	11 18 98    	mov.w     w1, [w0+50]
        self->RXbuffer.count = 0;
    1fd0:	1e 00 78    	mov.w     [w14], w0
    1fd2:	80 00 eb    	clr.w     w1
    1fd4:	21 18 98    	mov.w     w1, [w0+52]
        self->getc = __getc_buffer;
    1fd6:	1e 00 78    	mov.w     [w14], w0
    1fd8:	21 75 21    	mov.w     #0x1752, w1
    1fda:	51 18 98    	mov.w     w1, [w0+58]
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1fdc:	1e 00 78    	mov.w     [w14], w0
    1fde:	50 00 90    	mov.w     [w0+10], w0
    1fe0:	9e 00 78    	mov.w     [w14], w1
    1fe2:	d1 00 90    	mov.w     [w1+10], w1
    1fe4:	11 01 78    	mov.w     [w1], w2
    1fe6:	9e 00 78    	mov.w     [w14], w1
    1fe8:	f1 48 90    	mov.b     [w1+15], w1
    1fea:	81 80 fb    	ze        w1, w1
    1fec:	13 00 20    	mov.w     #0x1, w3
    1fee:	81 18 dd    	sl.w      w3, w1, w1
    1ff0:	81 80 ea    	com.w     w1, w1
    1ff2:	81 00 61    	and.w     w2, w1, w1
    1ff4:	01 08 78    	mov.w     w1, [w0]
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1ff6:	1e 00 78    	mov.w     [w14], w0
    1ff8:	60 00 90    	mov.w     [w0+12], w0
    1ffa:	9e 00 78    	mov.w     [w14], w1
    1ffc:	e1 00 90    	mov.w     [w1+12], w1
    1ffe:	11 01 78    	mov.w     [w1], w2
    2000:	9e 00 78    	mov.w     [w14], w1
    2002:	f1 48 90    	mov.b     [w1+15], w1
    2004:	81 80 fb    	ze        w1, w1
    2006:	13 00 20    	mov.w     #0x1, w3
    2008:	81 18 dd    	sl.w      w3, w1, w1
    200a:	82 80 70    	ior.w     w1, w2, w1
    200c:	01 08 78    	mov.w     w1, [w0]

0000200e <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    200e:	1e 00 78    	mov.w     [w14], w0
    2010:	10 00 78    	mov.w     [w0], w0
    2012:	9e 00 78    	mov.w     [w14], w1
    2014:	91 00 78    	mov.w     [w1], w1
    2016:	11 01 78    	mov.w     [w1], w2
    2018:	01 00 28    	mov.w     #0x8000, w1
    201a:	82 80 70    	ior.w     w1, w2, w1
    201c:	01 08 78    	mov.w     w1, [w0]
    bitset(self->UxSTA, 10);    // Enable data transmission
    201e:	1e 00 78    	mov.w     [w14], w0
    2020:	10 00 90    	mov.w     [w0+2], w0
    2022:	9e 00 78    	mov.w     [w14], w1
    2024:	91 00 90    	mov.w     [w1+2], w1
    2026:	91 00 78    	mov.w     [w1], w1
    2028:	01 a0 a0    	bset.w    w1, #0xa
    202a:	01 08 78    	mov.w     w1, [w0]
    202c:	17 00 37    	bra       0x205c <.L40>

0000202e <.L73>:
    202e:	00 00 00    	nop       
    2030:	15 00 37    	bra       0x205c <.L40>

00002032 <.L74>:
    2032:	00 00 00    	nop       
    2034:	13 00 37    	bra       0x205c <.L40>

00002036 <.L75>:
    2036:	00 00 00    	nop       
    2038:	11 00 37    	bra       0x205c <.L40>

0000203a <.L76>:
    203a:	00 00 00    	nop       
    203c:	0f 00 37    	bra       0x205c <.L40>

0000203e <.L77>:
    203e:	00 00 00    	nop       
    2040:	0d 00 37    	bra       0x205c <.L40>

00002042 <.L78>:
    2042:	00 00 00    	nop       
    2044:	0b 00 37    	bra       0x205c <.L40>

00002046 <.L79>:
    2046:	00 00 00    	nop       
    2048:	09 00 37    	bra       0x205c <.L40>

0000204a <.L80>:
    204a:	00 00 00    	nop       
    204c:	07 00 37    	bra       0x205c <.L40>

0000204e <.L81>:
    204e:	00 00 00    	nop       
    2050:	05 00 37    	bra       0x205c <.L40>

00002052 <.L82>:
    2052:	00 00 00    	nop       
    2054:	03 00 37    	bra       0x205c <.L40>

00002056 <.L83>:
    2056:	00 00 00    	nop       
    2058:	01 00 37    	bra       0x205c <.L40>

0000205a <.L84>:
    205a:	00 00 00    	nop       

0000205c <.L40>:
}
    205c:	4f 04 78    	mov.w     [--w15], w8
    205e:	00 80 fa    	ulnk      
    2060:	00 00 06    	return    

00002062 <_uart_close>:

void uart_close(_UART *self) {
    2062:	02 00 fa    	lnk       #0x2
    2064:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2066:	1e 00 78    	mov.w     [w14], w0
    2068:	10 00 90    	mov.w     [w0+2], w0
    206a:	9e 00 78    	mov.w     [w14], w1
    206c:	91 00 90    	mov.w     [w1+2], w1
    206e:	91 00 78    	mov.w     [w1], w1
    2070:	01 a0 a1    	bclr.w    w1, #0xa
    2072:	01 08 78    	mov.w     w1, [w0]
    *(self->UxMODE) = 0;        // Disable UART module
    2074:	1e 00 78    	mov.w     [w14], w0
    2076:	10 00 78    	mov.w     [w0], w0
    2078:	80 00 eb    	clr.w     w1
    207a:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    207c:	1e 00 78    	mov.w     [w14], w0
    207e:	60 00 90    	mov.w     [w0+12], w0
    2080:	9e 00 78    	mov.w     [w14], w1
    2082:	e1 00 90    	mov.w     [w1+12], w1
    2084:	11 01 78    	mov.w     [w1], w2
    2086:	9e 00 78    	mov.w     [w14], w1
    2088:	e1 48 90    	mov.b     [w1+14], w1
    208a:	81 80 fb    	ze        w1, w1
    208c:	13 00 20    	mov.w     #0x1, w3
    208e:	81 18 dd    	sl.w      w3, w1, w1
    2090:	81 80 ea    	com.w     w1, w1
    2092:	81 00 61    	and.w     w2, w1, w1
    2094:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2096:	1e 00 78    	mov.w     [w14], w0
    2098:	60 00 90    	mov.w     [w0+12], w0
    209a:	9e 00 78    	mov.w     [w14], w1
    209c:	e1 00 90    	mov.w     [w1+12], w1
    209e:	11 01 78    	mov.w     [w1], w2
    20a0:	9e 00 78    	mov.w     [w14], w1
    20a2:	f1 48 90    	mov.b     [w1+15], w1
    20a4:	81 80 fb    	ze        w1, w1
    20a6:	13 00 20    	mov.w     #0x1, w3
    20a8:	81 18 dd    	sl.w      w3, w1, w1
    20aa:	81 80 ea    	com.w     w1, w1
    20ac:	81 00 61    	and.w     w2, w1, w1
    20ae:	01 08 78    	mov.w     w1, [w0]
    self->putc = NULL;
    20b0:	1e 00 78    	mov.w     [w14], w0
    20b2:	80 00 eb    	clr.w     w1
    20b4:	41 18 98    	mov.w     w1, [w0+56]
    self->getc = NULL;
    20b6:	1e 00 78    	mov.w     [w14], w0
    20b8:	80 00 eb    	clr.w     w1
    20ba:	51 18 98    	mov.w     w1, [w0+58]
    if (self->TX) {
    20bc:	1e 00 78    	mov.w     [w14], w0
    20be:	50 08 90    	mov.w     [w0+26], w0
    20c0:	00 00 e0    	cp0.w     w0
    20c2:	2f 00 32    	bra       Z, 0x2122 <.L86>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20c4:	11 3a 80    	mov.w     0x742, w1
    20c6:	f0 0b 20    	mov.w     #0xbf, w0
    20c8:	00 81 60    	and.w     w1, w0, w2
    20ca:	60 04 20    	mov.w     #0x46, w0
    20cc:	71 05 20    	mov.w     #0x57, w1
    20ce:	23 74 20    	mov.w     #0x742, w3
    20d0:	80 49 78    	mov.b     w0, [w3]
    20d2:	81 49 78    	mov.b     w1, [w3]
    20d4:	82 49 78    	mov.b     w2, [w3]
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    20d6:	1e 00 78    	mov.w     [w14], w0
    20d8:	50 08 90    	mov.w     [w0+26], w0
    20da:	70 00 90    	mov.w     [w0+14], w0
    20dc:	9e 00 78    	mov.w     [w14], w1
    20de:	d1 08 90    	mov.w     [w1+26], w1
    20e0:	f1 00 90    	mov.w     [w1+14], w1
    20e2:	11 01 78    	mov.w     [w1], w2
    20e4:	9e 00 78    	mov.w     [w14], w1
    20e6:	d1 08 90    	mov.w     [w1+26], w1
    20e8:	a1 48 90    	mov.b     [w1+10], w1
    20ea:	81 80 fb    	ze        w1, w1
    20ec:	f3 03 20    	mov.w     #0x3f, w3
    20ee:	81 18 dd    	sl.w      w3, w1, w1
    20f0:	81 80 ea    	com.w     w1, w1
    20f2:	81 00 61    	and.w     w2, w1, w1
    20f4:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    20f6:	10 3a 80    	mov.w     0x742, w0
    20f8:	00 01 78    	mov.w     w0, w2
    20fa:	02 60 a0    	bset.w    w2, #0x6
    20fc:	60 04 20    	mov.w     #0x46, w0
    20fe:	71 05 20    	mov.w     #0x57, w1
    2100:	23 74 20    	mov.w     #0x742, w3
    2102:	80 49 78    	mov.b     w0, [w3]
    2104:	81 49 78    	mov.b     w1, [w3]
    2106:	82 49 78    	mov.b     w2, [w3]
        self->TX->owner = NULL;
    2108:	1e 00 78    	mov.w     [w14], w0
    210a:	50 08 90    	mov.w     [w0+26], w0
    210c:	80 00 eb    	clr.w     w1
    210e:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->TX);
    2110:	1e 00 78    	mov.w     [w14], w0
    2112:	50 08 90    	mov.w     [w0+26], w0
    2114:	94 05 07    	rcall     0x2c3e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_set(self->TX);
    2116:	1e 00 78    	mov.w     [w14], w0
    2118:	50 08 90    	mov.w     [w0+26], w0
    211a:	ee 05 07    	rcall     0x2cf8 <_pin_set> <L0> <.LFB8> <.LFE7>
        self->TX = NULL;
    211c:	1e 00 78    	mov.w     [w14], w0
    211e:	80 00 eb    	clr.w     w1
    2120:	51 08 98    	mov.w     w1, [w0+26]

00002122 <.L86>:
    }
    if (self->RX) {
    2122:	1e 00 78    	mov.w     [w14], w0
    2124:	60 08 90    	mov.w     [w0+28], w0
    2126:	00 00 e0    	cp0.w     w0
    2128:	28 00 32    	bra       Z, 0x217a <.L87>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    212a:	11 3a 80    	mov.w     0x742, w1
    212c:	f0 0b 20    	mov.w     #0xbf, w0
    212e:	00 81 60    	and.w     w1, w0, w2
    2130:	60 04 20    	mov.w     #0x46, w0
    2132:	71 05 20    	mov.w     #0x57, w1
    2134:	23 74 20    	mov.w     #0x742, w3
    2136:	80 49 78    	mov.b     w0, [w3]
    2138:	81 49 78    	mov.b     w1, [w3]
    213a:	82 49 78    	mov.b     w2, [w3]
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    213c:	1e 00 78    	mov.w     [w14], w0
    213e:	00 08 90    	mov.w     [w0+16], w0
    2140:	9e 00 78    	mov.w     [w14], w1
    2142:	81 08 90    	mov.w     [w1+16], w1
    2144:	11 01 78    	mov.w     [w1], w2
    2146:	9e 00 78    	mov.w     [w14], w1
    2148:	c1 50 90    	mov.b     [w1+20], w1
    214a:	81 80 fb    	ze        w1, w1
    214c:	f3 03 20    	mov.w     #0x3f, w3
    214e:	81 18 dd    	sl.w      w3, w1, w1
    2150:	82 80 70    	ior.w     w1, w2, w1
    2152:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2154:	10 3a 80    	mov.w     0x742, w0
    2156:	00 01 78    	mov.w     w0, w2
    2158:	02 60 a0    	bset.w    w2, #0x6
    215a:	60 04 20    	mov.w     #0x46, w0
    215c:	71 05 20    	mov.w     #0x57, w1
    215e:	23 74 20    	mov.w     #0x742, w3
    2160:	80 49 78    	mov.b     w0, [w3]
    2162:	81 49 78    	mov.b     w1, [w3]
    2164:	82 49 78    	mov.b     w2, [w3]
        self->RX->owner = NULL;
    2166:	1e 00 78    	mov.w     [w14], w0
    2168:	60 08 90    	mov.w     [w0+28], w0
    216a:	80 00 eb    	clr.w     w1
    216c:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalIn(self->RX);
    216e:	1e 00 78    	mov.w     [w14], w0
    2170:	60 08 90    	mov.w     [w0+28], w0
    2172:	3e 05 07    	rcall     0x2bf0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
        self->RX = NULL;
    2174:	1e 00 78    	mov.w     [w14], w0
    2176:	80 00 eb    	clr.w     w1
    2178:	61 08 98    	mov.w     w1, [w0+28]

0000217a <.L87>:
    }
    if (self->RTS) {
    217a:	1e 00 78    	mov.w     [w14], w0
    217c:	70 08 90    	mov.w     [w0+30], w0
    217e:	00 00 e0    	cp0.w     w0
    2180:	2f 00 32    	bra       Z, 0x21e0 <.L88>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2182:	11 3a 80    	mov.w     0x742, w1
    2184:	f0 0b 20    	mov.w     #0xbf, w0
    2186:	00 81 60    	and.w     w1, w0, w2
    2188:	60 04 20    	mov.w     #0x46, w0
    218a:	71 05 20    	mov.w     #0x57, w1
    218c:	23 74 20    	mov.w     #0x742, w3
    218e:	80 49 78    	mov.b     w0, [w3]
    2190:	81 49 78    	mov.b     w1, [w3]
    2192:	82 49 78    	mov.b     w2, [w3]
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2194:	1e 00 78    	mov.w     [w14], w0
    2196:	70 08 90    	mov.w     [w0+30], w0
    2198:	70 00 90    	mov.w     [w0+14], w0
    219a:	9e 00 78    	mov.w     [w14], w1
    219c:	f1 08 90    	mov.w     [w1+30], w1
    219e:	f1 00 90    	mov.w     [w1+14], w1
    21a0:	11 01 78    	mov.w     [w1], w2
    21a2:	9e 00 78    	mov.w     [w14], w1
    21a4:	f1 08 90    	mov.w     [w1+30], w1
    21a6:	a1 48 90    	mov.b     [w1+10], w1
    21a8:	81 80 fb    	ze        w1, w1
    21aa:	f3 03 20    	mov.w     #0x3f, w3
    21ac:	81 18 dd    	sl.w      w3, w1, w1
    21ae:	81 80 ea    	com.w     w1, w1
    21b0:	81 00 61    	and.w     w2, w1, w1
    21b2:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    21b4:	10 3a 80    	mov.w     0x742, w0
    21b6:	00 01 78    	mov.w     w0, w2
    21b8:	02 60 a0    	bset.w    w2, #0x6
    21ba:	60 04 20    	mov.w     #0x46, w0
    21bc:	71 05 20    	mov.w     #0x57, w1
    21be:	23 74 20    	mov.w     #0x742, w3
    21c0:	80 49 78    	mov.b     w0, [w3]
    21c2:	81 49 78    	mov.b     w1, [w3]
    21c4:	82 49 78    	mov.b     w2, [w3]
        self->RTS->owner = NULL;
    21c6:	1e 00 78    	mov.w     [w14], w0
    21c8:	70 08 90    	mov.w     [w0+30], w0
    21ca:	80 00 eb    	clr.w     w1
    21cc:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->RTS);
    21ce:	1e 00 78    	mov.w     [w14], w0
    21d0:	70 08 90    	mov.w     [w0+30], w0
    21d2:	35 05 07    	rcall     0x2c3e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_set(self->RTS);
    21d4:	1e 00 78    	mov.w     [w14], w0
    21d6:	70 08 90    	mov.w     [w0+30], w0
    21d8:	8f 05 07    	rcall     0x2cf8 <_pin_set> <L0> <.LFB8> <.LFE7>
        self->RTS = NULL;
    21da:	1e 00 78    	mov.w     [w14], w0
    21dc:	80 00 eb    	clr.w     w1
    21de:	71 08 98    	mov.w     w1, [w0+30]

000021e0 <.L88>:
    }
    if (self->CTS) {
    21e0:	1e 00 78    	mov.w     [w14], w0
    21e2:	00 10 90    	mov.w     [w0+32], w0
    21e4:	00 00 e0    	cp0.w     w0
    21e6:	28 00 32    	bra       Z, 0x2238 <.L85>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    21e8:	11 3a 80    	mov.w     0x742, w1
    21ea:	f0 0b 20    	mov.w     #0xbf, w0
    21ec:	00 81 60    	and.w     w1, w0, w2
    21ee:	60 04 20    	mov.w     #0x46, w0
    21f0:	71 05 20    	mov.w     #0x57, w1
    21f2:	23 74 20    	mov.w     #0x742, w3
    21f4:	80 49 78    	mov.b     w0, [w3]
    21f6:	81 49 78    	mov.b     w1, [w3]
    21f8:	82 49 78    	mov.b     w2, [w3]
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    21fa:	1e 00 78    	mov.w     [w14], w0
    21fc:	10 08 90    	mov.w     [w0+18], w0
    21fe:	9e 00 78    	mov.w     [w14], w1
    2200:	91 08 90    	mov.w     [w1+18], w1
    2202:	11 01 78    	mov.w     [w1], w2
    2204:	9e 00 78    	mov.w     [w14], w1
    2206:	d1 50 90    	mov.b     [w1+21], w1
    2208:	81 80 fb    	ze        w1, w1
    220a:	f3 03 20    	mov.w     #0x3f, w3
    220c:	81 18 dd    	sl.w      w3, w1, w1
    220e:	82 80 70    	ior.w     w1, w2, w1
    2210:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2212:	10 3a 80    	mov.w     0x742, w0
    2214:	00 01 78    	mov.w     w0, w2
    2216:	02 60 a0    	bset.w    w2, #0x6
    2218:	60 04 20    	mov.w     #0x46, w0
    221a:	71 05 20    	mov.w     #0x57, w1
    221c:	23 74 20    	mov.w     #0x742, w3
    221e:	80 49 78    	mov.b     w0, [w3]
    2220:	81 49 78    	mov.b     w1, [w3]
    2222:	82 49 78    	mov.b     w2, [w3]
        self->CTS->owner = NULL;
    2224:	1e 00 78    	mov.w     [w14], w0
    2226:	00 10 90    	mov.w     [w0+32], w0
    2228:	80 00 eb    	clr.w     w1
    222a:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalIn(self->CTS);
    222c:	1e 00 78    	mov.w     [w14], w0
    222e:	00 10 90    	mov.w     [w0+32], w0
    2230:	df 04 07    	rcall     0x2bf0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
        self->CTS = NULL;
    2232:	1e 00 78    	mov.w     [w14], w0
    2234:	80 00 eb    	clr.w     w1
    2236:	01 10 98    	mov.w     w1, [w0+32]

00002238 <.L85>:
    }
}
    2238:	00 80 fa    	ulnk      
    223a:	00 00 06    	return    

0000223c <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    223c:	04 00 fa    	lnk       #0x4
    223e:	00 0f 78    	mov.w     w0, [w14]
    2240:	21 47 98    	mov.b     w1, [w14+2]
    if (self->putc)
    2242:	1e 00 78    	mov.w     [w14], w0
    2244:	40 18 90    	mov.w     [w0+56], w0
    2246:	00 00 e0    	cp0.w     w0
    2248:	05 00 32    	bra       Z, 0x2254 <.L90>
        self->putc(self, ch);
    224a:	1e 00 78    	mov.w     [w14], w0
    224c:	40 19 90    	mov.w     [w0+56], w2
    224e:	ae 40 90    	mov.b     [w14+2], w1
    2250:	1e 00 78    	mov.w     [w14], w0
    2252:	02 00 01    	call      w2

00002254 <.L90>:
}
    2254:	00 80 fa    	ulnk      
    2256:	00 00 06    	return    

00002258 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2258:	02 00 fa    	lnk       #0x2
    225a:	00 0f 78    	mov.w     w0, [w14]
    if (self->getc)
    225c:	1e 00 78    	mov.w     [w14], w0
    225e:	50 18 90    	mov.w     [w0+58], w0
    2260:	00 00 e0    	cp0.w     w0
    2262:	05 00 32    	bra       Z, 0x226e <.L93>
        return self->getc(self);
    2264:	1e 00 78    	mov.w     [w14], w0
    2266:	d0 18 90    	mov.w     [w0+58], w1
    2268:	1e 00 78    	mov.w     [w14], w0
    226a:	01 00 01    	call      w1
    226c:	01 00 37    	bra       0x2270 <.L94>

0000226e <.L93>:
    else
        return 0xFF;
    226e:	00 c0 eb    	setm.b    w0

00002270 <.L94>:
}
    2270:	00 80 fa    	ulnk      
    2272:	00 00 06    	return    

00002274 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2274:	02 00 fa    	lnk       #0x2
    2276:	00 0f 78    	mov.w     w0, [w14]
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2278:	1e 00 78    	mov.w     [w14], w0
    227a:	10 00 90    	mov.w     [w0+2], w0
    227c:	90 00 78    	mov.w     [w0], w1
    227e:	00 40 20    	mov.w     #0x400, w0
    2280:	00 80 60    	and.w     w1, w0, w0
    2282:	00 00 e0    	cp0.w     w0
    2284:	07 00 3a    	bra       NZ, 0x2294 <.L95>
        bitset(self->UxSTA, 10);        //   enable data transmission
    2286:	1e 00 78    	mov.w     [w14], w0
    2288:	10 00 90    	mov.w     [w0+2], w0
    228a:	9e 00 78    	mov.w     [w14], w1
    228c:	91 00 90    	mov.w     [w1+2], w1
    228e:	91 00 78    	mov.w     [w1], w1
    2290:	01 a0 a0    	bset.w    w1, #0xa
    2292:	01 08 78    	mov.w     w1, [w0]

00002294 <.L95>:
}
    2294:	00 80 fa    	ulnk      
    2296:	00 00 06    	return    

00002298 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2298:	04 00 fa    	lnk       #0x4
    229a:	00 0f 78    	mov.w     w0, [w14]
    229c:	11 07 98    	mov.w     w1, [w14+2]
    while (*str)
    229e:	08 00 37    	bra       0x22b0 <.L98>

000022a0 <.L99>:
        uart_putc(self, *str++);
    22a0:	1e 00 90    	mov.w     [w14+2], w0
    22a2:	10 40 78    	mov.b     [w0], w0
    22a4:	9e 00 90    	mov.w     [w14+2], w1
    22a6:	81 00 e8    	inc.w     w1, w1
    22a8:	11 07 98    	mov.w     w1, [w14+2]
    22aa:	80 40 78    	mov.b     w0, w1
    22ac:	1e 00 78    	mov.w     [w14], w0
    22ae:	c6 ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>

000022b0 <.L98>:
    22b0:	1e 00 90    	mov.w     [w14+2], w0
    22b2:	10 40 78    	mov.b     [w0], w0
    22b4:	00 04 e0    	cp0.b     w0
    22b6:	f4 ff 3a    	bra       NZ, 0x22a0 <.L99>
    uart_flushTxBuffer(self);
    22b8:	1e 00 78    	mov.w     [w14], w0
    22ba:	dc ff 07    	rcall     0x2274 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
}
    22bc:	00 80 fa    	ulnk      
    22be:	00 00 06    	return    

000022c0 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    22c0:	0a 00 fa    	lnk       #0xa
    22c2:	20 07 98    	mov.w     w0, [w14+4]
    22c4:	31 07 98    	mov.w     w1, [w14+6]
    22c6:	42 07 98    	mov.w     w2, [w14+8]
    uint8_t *start;
    uint16_t left;

    if (len==0)
    22c8:	4e 00 90    	mov.w     [w14+8], w0
    22ca:	00 00 e0    	cp0.w     w0
    22cc:	87 00 32    	bra       Z, 0x23dc <.L113>
        return;

    if (len==1) {
    22ce:	4e 00 90    	mov.w     [w14+8], w0
    22d0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    22d2:	04 00 3a    	bra       NZ, 0x22dc <.L103>
        *str = '\0';
    22d4:	3e 00 90    	mov.w     [w14+6], w0
    22d6:	80 40 eb    	clr.b     w1
    22d8:	01 48 78    	mov.b     w1, [w0]
        return;
    22da:	81 00 37    	bra       0x23de <.L100>

000022dc <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    22dc:	b1 c1 b3    	mov.b     #0x1b, w1
    22de:	2e 00 90    	mov.w     [w14+4], w0
    22e0:	ad ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    uart_putc(self, '7');
    22e2:	71 c3 b3    	mov.b     #0x37, w1
    22e4:	2e 00 90    	mov.w     [w14+4], w0
    22e6:	aa ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    uart_flushTxBuffer(self);
    22e8:	2e 00 90    	mov.w     [w14+4], w0
    22ea:	c4 ff 07    	rcall     0x2274 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    start = str;
    22ec:	be 00 90    	mov.w     [w14+6], w1
    22ee:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    22f0:	ce 00 90    	mov.w     [w14+8], w1
    22f2:	01 0f 78    	mov.w     w1, [w14]
    22f4:	03 00 37    	bra       0x22fc <.L112>

000022f6 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    22f6:	00 00 00    	nop       
    22f8:	01 00 37    	bra       0x22fc <.L112>

000022fa <.L115>:
    22fa:	00 00 00    	nop       

000022fc <.L112>:
    22fc:	2e 00 90    	mov.w     [w14+4], w0
    22fe:	ac ff 07    	rcall     0x2258 <_uart_getc> <L0> <.LFB20> <.LFE19>
    2300:	be 00 90    	mov.w     [w14+6], w1
    2302:	80 48 78    	mov.b     w0, [w1]
    2304:	3e 00 90    	mov.w     [w14+6], w0
    2306:	10 40 78    	mov.b     [w0], w0
    2308:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    230a:	0c 00 3a    	bra       NZ, 0x2324 <.L104>
    *str = '\0';                            // Terminarte the string with null
    230c:	3e 00 90    	mov.w     [w14+6], w0
    230e:	80 40 eb    	clr.b     w1
    2310:	01 48 78    	mov.b     w1, [w0]
    uart_putc(self, '\n');                  // Send newline and
    2312:	a1 c0 b3    	mov.b     #0xa, w1
    2314:	2e 00 90    	mov.w     [w14+4], w0
    2316:	92 ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    uart_putc(self, '\r');                  //   carriage return
    2318:	d1 c0 b3    	mov.b     #0xd, w1
    231a:	2e 00 90    	mov.w     [w14+4], w0
    231c:	8f ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    uart_flushTxBuffer(self);
    231e:	2e 00 90    	mov.w     [w14+4], w0
    2320:	a9 ff 07    	rcall     0x2274 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    2322:	5d 00 37    	bra       0x23de <.L100>

00002324 <.L104>:
    2324:	3e 00 90    	mov.w     [w14+6], w0
    2326:	10 40 78    	mov.b     [w0], w0
    2328:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    232a:	16 00 3a    	bra       NZ, 0x2358 <.L105>
    232c:	b1 c1 b3    	mov.b     #0x1b, w1
    232e:	2e 00 90    	mov.w     [w14+4], w0
    2330:	85 ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    2332:	81 c3 b3    	mov.b     #0x38, w1
    2334:	2e 00 90    	mov.w     [w14+4], w0
    2336:	82 ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    2338:	b1 c1 b3    	mov.b     #0x1b, w1
    233a:	2e 00 90    	mov.w     [w14+4], w0
    233c:	7f ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    233e:	b1 c5 b3    	mov.b     #0x5b, w1
    2340:	2e 00 90    	mov.w     [w14+4], w0
    2342:	7c ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    2344:	b1 c4 b3    	mov.b     #0x4b, w1
    2346:	2e 00 90    	mov.w     [w14+4], w0
    2348:	79 ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    234a:	2e 00 90    	mov.w     [w14+4], w0
    234c:	93 ff 07    	rcall     0x2274 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    234e:	9e 00 90    	mov.w     [w14+2], w1
    2350:	31 07 98    	mov.w     w1, [w14+6]
    2352:	ce 00 90    	mov.w     [w14+8], w1
    2354:	01 0f 78    	mov.w     w1, [w14]
    2356:	41 00 37    	bra       0x23da <.L106>

00002358 <.L105>:
    2358:	3e 00 90    	mov.w     [w14+6], w0
    235a:	10 40 78    	mov.b     [w0], w0
    235c:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    235e:	05 00 32    	bra       Z, 0x236a <.L107>
    2360:	3e 00 90    	mov.w     [w14+6], w0
    2362:	90 40 78    	mov.b     [w0], w1
    2364:	f0 c7 b3    	mov.b     #0x7f, w0
    2366:	80 cf 50    	sub.b     w1, w0, [w15]
    2368:	1a 00 3a    	bra       NZ, 0x239e <.L108>

0000236a <.L107>:
    236a:	be 00 90    	mov.w     [w14+6], w1
    236c:	1e 00 90    	mov.w     [w14+2], w0
    236e:	80 8f 50    	sub.w     w1, w0, [w15]
    2370:	10 00 36    	bra       LEU, 0x2392 <.L109>
    2372:	81 c0 b3    	mov.b     #0x8, w1
    2374:	2e 00 90    	mov.w     [w14+4], w0
    2376:	62 ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    2378:	01 c2 b3    	mov.b     #0x20, w1
    237a:	2e 00 90    	mov.w     [w14+4], w0
    237c:	5f ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    237e:	81 c0 b3    	mov.b     #0x8, w1
    2380:	2e 00 90    	mov.w     [w14+4], w0
    2382:	5c ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    2384:	2e 00 90    	mov.w     [w14+4], w0
    2386:	76 ff 07    	rcall     0x2274 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    2388:	3e 00 90    	mov.w     [w14+6], w0
    238a:	00 00 e9    	dec.w     w0, w0
    238c:	30 07 98    	mov.w     w0, [w14+6]
    238e:	1e 0f e8    	inc.w     [w14], [w14]
    2390:	05 00 37    	bra       0x239c <.L110>

00002392 <.L109>:
    2392:	71 c0 b3    	mov.b     #0x7, w1
    2394:	2e 00 90    	mov.w     [w14+4], w0
    2396:	52 ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    2398:	2e 00 90    	mov.w     [w14+4], w0
    239a:	6c ff 07    	rcall     0x2274 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>

0000239c <.L110>:
    239c:	1e 00 37    	bra       0x23da <.L106>

0000239e <.L108>:
    239e:	1e 00 78    	mov.w     [w14], w0
    23a0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    23a2:	06 00 3a    	bra       NZ, 0x23b0 <.L111>
    23a4:	71 c0 b3    	mov.b     #0x7, w1
    23a6:	2e 00 90    	mov.w     [w14+4], w0
    23a8:	49 ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    23aa:	2e 00 90    	mov.w     [w14+4], w0
    23ac:	63 ff 07    	rcall     0x2274 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    23ae:	15 00 37    	bra       0x23da <.L106>

000023b0 <.L111>:
    23b0:	3e 00 90    	mov.w     [w14+6], w0
    23b2:	10 40 78    	mov.b     [w0], w0
    23b4:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    23b6:	9f ff 36    	bra       LEU, 0x22f6 <.L114>
    23b8:	3e 00 90    	mov.w     [w14+6], w0
    23ba:	90 40 78    	mov.b     [w0], w1
    23bc:	e0 c7 b3    	mov.b     #0x7e, w0
    23be:	80 cf 50    	sub.b     w1, w0, [w15]
    23c0:	9c ff 3e    	bra       GTU, 0x22fa <.L115>
    23c2:	3e 00 90    	mov.w     [w14+6], w0
    23c4:	10 40 78    	mov.b     [w0], w0
    23c6:	80 40 78    	mov.b     w0, w1
    23c8:	2e 00 90    	mov.w     [w14+4], w0
    23ca:	38 ff 07    	rcall     0x223c <_uart_putc> <L0> <.LFB19> <.LFE18>
    23cc:	2e 00 90    	mov.w     [w14+4], w0
    23ce:	52 ff 07    	rcall     0x2274 <_uart_flushTxBuffer> <L0> <.LFB21> <.LFE20>
    23d0:	3e 00 90    	mov.w     [w14+6], w0
    23d2:	00 00 e8    	inc.w     w0, w0
    23d4:	30 07 98    	mov.w     w0, [w14+6]
    23d6:	1e 0f e9    	dec.w     [w14], [w14]
    23d8:	91 ff 37    	bra       0x22fc <.L112>

000023da <.L106>:
    23da:	90 ff 37    	bra       0x22fc <.L112>

000023dc <.L113>:
    23dc:	00 00 00    	nop       

000023de <.L100>:
}
    23de:	00 80 fa    	ulnk      
    23e0:	00 00 06    	return    

000023e2 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    23e2:	02 00 fa    	lnk       #0x2
    23e4:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    23e6:	1e 00 78    	mov.w     [w14], w0
    23e8:	01 02 07    	rcall     0x27ec <_timer_lower> <L0> <.LFB16> <.LFE15>
    if (self->every) {
    23ea:	1e 00 78    	mov.w     [w14], w0
    23ec:	10 08 90    	mov.w     [w0+18], w0
    23ee:	00 00 e0    	cp0.w     w0
    23f0:	05 00 32    	bra       Z, 0x23fc <.L2>
        self->every(self);
    23f2:	1e 00 78    	mov.w     [w14], w0
    23f4:	90 08 90    	mov.w     [w0+18], w1
    23f6:	1e 00 78    	mov.w     [w14], w0
    23f8:	01 00 01    	call      w1
    23fa:	1a 00 37    	bra       0x2430 <.L1>

000023fc <.L2>:
    } else if (self->after) {
    23fc:	1e 00 78    	mov.w     [w14], w0
    23fe:	20 08 90    	mov.w     [w0+20], w0
    2400:	00 00 e0    	cp0.w     w0
    2402:	14 00 32    	bra       Z, 0x242c <.L4>
        if (self->aftercount) {
    2404:	1e 00 78    	mov.w     [w14], w0
    2406:	00 08 90    	mov.w     [w0+16], w0
    2408:	00 00 e0    	cp0.w     w0
    240a:	0a 00 32    	bra       Z, 0x2420 <.L5>
            self->after(self);
    240c:	1e 00 78    	mov.w     [w14], w0
    240e:	a0 08 90    	mov.w     [w0+20], w1
    2410:	1e 00 78    	mov.w     [w14], w0
    2412:	01 00 01    	call      w1
            self->aftercount--;
    2414:	1e 00 78    	mov.w     [w14], w0
    2416:	00 08 90    	mov.w     [w0+16], w0
    2418:	80 00 e9    	dec.w     w0, w1
    241a:	1e 00 78    	mov.w     [w14], w0
    241c:	01 08 98    	mov.w     w1, [w0+16]
    241e:	08 00 37    	bra       0x2430 <.L1>

00002420 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2420:	1e 00 78    	mov.w     [w14], w0
    2422:	0c 02 07    	rcall     0x283c <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
            self->after = NULL;
    2424:	1e 00 78    	mov.w     [w14], w0
    2426:	80 00 eb    	clr.w     w1
    2428:	21 08 98    	mov.w     w1, [w0+20]
    242a:	02 00 37    	bra       0x2430 <.L1>

0000242c <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    242c:	1e 00 78    	mov.w     [w14], w0
    242e:	06 02 07    	rcall     0x283c <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>

00002430 <.L1>:
    }
}
    2430:	00 80 fa    	ulnk      
    2432:	00 00 06    	return    

00002434 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    2434:	36 00 f8    	push      0x36
    2436:	80 9f be    	mov.d     w0, [w15++]
    2438:	82 9f be    	mov.d     w2, [w15++]
    243a:	84 9f be    	mov.d     w4, [w15++]
    243c:	86 9f be    	mov.d     w6, [w15++]
    243e:	32 00 f8    	push      0x32
    2440:	34 00 f8    	push      0x34
    2442:	10 00 20    	mov.w     #0x1, w0
    2444:	a0 01 88    	mov.w     w0, 0x34
    2446:	00 20 20    	mov.w     #0x200, w0
    2448:	90 01 88    	mov.w     w0, 0x32
    244a:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer1);
    244c:	a0 bb 20    	mov.w     #0xbba, w0
    244e:	c9 ff 07    	rcall     0x23e2 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE23> <.Letext0> <.Ltext0>
}
    2450:	00 80 fa    	ulnk      
    2452:	34 00 f9    	pop       0x34
    2454:	32 00 f9    	pop       0x32
    2456:	4f 03 be    	mov.d     [--w15], w6
    2458:	4f 02 be    	mov.d     [--w15], w4
    245a:	4f 01 be    	mov.d     [--w15], w2
    245c:	4f 00 be    	mov.d     [--w15], w0
    245e:	36 00 f9    	pop       0x36
    2460:	00 40 06    	retfie    

00002462 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2462:	36 00 f8    	push      0x36
    2464:	80 9f be    	mov.d     w0, [w15++]
    2466:	82 9f be    	mov.d     w2, [w15++]
    2468:	84 9f be    	mov.d     w4, [w15++]
    246a:	86 9f be    	mov.d     w6, [w15++]
    246c:	32 00 f8    	push      0x32
    246e:	34 00 f8    	push      0x34
    2470:	10 00 20    	mov.w     #0x1, w0
    2472:	a0 01 88    	mov.w     w0, 0x34
    2474:	00 20 20    	mov.w     #0x200, w0
    2476:	90 01 88    	mov.w     w0, 0x32
    2478:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer2);
    247a:	00 bd 20    	mov.w     #0xbd0, w0
    247c:	b2 ff 07    	rcall     0x23e2 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE23> <.Letext0> <.Ltext0>
}
    247e:	00 80 fa    	ulnk      
    2480:	34 00 f9    	pop       0x34
    2482:	32 00 f9    	pop       0x32
    2484:	4f 03 be    	mov.d     [--w15], w6
    2486:	4f 02 be    	mov.d     [--w15], w4
    2488:	4f 01 be    	mov.d     [--w15], w2
    248a:	4f 00 be    	mov.d     [--w15], w0
    248c:	36 00 f9    	pop       0x36
    248e:	00 40 06    	retfie    

00002490 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    2490:	36 00 f8    	push      0x36
    2492:	80 9f be    	mov.d     w0, [w15++]
    2494:	82 9f be    	mov.d     w2, [w15++]
    2496:	84 9f be    	mov.d     w4, [w15++]
    2498:	86 9f be    	mov.d     w6, [w15++]
    249a:	32 00 f8    	push      0x32
    249c:	34 00 f8    	push      0x34
    249e:	10 00 20    	mov.w     #0x1, w0
    24a0:	a0 01 88    	mov.w     w0, 0x34
    24a2:	00 20 20    	mov.w     #0x200, w0
    24a4:	90 01 88    	mov.w     w0, 0x32
    24a6:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer3);
    24a8:	60 be 20    	mov.w     #0xbe6, w0
    24aa:	9b ff 07    	rcall     0x23e2 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE23> <.Letext0> <.Ltext0>
}
    24ac:	00 80 fa    	ulnk      
    24ae:	34 00 f9    	pop       0x34
    24b0:	32 00 f9    	pop       0x32
    24b2:	4f 03 be    	mov.d     [--w15], w6
    24b4:	4f 02 be    	mov.d     [--w15], w4
    24b6:	4f 01 be    	mov.d     [--w15], w2
    24b8:	4f 00 be    	mov.d     [--w15], w0
    24ba:	36 00 f9    	pop       0x36
    24bc:	00 40 06    	retfie    

000024be <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    24be:	36 00 f8    	push      0x36
    24c0:	80 9f be    	mov.d     w0, [w15++]
    24c2:	82 9f be    	mov.d     w2, [w15++]
    24c4:	84 9f be    	mov.d     w4, [w15++]
    24c6:	86 9f be    	mov.d     w6, [w15++]
    24c8:	32 00 f8    	push      0x32
    24ca:	34 00 f8    	push      0x34
    24cc:	10 00 20    	mov.w     #0x1, w0
    24ce:	a0 01 88    	mov.w     w0, 0x34
    24d0:	00 20 20    	mov.w     #0x200, w0
    24d2:	90 01 88    	mov.w     w0, 0x32
    24d4:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer4);
    24d6:	c0 bf 20    	mov.w     #0xbfc, w0
    24d8:	84 ff 07    	rcall     0x23e2 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE23> <.Letext0> <.Ltext0>
}
    24da:	00 80 fa    	ulnk      
    24dc:	34 00 f9    	pop       0x34
    24de:	32 00 f9    	pop       0x32
    24e0:	4f 03 be    	mov.d     [--w15], w6
    24e2:	4f 02 be    	mov.d     [--w15], w4
    24e4:	4f 01 be    	mov.d     [--w15], w2
    24e6:	4f 00 be    	mov.d     [--w15], w0
    24e8:	36 00 f9    	pop       0x36
    24ea:	00 40 06    	retfie    

000024ec <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    24ec:	36 00 f8    	push      0x36
    24ee:	80 9f be    	mov.d     w0, [w15++]
    24f0:	82 9f be    	mov.d     w2, [w15++]
    24f2:	84 9f be    	mov.d     w4, [w15++]
    24f4:	86 9f be    	mov.d     w6, [w15++]
    24f6:	32 00 f8    	push      0x32
    24f8:	34 00 f8    	push      0x34
    24fa:	10 00 20    	mov.w     #0x1, w0
    24fc:	a0 01 88    	mov.w     w0, 0x34
    24fe:	00 20 20    	mov.w     #0x200, w0
    2500:	90 01 88    	mov.w     w0, 0x32
    2502:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer5);
    2504:	20 c1 20    	mov.w     #0xc12, w0
    2506:	6d ff 07    	rcall     0x23e2 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE23> <.Letext0> <.Ltext0>
}
    2508:	00 80 fa    	ulnk      
    250a:	34 00 f9    	pop       0x34
    250c:	32 00 f9    	pop       0x32
    250e:	4f 03 be    	mov.d     [--w15], w6
    2510:	4f 02 be    	mov.d     [--w15], w4
    2512:	4f 01 be    	mov.d     [--w15], w2
    2514:	4f 00 be    	mov.d     [--w15], w0
    2516:	36 00 f9    	pop       0x36
    2518:	00 40 06    	retfie    

0000251a <_init_timer>:

void init_timer(void) {
    251a:	00 00 fa    	lnk       #0x0
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    251c:	b0 00 20    	mov.w     #0xb, w0
    251e:	80 1f 78    	mov.w     w0, [w15++]
    2520:	47 00 20    	mov.w     #0x4, w7
    2522:	36 c0 b3    	mov.b     #0x3, w6
    2524:	45 09 20    	mov.w     #0x94, w5
    2526:	44 08 20    	mov.w     #0x84, w4
    2528:	03 10 20    	mov.w     #0x100, w3
    252a:	22 10 20    	mov.w     #0x102, w2
    252c:	41 10 20    	mov.w     #0x104, w1
    252e:	a0 bb 20    	mov.w     #0xbba, w0
    2530:	33 00 07    	rcall     0x2598 <_timer_init> <L0> <.LFB7> <.LFE6>
    2532:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    2534:	c0 00 20    	mov.w     #0xc, w0
    2536:	80 1f 78    	mov.w     w0, [w15++]
    2538:	80 03 eb    	clr.w     w7
    253a:	76 c0 b3    	mov.b     #0x7, w6
    253c:	45 09 20    	mov.w     #0x94, w5
    253e:	44 08 20    	mov.w     #0x84, w4
    2540:	63 10 20    	mov.w     #0x106, w3
    2542:	c2 10 20    	mov.w     #0x10c, w2
    2544:	01 11 20    	mov.w     #0x110, w1
    2546:	00 bd 20    	mov.w     #0xbd0, w0
    2548:	27 00 07    	rcall     0x2598 <_timer_init> <L0> <.LFB7> <.LFE6>
    254a:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    254c:	d0 00 20    	mov.w     #0xd, w0
    254e:	80 1f 78    	mov.w     w0, [w15++]
    2550:	17 00 20    	mov.w     #0x1, w7
    2552:	86 c0 b3    	mov.b     #0x8, w6
    2554:	45 09 20    	mov.w     #0x94, w5
    2556:	44 08 20    	mov.w     #0x84, w4
    2558:	a3 10 20    	mov.w     #0x10a, w3
    255a:	e2 10 20    	mov.w     #0x10e, w2
    255c:	21 11 20    	mov.w     #0x112, w1
    255e:	60 be 20    	mov.w     #0xbe6, w0
    2560:	1b 00 07    	rcall     0x2598 <_timer_init> <L0> <.LFB7> <.LFE6>
    2562:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    2564:	e0 00 20    	mov.w     #0xe, w0
    2566:	80 1f 78    	mov.w     w0, [w15++]
    2568:	27 00 20    	mov.w     #0x2, w7
    256a:	b6 c0 b3    	mov.b     #0xb, w6
    256c:	65 09 20    	mov.w     #0x96, w5
    256e:	64 08 20    	mov.w     #0x86, w4
    2570:	43 11 20    	mov.w     #0x114, w3
    2572:	a2 11 20    	mov.w     #0x11a, w2
    2574:	e1 11 20    	mov.w     #0x11e, w1
    2576:	c0 bf 20    	mov.w     #0xbfc, w0
    2578:	0f 00 07    	rcall     0x2598 <_timer_init> <L0> <.LFB7> <.LFE6>
    257a:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    257c:	f0 00 20    	mov.w     #0xf, w0
    257e:	80 1f 78    	mov.w     w0, [w15++]
    2580:	37 00 20    	mov.w     #0x3, w7
    2582:	c6 c0 b3    	mov.b     #0xc, w6
    2584:	65 09 20    	mov.w     #0x96, w5
    2586:	64 08 20    	mov.w     #0x86, w4
    2588:	83 11 20    	mov.w     #0x118, w3
    258a:	c2 11 20    	mov.w     #0x11c, w2
    258c:	01 12 20    	mov.w     #0x120, w1
    258e:	20 c1 20    	mov.w     #0xc12, w0
    2590:	03 00 07    	rcall     0x2598 <_timer_init> <L0> <.LFB7> <.LFE6>
    2592:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    2594:	00 80 fa    	ulnk      
    2596:	00 00 06    	return    

00002598 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    2598:	10 00 fa    	lnk       #0x10
    259a:	00 0f 78    	mov.w     w0, [w14]
    259c:	11 07 98    	mov.w     w1, [w14+2]
    259e:	22 07 98    	mov.w     w2, [w14+4]
    25a0:	33 07 98    	mov.w     w3, [w14+6]
    25a2:	44 07 98    	mov.w     w4, [w14+8]
    25a4:	55 07 98    	mov.w     w5, [w14+10]
    25a6:	46 4f 98    	mov.b     w6, [w14+12]
    25a8:	77 07 98    	mov.w     w7, [w14+14]
    self->TxCON = TxCON;
    25aa:	1e 00 78    	mov.w     [w14], w0
    25ac:	9e 00 90    	mov.w     [w14+2], w1
    25ae:	01 08 78    	mov.w     w1, [w0]
    self->PRx = PRx;
    25b0:	1e 00 78    	mov.w     [w14], w0
    25b2:	ae 00 90    	mov.w     [w14+4], w1
    25b4:	11 00 98    	mov.w     w1, [w0+2]
    self->TMRx = TMRx;
    25b6:	1e 00 78    	mov.w     [w14], w0
    25b8:	be 00 90    	mov.w     [w14+6], w1
    25ba:	21 00 98    	mov.w     w1, [w0+4]
    self->IFSy = IFSy;
    25bc:	1e 00 78    	mov.w     [w14], w0
    25be:	ce 00 90    	mov.w     [w14+8], w1
    25c0:	31 00 98    	mov.w     w1, [w0+6]
    self->IECy = IECy;
    25c2:	1e 00 78    	mov.w     [w14], w0
    25c4:	de 00 90    	mov.w     [w14+10], w1
    25c6:	41 00 98    	mov.w     w1, [w0+8]
    self->flagbit = flagbit;
    25c8:	1e 00 78    	mov.w     [w14], w0
    25ca:	ce 48 90    	mov.b     [w14+12], w1
    25cc:	21 48 98    	mov.b     w1, [w0+10]
    self->octselnum = octselnum;
    25ce:	1e 00 78    	mov.w     [w14], w0
    25d0:	fe 00 90    	mov.w     [w14+14], w1
    25d2:	61 00 98    	mov.w     w1, [w0+12]
    self->ocsyncselnum = ocsyncselnum;
    25d4:	1e 00 78    	mov.w     [w14], w0
    25d6:	ce b8 97    	mov.w     [w14-8], w1
    25d8:	71 00 98    	mov.w     w1, [w0+14]
    self->aftercount = 0;
    25da:	1e 00 78    	mov.w     [w14], w0
    25dc:	80 00 eb    	clr.w     w1
    25de:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    25e0:	1e 00 78    	mov.w     [w14], w0
    25e2:	80 00 eb    	clr.w     w1
    25e4:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    25e6:	1e 00 78    	mov.w     [w14], w0
    25e8:	80 00 eb    	clr.w     w1
    25ea:	21 08 98    	mov.w     w1, [w0+20]
}
    25ec:	00 80 fa    	ulnk      
    25ee:	00 00 06    	return    

000025f0 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    25f0:	06 00 fa    	lnk       #0x6
    25f2:	88 1f 78    	mov.w     w8, [w15++]
    25f4:	00 0f 78    	mov.w     w0, [w14]
    25f6:	12 07 98    	mov.w     w2, [w14+2]
    25f8:	23 07 98    	mov.w     w3, [w14+4]
    if (period>(256.*65536.*TCY)) {
    25fa:	18 c0 b3    	mov.b     #0x1, w8
    25fc:	d2 7b 23    	mov.w     #0x37bd, w2
    25fe:	63 f8 23    	mov.w     #0x3f86, w3
    2600:	1e 00 90    	mov.w     [w14+2], w0
    2602:	ae 00 90    	mov.w     [w14+4], w1
    2604:	c8 f6 07    	rcall     0x1396 <___gesf2> <___gtsf2>
    2606:	00 00 e0    	cp0.w     w0
    2608:	01 00 3c    	bra       GT, 0x260c <.L14>
    260a:	00 44 eb    	clr.b     w8

0000260c <.L14>:
    260c:	08 04 e0    	cp0.b     w8
    260e:	69 00 3a    	bra       NZ, 0x26e2 <.L23>
        return;
    } else if (period>(64.*65536.*TCY)) {
    2610:	18 c0 b3    	mov.b     #0x1, w8
    2612:	d2 7b 23    	mov.w     #0x37bd, w2
    2614:	63 e8 23    	mov.w     #0x3e86, w3
    2616:	1e 00 90    	mov.w     [w14+2], w0
    2618:	ae 00 90    	mov.w     [w14+4], w1
    261a:	bd f6 07    	rcall     0x1396 <___gesf2> <___gtsf2>
    261c:	00 00 e0    	cp0.w     w0
    261e:	01 00 3c    	bra       GT, 0x2622 <.L17>
    2620:	00 44 eb    	clr.b     w8

00002622 <.L17>:
    2622:	08 04 e0    	cp0.b     w8
    2624:	12 00 32    	bra       Z, 0x264a <.L18>
        timer_stop(self);
    2626:	1e 00 78    	mov.w     [w14], w0
    2628:	c4 00 07    	rcall     0x27b2 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0030);
    262a:	1e 00 78    	mov.w     [w14], w0
    262c:	10 00 78    	mov.w     [w0], w0
    262e:	01 03 20    	mov.w     #0x30, w1
    2630:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2632:	1e 00 78    	mov.w     [w14], w0
    2634:	10 04 90    	mov.w     [w0+2], w8
    2636:	02 40 22    	mov.w     #0x2400, w2
    2638:	43 77 24    	mov.w     #0x4774, w3
    263a:	1e 00 90    	mov.w     [w14+2], w0
    263c:	ae 00 90    	mov.w     [w14+4], w1
    263e:	1d f7 07    	rcall     0x147a <___mulsf3>
    2640:	ac f6 07    	rcall     0x139a <___fixunssfsi>
    2642:	00 00 78    	mov.w     w0, w0
    2644:	00 00 e9    	dec.w     w0, w0
    2646:	00 0c 78    	mov.w     w0, [w8]
    2648:	4d 00 37    	bra       0x26e4 <.L13>

0000264a <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    264a:	18 c0 b3    	mov.b     #0x1, w8
    264c:	d2 7b 23    	mov.w     #0x37bd, w2
    264e:	63 d0 23    	mov.w     #0x3d06, w3
    2650:	1e 00 90    	mov.w     [w14+2], w0
    2652:	ae 00 90    	mov.w     [w14+4], w1
    2654:	a0 f6 07    	rcall     0x1396 <___gesf2> <___gtsf2>
    2656:	00 00 e0    	cp0.w     w0
    2658:	01 00 3c    	bra       GT, 0x265c <.L19>
    265a:	00 44 eb    	clr.b     w8

0000265c <.L19>:
    265c:	08 04 e0    	cp0.b     w8
    265e:	12 00 32    	bra       Z, 0x2684 <.L20>
        timer_stop(self);
    2660:	1e 00 78    	mov.w     [w14], w0
    2662:	a7 00 07    	rcall     0x27b2 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0020);
    2664:	1e 00 78    	mov.w     [w14], w0
    2666:	10 00 78    	mov.w     [w0], w0
    2668:	01 02 20    	mov.w     #0x20, w1
    266a:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    266c:	1e 00 78    	mov.w     [w14], w0
    266e:	10 04 90    	mov.w     [w0+2], w8
    2670:	02 40 22    	mov.w     #0x2400, w2
    2672:	43 87 24    	mov.w     #0x4874, w3
    2674:	1e 00 90    	mov.w     [w14+2], w0
    2676:	ae 00 90    	mov.w     [w14+4], w1
    2678:	00 f7 07    	rcall     0x147a <___mulsf3>
    267a:	8f f6 07    	rcall     0x139a <___fixunssfsi>
    267c:	00 00 78    	mov.w     w0, w0
    267e:	00 00 e9    	dec.w     w0, w0
    2680:	00 0c 78    	mov.w     w0, [w8]
    2682:	30 00 37    	bra       0x26e4 <.L13>

00002684 <.L20>:
    } else if (period>(65536.*TCY)) {
    2684:	18 c0 b3    	mov.b     #0x1, w8
    2686:	d2 7b 23    	mov.w     #0x37bd, w2
    2688:	63 b8 23    	mov.w     #0x3b86, w3
    268a:	1e 00 90    	mov.w     [w14+2], w0
    268c:	ae 00 90    	mov.w     [w14+4], w1
    268e:	83 f6 07    	rcall     0x1396 <___gesf2> <___gtsf2>
    2690:	00 00 e0    	cp0.w     w0
    2692:	01 00 3c    	bra       GT, 0x2696 <.L21>
    2694:	00 44 eb    	clr.b     w8

00002696 <.L21>:
    2696:	08 04 e0    	cp0.b     w8
    2698:	12 00 32    	bra       Z, 0x26be <.L22>
        timer_stop(self);
    269a:	1e 00 78    	mov.w     [w14], w0
    269c:	8a 00 07    	rcall     0x27b2 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0010);
    269e:	1e 00 78    	mov.w     [w14], w0
    26a0:	10 00 78    	mov.w     [w0], w0
    26a2:	01 01 20    	mov.w     #0x10, w1
    26a4:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    26a6:	1e 00 78    	mov.w     [w14], w0
    26a8:	10 04 90    	mov.w     [w0+2], w8
    26aa:	02 40 22    	mov.w     #0x2400, w2
    26ac:	43 9f 24    	mov.w     #0x49f4, w3
    26ae:	1e 00 90    	mov.w     [w14+2], w0
    26b0:	ae 00 90    	mov.w     [w14+4], w1
    26b2:	e3 f6 07    	rcall     0x147a <___mulsf3>
    26b4:	72 f6 07    	rcall     0x139a <___fixunssfsi>
    26b6:	00 00 78    	mov.w     w0, w0
    26b8:	00 00 e9    	dec.w     w0, w0
    26ba:	00 0c 78    	mov.w     w0, [w8]
    26bc:	13 00 37    	bra       0x26e4 <.L13>

000026be <.L22>:
    } else {
        timer_stop(self);
    26be:	1e 00 78    	mov.w     [w14], w0
    26c0:	78 00 07    	rcall     0x27b2 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0000);
    26c2:	1e 00 78    	mov.w     [w14], w0
    26c4:	10 00 78    	mov.w     [w0], w0
    26c6:	80 00 eb    	clr.w     w1
    26c8:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    26ca:	1e 00 78    	mov.w     [w14], w0
    26cc:	10 04 90    	mov.w     [w0+2], w8
    26ce:	02 40 22    	mov.w     #0x2400, w2
    26d0:	43 b7 24    	mov.w     #0x4b74, w3
    26d2:	1e 00 90    	mov.w     [w14+2], w0
    26d4:	ae 00 90    	mov.w     [w14+4], w1
    26d6:	d1 f6 07    	rcall     0x147a <___mulsf3>
    26d8:	60 f6 07    	rcall     0x139a <___fixunssfsi>
    26da:	00 00 78    	mov.w     w0, w0
    26dc:	00 00 e9    	dec.w     w0, w0
    26de:	00 0c 78    	mov.w     w0, [w8]
    26e0:	01 00 37    	bra       0x26e4 <.L13>

000026e2 <.L23>:
    26e2:	00 00 00    	nop       

000026e4 <.L13>:
    }
}
    26e4:	4f 04 78    	mov.w     [--w15], w8
    26e6:	00 80 fa    	ulnk      
    26e8:	00 00 06    	return    

000026ea <_timer_period>:

float timer_period(_TIMER *self) {
    26ea:	04 00 fa    	lnk       #0x4
    26ec:	88 9f be    	mov.d     w8, [w15++]
    26ee:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    26f0:	1e 00 90    	mov.w     [w14+2], w0
    26f2:	10 00 78    	mov.w     [w0], w0
    26f4:	90 00 78    	mov.w     [w0], w1
    26f6:	00 03 20    	mov.w     #0x30, w0
    26f8:	00 80 60    	and.w     w1, w0, w0
    26fa:	44 00 de    	lsr.w     w0, #0x4, w0
    26fc:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    26fe:	1e 00 78    	mov.w     [w14], w0
    2700:	c2 00 dd    	sl.w      w0, #0x2, w1
    2702:	80 c2 20    	mov.w     #0xc28, w0
    2704:	00 80 40    	add.w     w1, w0, w0
    2706:	10 04 be    	mov.d     [w0], w8
    2708:	1e 00 90    	mov.w     [w14+2], w0
    270a:	10 00 90    	mov.w     [w0+2], w0
    270c:	10 00 78    	mov.w     [w0], w0
    270e:	80 00 eb    	clr.w     w1
    2710:	5f f6 07    	rcall     0x13d0 <___floatunsisf>
    2712:	02 00 20    	mov.w     #0x0, w2
    2714:	03 f8 23    	mov.w     #0x3f80, w3
    2716:	9e f5 07    	rcall     0x1254 <___addsf3>
    2718:	00 01 be    	mov.d     w0, w2
    271a:	08 00 be    	mov.d     w8, w0
    271c:	ae f6 07    	rcall     0x147a <___mulsf3>
}
    271e:	4f 04 be    	mov.d     [--w15], w8
    2720:	00 80 fa    	ulnk      
    2722:	00 00 06    	return    

00002724 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    2724:	06 00 fa    	lnk       #0x6
    2726:	00 0f 78    	mov.w     w0, [w14]
    2728:	12 07 98    	mov.w     w2, [w14+2]
    272a:	23 07 98    	mov.w     w3, [w14+4]
    timer_setPeriod(self, 1./freq);
    272c:	1e 01 90    	mov.w     [w14+2], w2
    272e:	ae 01 90    	mov.w     [w14+4], w3
    2730:	00 00 20    	mov.w     #0x0, w0
    2732:	01 f8 23    	mov.w     #0x3f80, w1
    2734:	ec f5 07    	rcall     0x130e <___divsf3>
    2736:	00 01 be    	mov.d     w0, w2
    2738:	1e 00 78    	mov.w     [w14], w0
    273a:	5a ff 07    	rcall     0x25f0 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
}
    273c:	00 80 fa    	ulnk      
    273e:	00 00 06    	return    

00002740 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2740:	02 00 fa    	lnk       #0x2
    2742:	00 0f 78    	mov.w     w0, [w14]
    return 1./timer_period(self);
    2744:	1e 00 78    	mov.w     [w14], w0
    2746:	d1 ff 07    	rcall     0x26ea <_timer_period> <L0> <.LFB9> <.LFE8>
    2748:	00 01 be    	mov.d     w0, w2
    274a:	00 00 20    	mov.w     #0x0, w0
    274c:	01 f8 23    	mov.w     #0x3f80, w1
    274e:	df f5 07    	rcall     0x130e <___divsf3>
}
    2750:	00 80 fa    	ulnk      
    2752:	00 00 06    	return    

00002754 <_timer_time>:

float timer_time(_TIMER *self) {
    2754:	04 00 fa    	lnk       #0x4
    2756:	88 9f be    	mov.d     w8, [w15++]
    2758:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    275a:	1e 00 90    	mov.w     [w14+2], w0
    275c:	10 00 78    	mov.w     [w0], w0
    275e:	90 00 78    	mov.w     [w0], w1
    2760:	00 03 20    	mov.w     #0x30, w0
    2762:	00 80 60    	and.w     w1, w0, w0
    2764:	44 00 de    	lsr.w     w0, #0x4, w0
    2766:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2768:	1e 00 78    	mov.w     [w14], w0
    276a:	c2 00 dd    	sl.w      w0, #0x2, w1
    276c:	80 c2 20    	mov.w     #0xc28, w0
    276e:	00 80 40    	add.w     w1, w0, w0
    2770:	10 04 be    	mov.d     [w0], w8
    2772:	1e 00 90    	mov.w     [w14+2], w0
    2774:	10 00 90    	mov.w     [w0+2], w0
    2776:	10 00 78    	mov.w     [w0], w0
    2778:	80 00 eb    	clr.w     w1
    277a:	2a f6 07    	rcall     0x13d0 <___floatunsisf>
    277c:	02 00 20    	mov.w     #0x0, w2
    277e:	03 f8 23    	mov.w     #0x3f80, w3
    2780:	69 f5 07    	rcall     0x1254 <___addsf3>
    2782:	00 01 be    	mov.d     w0, w2
    2784:	08 00 be    	mov.d     w8, w0
    2786:	79 f6 07    	rcall     0x147a <___mulsf3>
}
    2788:	4f 04 be    	mov.d     [--w15], w8
    278a:	00 80 fa    	ulnk      
    278c:	00 00 06    	return    

0000278e <_timer_start>:

void timer_start(_TIMER *self) {
    278e:	02 00 fa    	lnk       #0x2
    2790:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    2792:	1e 00 78    	mov.w     [w14], w0
    2794:	2b 00 07    	rcall     0x27ec <_timer_lower> <L0> <.LFB16> <.LFE15>
    poke(self->TMRx, 0);
    2796:	1e 00 78    	mov.w     [w14], w0
    2798:	20 00 90    	mov.w     [w0+4], w0
    279a:	80 00 eb    	clr.w     w1
    279c:	01 08 78    	mov.w     w1, [w0]
    bitset(self->TxCON, 15);
    279e:	1e 00 78    	mov.w     [w14], w0
    27a0:	10 00 78    	mov.w     [w0], w0
    27a2:	9e 00 78    	mov.w     [w14], w1
    27a4:	91 00 78    	mov.w     [w1], w1
    27a6:	11 01 78    	mov.w     [w1], w2
    27a8:	01 00 28    	mov.w     #0x8000, w1
    27aa:	82 80 70    	ior.w     w1, w2, w1
    27ac:	01 08 78    	mov.w     w1, [w0]
}
    27ae:	00 80 fa    	ulnk      
    27b0:	00 00 06    	return    

000027b2 <_timer_stop>:

void timer_stop(_TIMER *self) {
    27b2:	02 00 fa    	lnk       #0x2
    27b4:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->TxCON, 15);
    27b6:	1e 00 78    	mov.w     [w14], w0
    27b8:	10 00 78    	mov.w     [w0], w0
    27ba:	9e 00 78    	mov.w     [w14], w1
    27bc:	91 00 78    	mov.w     [w1], w1
    27be:	11 01 78    	mov.w     [w1], w2
    27c0:	f1 ff 27    	mov.w     #0x7fff, w1
    27c2:	81 00 61    	and.w     w2, w1, w1
    27c4:	01 08 78    	mov.w     w1, [w0]
}
    27c6:	00 80 fa    	ulnk      
    27c8:	00 00 06    	return    

000027ca <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    27ca:	02 00 fa    	lnk       #0x2
    27cc:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->IFSy, self->flagbit);
    27ce:	1e 00 78    	mov.w     [w14], w0
    27d0:	30 00 90    	mov.w     [w0+6], w0
    27d2:	90 00 78    	mov.w     [w0], w1
    27d4:	1e 00 78    	mov.w     [w14], w0
    27d6:	20 48 90    	mov.b     [w0+10], w0
    27d8:	00 80 fb    	ze        w0, w0
    27da:	12 00 20    	mov.w     #0x1, w2
    27dc:	00 10 dd    	sl.w      w2, w0, w0
    27de:	00 80 60    	and.w     w1, w0, w0
    27e0:	00 f0 a7    	btsc.w    w0, #0xf
    27e2:	00 00 ea    	neg.w     w0, w0
    27e4:	00 00 ea    	neg.w     w0, w0
    27e6:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    27e8:	00 80 fa    	ulnk      
    27ea:	00 00 06    	return    

000027ec <_timer_lower>:

void timer_lower(_TIMER *self) {
    27ec:	02 00 fa    	lnk       #0x2
    27ee:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IFSy, self->flagbit);
    27f0:	1e 00 78    	mov.w     [w14], w0
    27f2:	30 00 90    	mov.w     [w0+6], w0
    27f4:	9e 00 78    	mov.w     [w14], w1
    27f6:	b1 00 90    	mov.w     [w1+6], w1
    27f8:	11 01 78    	mov.w     [w1], w2
    27fa:	9e 00 78    	mov.w     [w14], w1
    27fc:	a1 48 90    	mov.b     [w1+10], w1
    27fe:	81 80 fb    	ze        w1, w1
    2800:	13 00 20    	mov.w     #0x1, w3
    2802:	81 18 dd    	sl.w      w3, w1, w1
    2804:	81 80 ea    	com.w     w1, w1
    2806:	81 00 61    	and.w     w2, w1, w1
    2808:	01 08 78    	mov.w     w1, [w0]
}
    280a:	00 80 fa    	ulnk      
    280c:	00 00 06    	return    

0000280e <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    280e:	02 00 fa    	lnk       #0x2
    2810:	00 0f 78    	mov.w     w0, [w14]
    return peek(self->TMRx);
    2812:	1e 00 78    	mov.w     [w14], w0
    2814:	20 00 90    	mov.w     [w0+4], w0
    2816:	10 00 78    	mov.w     [w0], w0
}
    2818:	00 80 fa    	ulnk      
    281a:	00 00 06    	return    

0000281c <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    281c:	02 00 fa    	lnk       #0x2
    281e:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->IECy, self->flagbit);
    2820:	1e 00 78    	mov.w     [w14], w0
    2822:	40 00 90    	mov.w     [w0+8], w0
    2824:	9e 00 78    	mov.w     [w14], w1
    2826:	c1 00 90    	mov.w     [w1+8], w1
    2828:	11 01 78    	mov.w     [w1], w2
    282a:	9e 00 78    	mov.w     [w14], w1
    282c:	a1 48 90    	mov.b     [w1+10], w1
    282e:	81 80 fb    	ze        w1, w1
    2830:	13 00 20    	mov.w     #0x1, w3
    2832:	81 18 dd    	sl.w      w3, w1, w1
    2834:	82 80 70    	ior.w     w1, w2, w1
    2836:	01 08 78    	mov.w     w1, [w0]
}
    2838:	00 80 fa    	ulnk      
    283a:	00 00 06    	return    

0000283c <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    283c:	02 00 fa    	lnk       #0x2
    283e:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IECy, self->flagbit);
    2840:	1e 00 78    	mov.w     [w14], w0
    2842:	40 00 90    	mov.w     [w0+8], w0
    2844:	9e 00 78    	mov.w     [w14], w1
    2846:	c1 00 90    	mov.w     [w1+8], w1
    2848:	11 01 78    	mov.w     [w1], w2
    284a:	9e 00 78    	mov.w     [w14], w1
    284c:	a1 48 90    	mov.b     [w1+10], w1
    284e:	81 80 fb    	ze        w1, w1
    2850:	13 00 20    	mov.w     #0x1, w3
    2852:	81 18 dd    	sl.w      w3, w1, w1
    2854:	81 80 ea    	com.w     w1, w1
    2856:	81 00 61    	and.w     w2, w1, w1
    2858:	01 08 78    	mov.w     w1, [w0]
}
    285a:	00 80 fa    	ulnk      
    285c:	00 00 06    	return    

0000285e <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    285e:	08 00 fa    	lnk       #0x8
    2860:	00 0f 78    	mov.w     w0, [w14]
    2862:	12 07 98    	mov.w     w2, [w14+2]
    2864:	23 07 98    	mov.w     w3, [w14+4]
    2866:	31 07 98    	mov.w     w1, [w14+6]
    timer_disableInterrupt(self);
    2868:	1e 00 78    	mov.w     [w14], w0
    286a:	e8 ff 07    	rcall     0x283c <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, interval);
    286c:	1e 01 90    	mov.w     [w14+2], w2
    286e:	ae 01 90    	mov.w     [w14+4], w3
    2870:	1e 00 78    	mov.w     [w14], w0
    2872:	be fe 07    	rcall     0x25f0 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = 0;
    2874:	1e 00 78    	mov.w     [w14], w0
    2876:	80 00 eb    	clr.w     w1
    2878:	01 08 98    	mov.w     w1, [w0+16]
    self->every = callback;
    287a:	1e 00 78    	mov.w     [w14], w0
    287c:	be 00 90    	mov.w     [w14+6], w1
    287e:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    2880:	1e 00 78    	mov.w     [w14], w0
    2882:	80 00 eb    	clr.w     w1
    2884:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    2886:	1e 00 78    	mov.w     [w14], w0
    2888:	c9 ff 07    	rcall     0x281c <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    288a:	1e 00 78    	mov.w     [w14], w0
    288c:	80 ff 07    	rcall     0x278e <_timer_start> <L0> <.LFB13> <.LFE12>
}
    288e:	00 80 fa    	ulnk      
    2890:	00 00 06    	return    

00002892 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    2892:	0a 00 fa    	lnk       #0xa
    2894:	00 0f 78    	mov.w     w0, [w14]
    2896:	12 07 98    	mov.w     w2, [w14+2]
    2898:	23 07 98    	mov.w     w3, [w14+4]
    289a:	31 07 98    	mov.w     w1, [w14+6]
    289c:	44 07 98    	mov.w     w4, [w14+8]
    timer_disableInterrupt(self);
    289e:	1e 00 78    	mov.w     [w14], w0
    28a0:	cd ff 07    	rcall     0x283c <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, delay);
    28a2:	1e 01 90    	mov.w     [w14+2], w2
    28a4:	ae 01 90    	mov.w     [w14+4], w3
    28a6:	1e 00 78    	mov.w     [w14], w0
    28a8:	a3 fe 07    	rcall     0x25f0 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = num_times;
    28aa:	1e 00 78    	mov.w     [w14], w0
    28ac:	be 00 90    	mov.w     [w14+6], w1
    28ae:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    28b0:	1e 00 78    	mov.w     [w14], w0
    28b2:	80 00 eb    	clr.w     w1
    28b4:	11 08 98    	mov.w     w1, [w0+18]
    self->after = callback;
    28b6:	1e 00 78    	mov.w     [w14], w0
    28b8:	ce 00 90    	mov.w     [w14+8], w1
    28ba:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    28bc:	1e 00 78    	mov.w     [w14], w0
    28be:	ae ff 07    	rcall     0x281c <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    28c0:	1e 00 78    	mov.w     [w14], w0
    28c2:	65 ff 07    	rcall     0x278e <_timer_start> <L0> <.LFB13> <.LFE12>
}
    28c4:	00 80 fa    	ulnk      
    28c6:	00 00 06    	return    

000028c8 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    28c8:	02 00 fa    	lnk       #0x2
    28ca:	00 0f 78    	mov.w     w0, [w14]
    timer_disableInterrupt(self);
    28cc:	1e 00 78    	mov.w     [w14], w0
    28ce:	b6 ff 07    	rcall     0x283c <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_lower(self);
    28d0:	1e 00 78    	mov.w     [w14], w0
    28d2:	8c ff 07    	rcall     0x27ec <_timer_lower> <L0> <.LFB16> <.LFE15>
    timer_stop(self);
    28d4:	1e 00 78    	mov.w     [w14], w0
    28d6:	6d ff 07    	rcall     0x27b2 <_timer_stop> <L0> <.LFB14> <.LFE13>
    self->aftercount = 0;
    28d8:	1e 00 78    	mov.w     [w14], w0
    28da:	80 00 eb    	clr.w     w1
    28dc:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    28de:	1e 00 78    	mov.w     [w14], w0
    28e0:	80 00 eb    	clr.w     w1
    28e2:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    28e4:	1e 00 78    	mov.w     [w14], w0
    28e6:	80 00 eb    	clr.w     w1
    28e8:	21 08 98    	mov.w     w1, [w0+20]
}
    28ea:	00 80 fa    	ulnk      
    28ec:	00 00 06    	return    

000028ee <___digitalWrite>:
    28ee:	04 00 fa    	lnk       #0x4
    28f0:	00 0f 78    	mov.w     w0, [w14]
    28f2:	11 07 98    	mov.w     w1, [w14+2]
    28f4:	1e 00 90    	mov.w     [w14+2], w0
    28f6:	00 00 e0    	cp0.w     w0
    28f8:	0d 00 32    	bra       Z, 0x2914 <.L2>
    28fa:	1e 00 78    	mov.w     [w14], w0
    28fc:	10 00 78    	mov.w     [w0], w0
    28fe:	9e 00 78    	mov.w     [w14], w1
    2900:	91 00 78    	mov.w     [w1], w1
    2902:	11 01 78    	mov.w     [w1], w2
    2904:	9e 00 78    	mov.w     [w14], w1
    2906:	e1 40 90    	mov.b     [w1+6], w1
    2908:	81 80 fb    	ze        w1, w1
    290a:	13 00 20    	mov.w     #0x1, w3
    290c:	81 18 dd    	sl.w      w3, w1, w1
    290e:	82 80 70    	ior.w     w1, w2, w1
    2910:	01 08 78    	mov.w     w1, [w0]
    2912:	0d 00 37    	bra       0x292e <.L1>

00002914 <.L2>:
    2914:	1e 00 78    	mov.w     [w14], w0
    2916:	10 00 78    	mov.w     [w0], w0
    2918:	9e 00 78    	mov.w     [w14], w1
    291a:	91 00 78    	mov.w     [w1], w1
    291c:	11 01 78    	mov.w     [w1], w2
    291e:	9e 00 78    	mov.w     [w14], w1
    2920:	e1 40 90    	mov.b     [w1+6], w1
    2922:	81 80 fb    	ze        w1, w1
    2924:	13 00 20    	mov.w     #0x1, w3
    2926:	81 18 dd    	sl.w      w3, w1, w1
    2928:	81 80 ea    	com.w     w1, w1
    292a:	81 00 61    	and.w     w2, w1, w1
    292c:	01 08 78    	mov.w     w1, [w0]

0000292e <.L1>:
    292e:	00 80 fa    	ulnk      
    2930:	00 00 06    	return    

00002932 <___digitalRead>:
    2932:	02 00 fa    	lnk       #0x2
    2934:	00 0f 78    	mov.w     w0, [w14]
    2936:	1e 00 78    	mov.w     [w14], w0
    2938:	10 00 78    	mov.w     [w0], w0
    293a:	90 00 78    	mov.w     [w0], w1
    293c:	1e 00 78    	mov.w     [w14], w0
    293e:	60 40 90    	mov.b     [w0+6], w0
    2940:	00 80 fb    	ze        w0, w0
    2942:	12 00 20    	mov.w     #0x1, w2
    2944:	00 10 dd    	sl.w      w2, w0, w0
    2946:	00 80 60    	and.w     w1, w0, w0
    2948:	00 f0 a7    	btsc.w    w0, #0xf
    294a:	00 00 ea    	neg.w     w0, w0
    294c:	00 00 ea    	neg.w     w0, w0
    294e:	4f 00 de    	lsr.w     w0, #0xf, w0
    2950:	00 80 fa    	ulnk      
    2952:	00 00 06    	return    

00002954 <___analogRead>:
    2954:	02 00 fa    	lnk       #0x2
    2956:	00 0f 78    	mov.w     w0, [w14]
    2958:	1e 00 78    	mov.w     [w14], w0
    295a:	40 00 90    	mov.w     [w0+8], w0
    295c:	40 19 88    	mov.w     w0, 0x328
    295e:	20 23 a8    	bset.b    0x320, #0x1
    2960:	00 00 00    	nop       

00002962 <.L6>:
    2962:	00 19 80    	mov.w     0x320, w0
    2964:	61 00 60    	and.w     w0, #0x1, w0
    2966:	00 00 e0    	cp0.w     w0
    2968:	fc ff 32    	bra       Z, 0x2962 <.L6>
    296a:	00 18 80    	mov.w     0x300, w0
    296c:	00 80 fa    	ulnk      
    296e:	00 00 06    	return    

00002970 <_init_pin>:
    2970:	02 00 fa    	lnk       #0x2
    2972:	40 6d 20    	mov.w     #0x6d4, w0
    2974:	80 1f 78    	mov.w     w0, [w15++]
    2976:	47 01 20    	mov.w     #0x14, w7
    2978:	00 43 eb    	clr.b     w6
    297a:	80 82 eb    	setm.w    w5
    297c:	54 c0 b3    	mov.b     #0x5, w4
    297e:	80 01 eb    	clr.w     w3
    2980:	82 2d 20    	mov.w     #0x2d8, w2
    2982:	a1 2d 20    	mov.w     #0x2da, w1
    2984:	40 84 20    	mov.w     #0x844, w0
    2986:	08 01 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2988:	8f 87 e9    	dec2.w    w15, w15
    298a:	80 6d 20    	mov.w     #0x6d8, w0
    298c:	80 1f 78    	mov.w     w0, [w15++]
    298e:	97 01 20    	mov.w     #0x19, w7
    2990:	86 c0 b3    	mov.b     #0x8, w6
    2992:	80 82 eb    	setm.w    w5
    2994:	44 c0 b3    	mov.b     #0x4, w4
    2996:	80 01 eb    	clr.w     w3
    2998:	82 2d 20    	mov.w     #0x2d8, w2
    299a:	a1 2d 20    	mov.w     #0x2da, w1
    299c:	a0 85 20    	mov.w     #0x85a, w0
    299e:	fc 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    29a0:	8f 87 e9    	dec2.w    w15, w15
    29a2:	a0 6c 20    	mov.w     #0x6ca, w0
    29a4:	80 1f 78    	mov.w     w0, [w15++]
    29a6:	a7 00 20    	mov.w     #0xa, w7
    29a8:	00 43 eb    	clr.b     w6
    29aa:	80 82 eb    	setm.w    w5
    29ac:	44 c0 b3    	mov.b     #0x4, w4
    29ae:	80 01 eb    	clr.w     w3
    29b0:	82 2e 20    	mov.w     #0x2e8, w2
    29b2:	a1 2e 20    	mov.w     #0x2ea, w1
    29b4:	00 87 20    	mov.w     #0x870, w0
    29b6:	f0 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    29b8:	8f 87 e9    	dec2.w    w15, w15
    29ba:	00 6d 20    	mov.w     #0x6d0, w0
    29bc:	80 1f 78    	mov.w     w0, [w15++]
    29be:	17 01 20    	mov.w     #0x11, w7
    29c0:	86 c0 b3    	mov.b     #0x8, w6
    29c2:	80 82 eb    	setm.w    w5
    29c4:	54 c0 b3    	mov.b     #0x5, w4
    29c6:	80 01 eb    	clr.w     w3
    29c8:	82 2e 20    	mov.w     #0x2e8, w2
    29ca:	a1 2e 20    	mov.w     #0x2ea, w1
    29cc:	60 88 20    	mov.w     #0x886, w0
    29ce:	e4 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    29d0:	8f 87 e9    	dec2.w    w15, w15
    29d2:	c0 6d 20    	mov.w     #0x6dc, w0
    29d4:	80 1f 78    	mov.w     w0, [w15++]
    29d6:	d7 01 20    	mov.w     #0x1d, w7
    29d8:	86 c0 b3    	mov.b     #0x8, w6
    29da:	f5 00 20    	mov.w     #0xf, w5
    29dc:	f4 c0 b3    	mov.b     #0xf, w4
    29de:	23 4e 20    	mov.w     #0x4e2, w3
    29e0:	82 2c 20    	mov.w     #0x2c8, w2
    29e2:	a1 2c 20    	mov.w     #0x2ca, w1
    29e4:	c0 89 20    	mov.w     #0x89c, w0
    29e6:	d8 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    29e8:	8f 87 e9    	dec2.w    w15, w15
    29ea:	00 6d 20    	mov.w     #0x6d0, w0
    29ec:	80 1f 78    	mov.w     w0, [w15++]
    29ee:	07 01 20    	mov.w     #0x10, w7
    29f0:	00 43 eb    	clr.b     w6
    29f2:	80 82 eb    	setm.w    w5
    29f4:	34 c0 b3    	mov.b     #0x3, w4
    29f6:	80 01 eb    	clr.w     w3
    29f8:	82 2e 20    	mov.w     #0x2e8, w2
    29fa:	a1 2e 20    	mov.w     #0x2ea, w1
    29fc:	20 8b 20    	mov.w     #0x8b2, w0
    29fe:	cc 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a00:	8f 87 e9    	dec2.w    w15, w15
    2a02:	20 6c 20    	mov.w     #0x6c2, w0
    2a04:	80 1f 78    	mov.w     w0, [w15++]
    2a06:	27 00 20    	mov.w     #0x2, w7
    2a08:	00 43 eb    	clr.b     w6
    2a0a:	80 82 eb    	setm.w    w5
    2a0c:	84 c0 b3    	mov.b     #0x8, w4
    2a0e:	80 01 eb    	clr.w     w3
    2a10:	82 2d 20    	mov.w     #0x2d8, w2
    2a12:	a1 2d 20    	mov.w     #0x2da, w1
    2a14:	80 8c 20    	mov.w     #0x8c8, w0
    2a16:	c0 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a18:	8f 87 e9    	dec2.w    w15, w15
    2a1a:	c0 6c 20    	mov.w     #0x6cc, w0
    2a1c:	80 1f 78    	mov.w     w0, [w15++]
    2a1e:	c7 00 20    	mov.w     #0xc, w7
    2a20:	00 43 eb    	clr.b     w6
    2a22:	80 82 eb    	setm.w    w5
    2a24:	b4 c0 b3    	mov.b     #0xb, w4
    2a26:	80 01 eb    	clr.w     w3
    2a28:	82 2d 20    	mov.w     #0x2d8, w2
    2a2a:	a1 2d 20    	mov.w     #0x2da, w1
    2a2c:	e0 8d 20    	mov.w     #0x8de, w0
    2a2e:	b4 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a30:	8f 87 e9    	dec2.w    w15, w15
    2a32:	40 6c 20    	mov.w     #0x6c4, w0
    2a34:	80 1f 78    	mov.w     w0, [w15++]
    2a36:	47 00 20    	mov.w     #0x4, w7
    2a38:	00 43 eb    	clr.b     w6
    2a3a:	80 82 eb    	setm.w    w5
    2a3c:	94 c0 b3    	mov.b     #0x9, w4
    2a3e:	80 01 eb    	clr.w     w3
    2a40:	82 2d 20    	mov.w     #0x2d8, w2
    2a42:	a1 2d 20    	mov.w     #0x2da, w1
    2a44:	40 8f 20    	mov.w     #0x8f4, w0
    2a46:	a8 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a48:	8f 87 e9    	dec2.w    w15, w15
    2a4a:	20 6c 20    	mov.w     #0x6c2, w0
    2a4c:	80 1f 78    	mov.w     w0, [w15++]
    2a4e:	37 00 20    	mov.w     #0x3, w7
    2a50:	86 c0 b3    	mov.b     #0x8, w6
    2a52:	80 82 eb    	setm.w    w5
    2a54:	a4 c0 b3    	mov.b     #0xa, w4
    2a56:	80 01 eb    	clr.w     w3
    2a58:	82 2d 20    	mov.w     #0x2d8, w2
    2a5a:	a1 2d 20    	mov.w     #0x2da, w1
    2a5c:	a0 90 20    	mov.w     #0x90a, w0
    2a5e:	9c 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a60:	8f 87 e9    	dec2.w    w15, w15
    2a62:	a0 6c 20    	mov.w     #0x6ca, w0
    2a64:	80 1f 78    	mov.w     w0, [w15++]
    2a66:	b7 00 20    	mov.w     #0xb, w7
    2a68:	86 c0 b3    	mov.b     #0x8, w6
    2a6a:	80 82 eb    	setm.w    w5
    2a6c:	00 42 eb    	clr.b     w4
    2a6e:	80 01 eb    	clr.w     w3
    2a70:	82 2d 20    	mov.w     #0x2d8, w2
    2a72:	a1 2d 20    	mov.w     #0x2da, w1
    2a74:	00 92 20    	mov.w     #0x920, w0
    2a76:	90 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a78:	8f 87 e9    	dec2.w    w15, w15
    2a7a:	80 6d 20    	mov.w     #0x6d8, w0
    2a7c:	80 1f 78    	mov.w     w0, [w15++]
    2a7e:	87 01 20    	mov.w     #0x18, w7
    2a80:	00 43 eb    	clr.b     w6
    2a82:	80 82 eb    	setm.w    w5
    2a84:	14 c0 b3    	mov.b     #0x1, w4
    2a86:	80 01 eb    	clr.w     w3
    2a88:	82 2d 20    	mov.w     #0x2d8, w2
    2a8a:	a1 2d 20    	mov.w     #0x2da, w1
    2a8c:	60 93 20    	mov.w     #0x936, w0
    2a8e:	84 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2a90:	8f 87 e9    	dec2.w    w15, w15
    2a92:	60 6d 20    	mov.w     #0x6d6, w0
    2a94:	80 1f 78    	mov.w     w0, [w15++]
    2a96:	77 01 20    	mov.w     #0x17, w7
    2a98:	86 c0 b3    	mov.b     #0x8, w6
    2a9a:	80 82 eb    	setm.w    w5
    2a9c:	24 c0 b3    	mov.b     #0x2, w4
    2a9e:	80 01 eb    	clr.w     w3
    2aa0:	82 2d 20    	mov.w     #0x2d8, w2
    2aa2:	a1 2d 20    	mov.w     #0x2da, w1
    2aa4:	c0 94 20    	mov.w     #0x94c, w0
    2aa6:	78 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2aa8:	8f 87 e9    	dec2.w    w15, w15
    2aaa:	60 6d 20    	mov.w     #0x6d6, w0
    2aac:	80 1f 78    	mov.w     w0, [w15++]
    2aae:	67 01 20    	mov.w     #0x16, w7
    2ab0:	00 43 eb    	clr.b     w6
    2ab2:	80 82 eb    	setm.w    w5
    2ab4:	34 c0 b3    	mov.b     #0x3, w4
    2ab6:	80 01 eb    	clr.w     w3
    2ab8:	82 2d 20    	mov.w     #0x2d8, w2
    2aba:	a1 2d 20    	mov.w     #0x2da, w1
    2abc:	20 96 20    	mov.w     #0x962, w0
    2abe:	6c 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2ac0:	8f 87 e9    	dec2.w    w15, w15
    2ac2:	00 6c 20    	mov.w     #0x6c0, w0
    2ac4:	80 1f 78    	mov.w     w0, [w15++]
    2ac6:	80 03 eb    	clr.w     w7
    2ac8:	00 43 eb    	clr.b     w6
    2aca:	80 02 eb    	clr.w     w5
    2acc:	00 42 eb    	clr.b     w4
    2ace:	23 4e 20    	mov.w     #0x4e2, w3
    2ad0:	82 2c 20    	mov.w     #0x2c8, w2
    2ad2:	a1 2c 20    	mov.w     #0x2ca, w1
    2ad4:	60 9e 20    	mov.w     #0x9e6, w0
    2ad6:	60 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2ad8:	8f 87 e9    	dec2.w    w15, w15
    2ada:	00 6c 20    	mov.w     #0x6c0, w0
    2adc:	80 1f 78    	mov.w     w0, [w15++]
    2ade:	17 00 20    	mov.w     #0x1, w7
    2ae0:	86 c0 b3    	mov.b     #0x8, w6
    2ae2:	15 00 20    	mov.w     #0x1, w5
    2ae4:	14 c0 b3    	mov.b     #0x1, w4
    2ae6:	23 4e 20    	mov.w     #0x4e2, w3
    2ae8:	82 2c 20    	mov.w     #0x2c8, w2
    2aea:	a1 2c 20    	mov.w     #0x2ca, w1
    2aec:	00 9d 20    	mov.w     #0x9d0, w0
    2aee:	54 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2af0:	8f 87 e9    	dec2.w    w15, w15
    2af2:	c0 6c 20    	mov.w     #0x6cc, w0
    2af4:	80 1f 78    	mov.w     w0, [w15++]
    2af6:	d7 00 20    	mov.w     #0xd, w7
    2af8:	86 c0 b3    	mov.b     #0x8, w6
    2afa:	25 00 20    	mov.w     #0x2, w5
    2afc:	24 c0 b3    	mov.b     #0x2, w4
    2afe:	23 4e 20    	mov.w     #0x4e2, w3
    2b00:	82 2c 20    	mov.w     #0x2c8, w2
    2b02:	a1 2c 20    	mov.w     #0x2ca, w1
    2b04:	a0 9b 20    	mov.w     #0x9ba, w0
    2b06:	48 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2b08:	8f 87 e9    	dec2.w    w15, w15
    2b0a:	00 00 eb    	clr.w     w0
    2b0c:	80 1f 78    	mov.w     w0, [w15++]
    2b0e:	80 83 eb    	setm.w    w7
    2b10:	00 43 eb    	clr.b     w6
    2b12:	35 00 20    	mov.w     #0x3, w5
    2b14:	34 c0 b3    	mov.b     #0x3, w4
    2b16:	23 4e 20    	mov.w     #0x4e2, w3
    2b18:	82 2c 20    	mov.w     #0x2c8, w2
    2b1a:	a1 2c 20    	mov.w     #0x2ca, w1
    2b1c:	40 9a 20    	mov.w     #0x9a4, w0
    2b1e:	3c 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2b20:	8f 87 e9    	dec2.w    w15, w15
    2b22:	c0 6d 20    	mov.w     #0x6dc, w0
    2b24:	80 1f 78    	mov.w     w0, [w15++]
    2b26:	c7 01 20    	mov.w     #0x1c, w7
    2b28:	00 43 eb    	clr.b     w6
    2b2a:	45 00 20    	mov.w     #0x4, w5
    2b2c:	44 c0 b3    	mov.b     #0x4, w4
    2b2e:	23 4e 20    	mov.w     #0x4e2, w3
    2b30:	82 2c 20    	mov.w     #0x2c8, w2
    2b32:	a1 2c 20    	mov.w     #0x2ca, w1
    2b34:	e0 98 20    	mov.w     #0x98e, w0
    2b36:	30 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2b38:	8f 87 e9    	dec2.w    w15, w15
    2b3a:	20 6d 20    	mov.w     #0x6d2, w0
    2b3c:	80 1f 78    	mov.w     w0, [w15++]
    2b3e:	27 01 20    	mov.w     #0x12, w7
    2b40:	00 43 eb    	clr.b     w6
    2b42:	55 00 20    	mov.w     #0x5, w5
    2b44:	54 c0 b3    	mov.b     #0x5, w4
    2b46:	23 4e 20    	mov.w     #0x4e2, w3
    2b48:	82 2c 20    	mov.w     #0x2c8, w2
    2b4a:	a1 2c 20    	mov.w     #0x2ca, w1
    2b4c:	80 97 20    	mov.w     #0x978, w0
    2b4e:	24 00 07    	rcall     0x2b98 <_pin_init> <L0> <.LFB4> <.LFE3>
    2b50:	8f 87 e9    	dec2.w    w15, w15
    2b52:	00 00 eb    	clr.w     w0
    2b54:	00 0f 78    	mov.w     w0, [w14]
    2b56:	07 00 37    	bra       0x2b66 <.L8>

00002b58 <.L9>:
    2b58:	1e 00 78    	mov.w     [w14], w0
    2b5a:	76 00 b9    	mul.su    w0, #0x16, w0
    2b5c:	80 00 78    	mov.w     w0, w1
    2b5e:	40 84 20    	mov.w     #0x844, w0
    2b60:	00 80 40    	add.w     w1, w0, w0
    2b62:	46 00 07    	rcall     0x2bf0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    2b64:	1e 0f e8    	inc.w     [w14], [w14]

00002b66 <.L8>:
    2b66:	1e 00 78    	mov.w     [w14], w0
    2b68:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    2b6a:	f6 ff 36    	bra       LEU, 0x2b58 <.L9>
    2b6c:	00 00 eb    	clr.w     w0
    2b6e:	00 0f 78    	mov.w     w0, [w14]
    2b70:	07 00 37    	bra       0x2b80 <.L10>

00002b72 <.L11>:
    2b72:	1e 00 78    	mov.w     [w14], w0
    2b74:	76 00 b9    	mul.su    w0, #0x16, w0
    2b76:	80 00 78    	mov.w     w0, w1
    2b78:	80 97 20    	mov.w     #0x978, w0
    2b7a:	00 80 40    	add.w     w1, w0, w0
    2b7c:	95 00 07    	rcall     0x2ca8 <_pin_analogIn> <L0> <.LFB7> <.LFE6>
    2b7e:	1e 0f e8    	inc.w     [w14], [w14]

00002b80 <.L10>:
    2b80:	1e 00 78    	mov.w     [w14], w0
    2b82:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2b84:	f6 ff 36    	bra       LEU, 0x2b72 <.L11>
    2b86:	00 2e 20    	mov.w     #0x2e0, w0
    2b88:	00 19 88    	mov.w     w0, 0x320
    2b8a:	22 23 ef    	clr.w     0x322
    2b8c:	00 c4 20    	mov.w     #0xc40, w0
    2b8e:	20 19 88    	mov.w     w0, 0x324
    2b90:	28 23 ef    	clr.w     0x328
    2b92:	21 e3 a8    	bset.b    0x321, #0x7
    2b94:	00 80 fa    	ulnk      
    2b96:	00 00 06    	return    

00002b98 <_pin_init>:
    2b98:	10 00 fa    	lnk       #0x10
    2b9a:	00 0f 78    	mov.w     w0, [w14]
    2b9c:	11 07 98    	mov.w     w1, [w14+2]
    2b9e:	22 07 98    	mov.w     w2, [w14+4]
    2ba0:	33 07 98    	mov.w     w3, [w14+6]
    2ba2:	04 4f 98    	mov.b     w4, [w14+8]
    2ba4:	55 07 98    	mov.w     w5, [w14+10]
    2ba6:	46 4f 98    	mov.b     w6, [w14+12]
    2ba8:	77 07 98    	mov.w     w7, [w14+14]
    2baa:	1e 00 78    	mov.w     [w14], w0
    2bac:	9e 00 90    	mov.w     [w14+2], w1
    2bae:	01 08 78    	mov.w     w1, [w0]
    2bb0:	1e 00 78    	mov.w     [w14], w0
    2bb2:	ae 00 90    	mov.w     [w14+4], w1
    2bb4:	11 00 98    	mov.w     w1, [w0+2]
    2bb6:	1e 00 78    	mov.w     [w14], w0
    2bb8:	be 00 90    	mov.w     [w14+6], w1
    2bba:	21 00 98    	mov.w     w1, [w0+4]
    2bbc:	1e 00 78    	mov.w     [w14], w0
    2bbe:	8e 48 90    	mov.b     [w14+8], w1
    2bc0:	61 40 98    	mov.b     w1, [w0+6]
    2bc2:	1e 00 78    	mov.w     [w14], w0
    2bc4:	de 00 90    	mov.w     [w14+10], w1
    2bc6:	41 00 98    	mov.w     w1, [w0+8]
    2bc8:	1e 00 78    	mov.w     [w14], w0
    2bca:	ce 48 90    	mov.b     [w14+12], w1
    2bcc:	21 48 98    	mov.b     w1, [w0+10]
    2bce:	fe 00 90    	mov.w     [w14+14], w1
    2bd0:	1e 00 78    	mov.w     [w14], w0
    2bd2:	61 00 98    	mov.w     w1, [w0+12]
    2bd4:	1e 00 78    	mov.w     [w14], w0
    2bd6:	ce b8 97    	mov.w     [w14-8], w1
    2bd8:	71 00 98    	mov.w     w1, [w0+14]
    2bda:	1e 00 78    	mov.w     [w14], w0
    2bdc:	80 00 eb    	clr.w     w1
    2bde:	01 08 98    	mov.w     w1, [w0+16]
    2be0:	1e 00 78    	mov.w     [w14], w0
    2be2:	80 00 eb    	clr.w     w1
    2be4:	11 08 98    	mov.w     w1, [w0+18]
    2be6:	1e 00 78    	mov.w     [w14], w0
    2be8:	80 00 eb    	clr.w     w1
    2bea:	21 08 98    	mov.w     w1, [w0+20]
    2bec:	00 80 fa    	ulnk      
    2bee:	00 00 06    	return    

00002bf0 <_pin_digitalIn>:
    2bf0:	02 00 fa    	lnk       #0x2
    2bf2:	00 0f 78    	mov.w     w0, [w14]
    2bf4:	1e 00 78    	mov.w     [w14], w0
    2bf6:	20 00 90    	mov.w     [w0+4], w0
    2bf8:	00 00 e0    	cp0.w     w0
    2bfa:	0d 00 32    	bra       Z, 0x2c16 <.L14>
    2bfc:	1e 00 78    	mov.w     [w14], w0
    2bfe:	20 00 90    	mov.w     [w0+4], w0
    2c00:	9e 00 78    	mov.w     [w14], w1
    2c02:	a1 00 90    	mov.w     [w1+4], w1
    2c04:	11 01 78    	mov.w     [w1], w2
    2c06:	9e 00 78    	mov.w     [w14], w1
    2c08:	e1 40 90    	mov.b     [w1+6], w1
    2c0a:	81 80 fb    	ze        w1, w1
    2c0c:	13 00 20    	mov.w     #0x1, w3
    2c0e:	81 18 dd    	sl.w      w3, w1, w1
    2c10:	81 80 ea    	com.w     w1, w1
    2c12:	81 00 61    	and.w     w2, w1, w1
    2c14:	01 08 78    	mov.w     w1, [w0]

00002c16 <.L14>:
    2c16:	1e 00 78    	mov.w     [w14], w0
    2c18:	10 00 90    	mov.w     [w0+2], w0
    2c1a:	9e 00 78    	mov.w     [w14], w1
    2c1c:	91 00 90    	mov.w     [w1+2], w1
    2c1e:	11 01 78    	mov.w     [w1], w2
    2c20:	9e 00 78    	mov.w     [w14], w1
    2c22:	e1 40 90    	mov.b     [w1+6], w1
    2c24:	81 80 fb    	ze        w1, w1
    2c26:	13 00 20    	mov.w     #0x1, w3
    2c28:	81 18 dd    	sl.w      w3, w1, w1
    2c2a:	82 80 70    	ior.w     w1, w2, w1
    2c2c:	01 08 78    	mov.w     w1, [w0]
    2c2e:	1e 00 78    	mov.w     [w14], w0
    2c30:	80 00 eb    	clr.w     w1
    2c32:	11 08 98    	mov.w     w1, [w0+18]
    2c34:	1e 00 78    	mov.w     [w14], w0
    2c36:	21 93 22    	mov.w     #0x2932, w1
    2c38:	21 08 98    	mov.w     w1, [w0+20]
    2c3a:	00 80 fa    	ulnk      
    2c3c:	00 00 06    	return    

00002c3e <_pin_digitalOut>:
    2c3e:	02 00 fa    	lnk       #0x2
    2c40:	00 0f 78    	mov.w     w0, [w14]
    2c42:	1e 00 78    	mov.w     [w14], w0
    2c44:	20 00 90    	mov.w     [w0+4], w0
    2c46:	00 00 e0    	cp0.w     w0
    2c48:	0d 00 32    	bra       Z, 0x2c64 <.L16>
    2c4a:	1e 00 78    	mov.w     [w14], w0
    2c4c:	20 00 90    	mov.w     [w0+4], w0
    2c4e:	9e 00 78    	mov.w     [w14], w1
    2c50:	a1 00 90    	mov.w     [w1+4], w1
    2c52:	11 01 78    	mov.w     [w1], w2
    2c54:	9e 00 78    	mov.w     [w14], w1
    2c56:	e1 40 90    	mov.b     [w1+6], w1
    2c58:	81 80 fb    	ze        w1, w1
    2c5a:	13 00 20    	mov.w     #0x1, w3
    2c5c:	81 18 dd    	sl.w      w3, w1, w1
    2c5e:	81 80 ea    	com.w     w1, w1
    2c60:	81 00 61    	and.w     w2, w1, w1
    2c62:	01 08 78    	mov.w     w1, [w0]

00002c64 <.L16>:
    2c64:	1e 00 78    	mov.w     [w14], w0
    2c66:	10 00 78    	mov.w     [w0], w0
    2c68:	9e 00 78    	mov.w     [w14], w1
    2c6a:	91 00 78    	mov.w     [w1], w1
    2c6c:	11 01 78    	mov.w     [w1], w2
    2c6e:	9e 00 78    	mov.w     [w14], w1
    2c70:	e1 40 90    	mov.b     [w1+6], w1
    2c72:	81 80 fb    	ze        w1, w1
    2c74:	13 00 20    	mov.w     #0x1, w3
    2c76:	81 18 dd    	sl.w      w3, w1, w1
    2c78:	81 80 ea    	com.w     w1, w1
    2c7a:	81 00 61    	and.w     w2, w1, w1
    2c7c:	01 08 78    	mov.w     w1, [w0]
    2c7e:	1e 00 78    	mov.w     [w14], w0
    2c80:	10 00 90    	mov.w     [w0+2], w0
    2c82:	9e 00 78    	mov.w     [w14], w1
    2c84:	91 00 90    	mov.w     [w1+2], w1
    2c86:	11 01 78    	mov.w     [w1], w2
    2c88:	9e 00 78    	mov.w     [w14], w1
    2c8a:	e1 40 90    	mov.b     [w1+6], w1
    2c8c:	81 80 fb    	ze        w1, w1
    2c8e:	13 00 20    	mov.w     #0x1, w3
    2c90:	81 18 dd    	sl.w      w3, w1, w1
    2c92:	81 80 ea    	com.w     w1, w1
    2c94:	81 00 61    	and.w     w2, w1, w1
    2c96:	01 08 78    	mov.w     w1, [w0]
    2c98:	1e 00 78    	mov.w     [w14], w0
    2c9a:	e1 8e 22    	mov.w     #0x28ee, w1
    2c9c:	11 08 98    	mov.w     w1, [w0+18]
    2c9e:	1e 00 78    	mov.w     [w14], w0
    2ca0:	21 93 22    	mov.w     #0x2932, w1
    2ca2:	21 08 98    	mov.w     w1, [w0+20]
    2ca4:	00 80 fa    	ulnk      
    2ca6:	00 00 06    	return    

00002ca8 <_pin_analogIn>:
    2ca8:	02 00 fa    	lnk       #0x2
    2caa:	00 0f 78    	mov.w     w0, [w14]
    2cac:	1e 00 78    	mov.w     [w14], w0
    2cae:	20 00 90    	mov.w     [w0+4], w0
    2cb0:	00 00 e0    	cp0.w     w0
    2cb2:	1f 00 32    	bra       Z, 0x2cf2 <.L20>
    2cb4:	1e 00 78    	mov.w     [w14], w0
    2cb6:	10 00 90    	mov.w     [w0+2], w0
    2cb8:	9e 00 78    	mov.w     [w14], w1
    2cba:	91 00 90    	mov.w     [w1+2], w1
    2cbc:	11 01 78    	mov.w     [w1], w2
    2cbe:	9e 00 78    	mov.w     [w14], w1
    2cc0:	e1 40 90    	mov.b     [w1+6], w1
    2cc2:	81 80 fb    	ze        w1, w1
    2cc4:	13 00 20    	mov.w     #0x1, w3
    2cc6:	81 18 dd    	sl.w      w3, w1, w1
    2cc8:	82 80 70    	ior.w     w1, w2, w1
    2cca:	01 08 78    	mov.w     w1, [w0]
    2ccc:	1e 00 78    	mov.w     [w14], w0
    2cce:	20 00 90    	mov.w     [w0+4], w0
    2cd0:	9e 00 78    	mov.w     [w14], w1
    2cd2:	a1 00 90    	mov.w     [w1+4], w1
    2cd4:	11 01 78    	mov.w     [w1], w2
    2cd6:	9e 00 78    	mov.w     [w14], w1
    2cd8:	e1 40 90    	mov.b     [w1+6], w1
    2cda:	81 80 fb    	ze        w1, w1
    2cdc:	13 00 20    	mov.w     #0x1, w3
    2cde:	81 18 dd    	sl.w      w3, w1, w1
    2ce0:	82 80 70    	ior.w     w1, w2, w1
    2ce2:	01 08 78    	mov.w     w1, [w0]
    2ce4:	1e 00 78    	mov.w     [w14], w0
    2ce6:	80 00 eb    	clr.w     w1
    2ce8:	11 08 98    	mov.w     w1, [w0+18]
    2cea:	1e 00 78    	mov.w     [w14], w0
    2cec:	41 95 22    	mov.w     #0x2954, w1
    2cee:	21 08 98    	mov.w     w1, [w0+20]
    2cf0:	01 00 37    	bra       0x2cf4 <.L17>

00002cf2 <.L20>:
    2cf2:	00 00 00    	nop       

00002cf4 <.L17>:
    2cf4:	00 80 fa    	ulnk      
    2cf6:	00 00 06    	return    

00002cf8 <_pin_set>:
    2cf8:	02 00 fa    	lnk       #0x2
    2cfa:	00 0f 78    	mov.w     w0, [w14]
    2cfc:	1e 00 78    	mov.w     [w14], w0
    2cfe:	90 08 90    	mov.w     [w0+18], w1
    2d00:	e0 8e 22    	mov.w     #0x28ee, w0
    2d02:	80 8f 50    	sub.w     w1, w0, [w15]
    2d04:	0c 00 3a    	bra       NZ, 0x2d1e <.L21>
    2d06:	1e 00 78    	mov.w     [w14], w0
    2d08:	10 00 78    	mov.w     [w0], w0
    2d0a:	9e 00 78    	mov.w     [w14], w1
    2d0c:	91 00 78    	mov.w     [w1], w1
    2d0e:	11 01 78    	mov.w     [w1], w2
    2d10:	9e 00 78    	mov.w     [w14], w1
    2d12:	e1 40 90    	mov.b     [w1+6], w1
    2d14:	81 80 fb    	ze        w1, w1
    2d16:	13 00 20    	mov.w     #0x1, w3
    2d18:	81 18 dd    	sl.w      w3, w1, w1
    2d1a:	82 80 70    	ior.w     w1, w2, w1
    2d1c:	01 08 78    	mov.w     w1, [w0]

00002d1e <.L21>:
    2d1e:	00 80 fa    	ulnk      
    2d20:	00 00 06    	return    

00002d22 <_pin_clear>:
    2d22:	02 00 fa    	lnk       #0x2
    2d24:	00 0f 78    	mov.w     w0, [w14]
    2d26:	1e 00 78    	mov.w     [w14], w0
    2d28:	90 08 90    	mov.w     [w0+18], w1
    2d2a:	e0 8e 22    	mov.w     #0x28ee, w0
    2d2c:	80 8f 50    	sub.w     w1, w0, [w15]
    2d2e:	0d 00 3a    	bra       NZ, 0x2d4a <.L23>
    2d30:	1e 00 78    	mov.w     [w14], w0
    2d32:	10 00 78    	mov.w     [w0], w0
    2d34:	9e 00 78    	mov.w     [w14], w1
    2d36:	91 00 78    	mov.w     [w1], w1
    2d38:	11 01 78    	mov.w     [w1], w2
    2d3a:	9e 00 78    	mov.w     [w14], w1
    2d3c:	e1 40 90    	mov.b     [w1+6], w1
    2d3e:	81 80 fb    	ze        w1, w1
    2d40:	13 00 20    	mov.w     #0x1, w3
    2d42:	81 18 dd    	sl.w      w3, w1, w1
    2d44:	81 80 ea    	com.w     w1, w1
    2d46:	81 00 61    	and.w     w2, w1, w1
    2d48:	01 08 78    	mov.w     w1, [w0]

00002d4a <.L23>:
    2d4a:	00 80 fa    	ulnk      
    2d4c:	00 00 06    	return    

00002d4e <_pin_toggle>:
    2d4e:	02 00 fa    	lnk       #0x2
    2d50:	00 0f 78    	mov.w     w0, [w14]
    2d52:	1e 00 78    	mov.w     [w14], w0
    2d54:	90 08 90    	mov.w     [w0+18], w1
    2d56:	e0 8e 22    	mov.w     #0x28ee, w0
    2d58:	80 8f 50    	sub.w     w1, w0, [w15]
    2d5a:	0c 00 3a    	bra       NZ, 0x2d74 <.L25>
    2d5c:	1e 00 78    	mov.w     [w14], w0
    2d5e:	10 00 78    	mov.w     [w0], w0
    2d60:	9e 00 78    	mov.w     [w14], w1
    2d62:	91 00 78    	mov.w     [w1], w1
    2d64:	11 01 78    	mov.w     [w1], w2
    2d66:	9e 00 78    	mov.w     [w14], w1
    2d68:	e1 40 90    	mov.b     [w1+6], w1
    2d6a:	81 80 fb    	ze        w1, w1
    2d6c:	13 00 20    	mov.w     #0x1, w3
    2d6e:	81 18 dd    	sl.w      w3, w1, w1
    2d70:	81 00 69    	xor.w     w2, w1, w1
    2d72:	01 08 78    	mov.w     w1, [w0]

00002d74 <.L25>:
    2d74:	00 80 fa    	ulnk      
    2d76:	00 00 06    	return    

00002d78 <_pin_write>:
    2d78:	04 00 fa    	lnk       #0x4
    2d7a:	00 0f 78    	mov.w     w0, [w14]
    2d7c:	11 07 98    	mov.w     w1, [w14+2]
    2d7e:	1e 00 78    	mov.w     [w14], w0
    2d80:	10 08 90    	mov.w     [w0+18], w0
    2d82:	00 00 e0    	cp0.w     w0
    2d84:	05 00 32    	bra       Z, 0x2d90 <.L27>
    2d86:	1e 00 78    	mov.w     [w14], w0
    2d88:	10 09 90    	mov.w     [w0+18], w2
    2d8a:	9e 00 90    	mov.w     [w14+2], w1
    2d8c:	1e 00 78    	mov.w     [w14], w0
    2d8e:	02 00 01    	call      w2

00002d90 <.L27>:
    2d90:	00 80 fa    	ulnk      
    2d92:	00 00 06    	return    

00002d94 <_pin_read>:
    2d94:	02 00 fa    	lnk       #0x2
    2d96:	00 0f 78    	mov.w     w0, [w14]
    2d98:	1e 00 78    	mov.w     [w14], w0
    2d9a:	20 08 90    	mov.w     [w0+20], w0
    2d9c:	00 00 e0    	cp0.w     w0
    2d9e:	05 00 32    	bra       Z, 0x2daa <.L30>
    2da0:	1e 00 78    	mov.w     [w14], w0
    2da2:	a0 08 90    	mov.w     [w0+20], w1
    2da4:	1e 00 78    	mov.w     [w14], w0
    2da6:	01 00 01    	call      w1
    2da8:	01 00 37    	bra       0x2dac <.L31>

00002daa <.L30>:
    2daa:	00 80 eb    	setm.w    w0

00002dac <.L31>:
    2dac:	00 80 fa    	ulnk      
    2dae:	00 00 06    	return    

00002db0 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    2db0:	08 00 fa    	lnk       #0x8
    2db2:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2db4:	3e 00 90    	mov.w     [w14+6], w0
    2db6:	00 08 90    	mov.w     [w0+16], w0
    2db8:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    2dba:	00 00 eb    	clr.w     w0
    2dbc:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxR);
    2dbe:	1e 00 78    	mov.w     [w14], w0
    2dc0:	30 00 90    	mov.w     [w0+6], w0
    2dc2:	10 00 78    	mov.w     [w0], w0
    2dc4:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    2dc6:	1e 02 90    	mov.w     [w14+2], w4
    2dc8:	ae 02 90    	mov.w     [w14+4], w5
    2dca:	1e 00 78    	mov.w     [w14], w0
    2dcc:	20 00 90    	mov.w     [w0+4], w0
    2dce:	10 00 78    	mov.w     [w0], w0
    2dd0:	80 00 eb    	clr.w     w1
    2dd2:	00 01 be    	mov.d     w0, w2
    2dd4:	04 00 be    	mov.d     w4, w0
    2dd6:	85 f3 07    	rcall     0x14e2 <___udivsi3>
    2dd8:	00 00 78    	mov.w     w0, w0
}
    2dda:	00 80 fa    	ulnk      
    2ddc:	00 00 06    	return    

00002dde <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    2dde:	0a 00 fa    	lnk       #0xa
    2de0:	30 07 98    	mov.w     w0, [w14+6]
    2de2:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2de4:	3e 00 90    	mov.w     [w14+6], w0
    2de6:	00 08 90    	mov.w     [w0+16], w0
    2de8:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    2dea:	4e 00 90    	mov.w     [w14+8], w0
    2dec:	61 01 b8    	mul.uu    w0, #0x1, w2
    2dee:	1e 00 78    	mov.w     [w14], w0
    2df0:	20 00 90    	mov.w     [w0+4], w0
    2df2:	10 00 78    	mov.w     [w0], w0
    2df4:	80 00 eb    	clr.w     w1
    2df6:	00 9a b9    	mul.ss    w3, w0, w4
    2df8:	04 02 78    	mov.w     w4, w4
    2dfa:	02 8b b9    	mul.ss    w1, w2, w6
    2dfc:	86 02 78    	mov.w     w6, w5
    2dfe:	05 02 42    	add.w     w4, w5, w4
    2e00:	00 10 b8    	mul.uu    w2, w0, w0
    2e02:	01 02 42    	add.w     w4, w1, w4
    2e04:	84 00 78    	mov.w     w4, w1
    2e06:	10 07 98    	mov.w     w0, [w14+2]
    2e08:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxR) = temp.w[1];
    2e0a:	1e 00 78    	mov.w     [w14], w0
    2e0c:	30 00 90    	mov.w     [w0+6], w0
    2e0e:	ae 00 90    	mov.w     [w14+4], w1
    2e10:	01 08 78    	mov.w     w1, [w0]
}
    2e12:	00 80 fa    	ulnk      
    2e14:	00 00 06    	return    

00002e16 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    2e16:	08 00 fa    	lnk       #0x8
    2e18:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2e1a:	3e 00 90    	mov.w     [w14+6], w0
    2e1c:	00 08 90    	mov.w     [w0+16], w0
    2e1e:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    2e20:	00 00 eb    	clr.w     w0
    2e22:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    2e24:	1e 00 78    	mov.w     [w14], w0
    2e26:	20 00 90    	mov.w     [w0+4], w0
    2e28:	90 00 78    	mov.w     [w0], w1
    2e2a:	1e 00 78    	mov.w     [w14], w0
    2e2c:	60 00 90    	mov.w     [w0+12], w0
    2e2e:	00 80 50    	sub.w     w1, w0, w0
    2e30:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    2e32:	1e 02 90    	mov.w     [w14+2], w4
    2e34:	ae 02 90    	mov.w     [w14+4], w5
    2e36:	1e 00 78    	mov.w     [w14], w0
    2e38:	70 00 90    	mov.w     [w0+14], w0
    2e3a:	80 00 eb    	clr.w     w1
    2e3c:	00 01 be    	mov.d     w0, w2
    2e3e:	04 00 be    	mov.d     w4, w0
    2e40:	50 f3 07    	rcall     0x14e2 <___udivsi3>
    2e42:	00 00 78    	mov.w     w0, w0
}
    2e44:	00 80 fa    	ulnk      
    2e46:	00 00 06    	return    

00002e48 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    2e48:	0a 00 fa    	lnk       #0xa
    2e4a:	30 07 98    	mov.w     w0, [w14+6]
    2e4c:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2e4e:	3e 00 90    	mov.w     [w14+6], w0
    2e50:	00 08 90    	mov.w     [w0+16], w0
    2e52:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    2e54:	4e 00 90    	mov.w     [w14+8], w0
    2e56:	61 01 b8    	mul.uu    w0, #0x1, w2
    2e58:	1e 00 78    	mov.w     [w14], w0
    2e5a:	70 00 90    	mov.w     [w0+14], w0
    2e5c:	80 00 eb    	clr.w     w1
    2e5e:	00 9a b9    	mul.ss    w3, w0, w4
    2e60:	04 02 78    	mov.w     w4, w4
    2e62:	02 8b b9    	mul.ss    w1, w2, w6
    2e64:	86 02 78    	mov.w     w6, w5
    2e66:	05 02 42    	add.w     w4, w5, w4
    2e68:	00 10 b8    	mul.uu    w2, w0, w0
    2e6a:	01 02 42    	add.w     w4, w1, w4
    2e6c:	84 00 78    	mov.w     w4, w1
    2e6e:	10 07 98    	mov.w     w0, [w14+2]
    2e70:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    2e72:	1e 00 78    	mov.w     [w14], w0
    2e74:	20 00 90    	mov.w     [w0+4], w0
    2e76:	9e 00 78    	mov.w     [w14], w1
    2e78:	61 01 90    	mov.w     [w1+12], w2
    2e7a:	ae 00 90    	mov.w     [w14+4], w1
    2e7c:	81 00 41    	add.w     w2, w1, w1
    2e7e:	01 08 78    	mov.w     w1, [w0]
}
    2e80:	00 80 fa    	ulnk      
    2e82:	00 00 06    	return    

00002e84 <_init_oc>:

void init_oc(void) {
    2e84:	00 00 fa    	lnk       #0x0
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    2e86:	26 01 20    	mov.w     #0x12, w6
    2e88:	85 19 20    	mov.w     #0x198, w5
    2e8a:	64 19 20    	mov.w     #0x196, w4
    2e8c:	43 19 20    	mov.w     #0x194, w3
    2e8e:	22 19 20    	mov.w     #0x192, w2
    2e90:	01 19 20    	mov.w     #0x190, w1
    2e92:	80 b1 20    	mov.w     #0xb18, w0
    2e94:	42 00 07    	rcall     0x2f1a <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    2e96:	36 01 20    	mov.w     #0x13, w6
    2e98:	25 1a 20    	mov.w     #0x1a2, w5
    2e9a:	04 1a 20    	mov.w     #0x1a0, w4
    2e9c:	e3 19 20    	mov.w     #0x19e, w3
    2e9e:	c2 19 20    	mov.w     #0x19c, w2
    2ea0:	a1 19 20    	mov.w     #0x19a, w1
    2ea2:	a0 b2 20    	mov.w     #0xb2a, w0
    2ea4:	3a 00 07    	rcall     0x2f1a <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    2ea6:	46 01 20    	mov.w     #0x14, w6
    2ea8:	c5 1a 20    	mov.w     #0x1ac, w5
    2eaa:	a4 1a 20    	mov.w     #0x1aa, w4
    2eac:	83 1a 20    	mov.w     #0x1a8, w3
    2eae:	62 1a 20    	mov.w     #0x1a6, w2
    2eb0:	41 1a 20    	mov.w     #0x1a4, w1
    2eb2:	c0 b3 20    	mov.w     #0xb3c, w0
    2eb4:	32 00 07    	rcall     0x2f1a <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    2eb6:	56 01 20    	mov.w     #0x15, w6
    2eb8:	65 1b 20    	mov.w     #0x1b6, w5
    2eba:	44 1b 20    	mov.w     #0x1b4, w4
    2ebc:	23 1b 20    	mov.w     #0x1b2, w3
    2ebe:	02 1b 20    	mov.w     #0x1b0, w2
    2ec0:	e1 1a 20    	mov.w     #0x1ae, w1
    2ec2:	e0 b4 20    	mov.w     #0xb4e, w0
    2ec4:	2a 00 07    	rcall     0x2f1a <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    2ec6:	66 01 20    	mov.w     #0x16, w6
    2ec8:	05 1c 20    	mov.w     #0x1c0, w5
    2eca:	e4 1b 20    	mov.w     #0x1be, w4
    2ecc:	c3 1b 20    	mov.w     #0x1bc, w3
    2ece:	a2 1b 20    	mov.w     #0x1ba, w2
    2ed0:	81 1b 20    	mov.w     #0x1b8, w1
    2ed2:	00 b6 20    	mov.w     #0xb60, w0
    2ed4:	22 00 07    	rcall     0x2f1a <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    2ed6:	76 01 20    	mov.w     #0x17, w6
    2ed8:	a5 1c 20    	mov.w     #0x1ca, w5
    2eda:	84 1c 20    	mov.w     #0x1c8, w4
    2edc:	63 1c 20    	mov.w     #0x1c6, w3
    2ede:	42 1c 20    	mov.w     #0x1c4, w2
    2ee0:	21 1c 20    	mov.w     #0x1c2, w1
    2ee2:	20 b7 20    	mov.w     #0xb72, w0
    2ee4:	1a 00 07    	rcall     0x2f1a <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    2ee6:	86 01 20    	mov.w     #0x18, w6
    2ee8:	45 1d 20    	mov.w     #0x1d4, w5
    2eea:	24 1d 20    	mov.w     #0x1d2, w4
    2eec:	03 1d 20    	mov.w     #0x1d0, w3
    2eee:	e2 1c 20    	mov.w     #0x1ce, w2
    2ef0:	c1 1c 20    	mov.w     #0x1cc, w1
    2ef2:	40 b8 20    	mov.w     #0xb84, w0
    2ef4:	12 00 07    	rcall     0x2f1a <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    2ef6:	96 01 20    	mov.w     #0x19, w6
    2ef8:	e5 1d 20    	mov.w     #0x1de, w5
    2efa:	c4 1d 20    	mov.w     #0x1dc, w4
    2efc:	a3 1d 20    	mov.w     #0x1da, w3
    2efe:	82 1d 20    	mov.w     #0x1d8, w2
    2f00:	61 1d 20    	mov.w     #0x1d6, w1
    2f02:	60 b9 20    	mov.w     #0xb96, w0
    2f04:	0a 00 07    	rcall     0x2f1a <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    2f06:	36 02 20    	mov.w     #0x23, w6
    2f08:	85 1e 20    	mov.w     #0x1e8, w5
    2f0a:	64 1e 20    	mov.w     #0x1e6, w4
    2f0c:	43 1e 20    	mov.w     #0x1e4, w3
    2f0e:	22 1e 20    	mov.w     #0x1e2, w2
    2f10:	01 1e 20    	mov.w     #0x1e0, w1
    2f12:	80 ba 20    	mov.w     #0xba8, w0
    2f14:	02 00 07    	rcall     0x2f1a <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    2f16:	00 80 fa    	ulnk      
    2f18:	00 00 06    	return    

00002f1a <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    2f1a:	0e 00 fa    	lnk       #0xe
    2f1c:	00 0f 78    	mov.w     w0, [w14]
    2f1e:	11 07 98    	mov.w     w1, [w14+2]
    2f20:	22 07 98    	mov.w     w2, [w14+4]
    2f22:	33 07 98    	mov.w     w3, [w14+6]
    2f24:	44 07 98    	mov.w     w4, [w14+8]
    2f26:	55 07 98    	mov.w     w5, [w14+10]
    2f28:	66 07 98    	mov.w     w6, [w14+12]
    self->OCxCON1 = OCxCON1;
    2f2a:	1e 00 78    	mov.w     [w14], w0
    2f2c:	9e 00 90    	mov.w     [w14+2], w1
    2f2e:	01 08 78    	mov.w     w1, [w0]
    self->OCxCON2 = OCxCON2;
    2f30:	1e 00 78    	mov.w     [w14], w0
    2f32:	ae 00 90    	mov.w     [w14+4], w1
    2f34:	11 00 98    	mov.w     w1, [w0+2]
    self->OCxRS = OCxRS;
    2f36:	1e 00 78    	mov.w     [w14], w0
    2f38:	be 00 90    	mov.w     [w14+6], w1
    2f3a:	21 00 98    	mov.w     w1, [w0+4]
    self->OCxR = OCxR;
    2f3c:	1e 00 78    	mov.w     [w14], w0
    2f3e:	ce 00 90    	mov.w     [w14+8], w1
    2f40:	31 00 98    	mov.w     w1, [w0+6]
    self->OCxTMR = OCxTMR;
    2f42:	1e 00 78    	mov.w     [w14], w0
    2f44:	de 00 90    	mov.w     [w14+10], w1
    2f46:	41 00 98    	mov.w     w1, [w0+8]
    self->servooffset = (uint16_t)(1e-3*FCY);
    2f48:	1e 00 78    	mov.w     [w14], w0
    2f4a:	01 e8 23    	mov.w     #0x3e80, w1
    2f4c:	61 00 98    	mov.w     w1, [w0+12]
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    2f4e:	1e 00 78    	mov.w     [w14], w0
    2f50:	01 e8 23    	mov.w     #0x3e80, w1
    2f52:	71 00 98    	mov.w     w1, [w0+14]
    self->rpnum = rpnum;
    2f54:	1e 00 78    	mov.w     [w14], w0
    2f56:	ee 00 90    	mov.w     [w14+12], w1
    2f58:	51 00 98    	mov.w     w1, [w0+10]
    self->pin = NULL;
    2f5a:	1e 00 78    	mov.w     [w14], w0
    2f5c:	80 00 eb    	clr.w     w1
    2f5e:	01 08 98    	mov.w     w1, [w0+16]
}
    2f60:	00 80 fa    	ulnk      
    2f62:	00 00 06    	return    

00002f64 <_oc_free>:

void oc_free(_OC *self) {
    2f64:	02 00 fa    	lnk       #0x2
    2f66:	00 0f 78    	mov.w     w0, [w14]
    *(self->OCxCON1) = 0;
    2f68:	1e 00 78    	mov.w     [w14], w0
    2f6a:	10 00 78    	mov.w     [w0], w0
    2f6c:	80 00 eb    	clr.w     w1
    2f6e:	01 08 78    	mov.w     w1, [w0]
    *(self->OCxCON2) = 0;
    2f70:	1e 00 78    	mov.w     [w14], w0
    2f72:	10 00 90    	mov.w     [w0+2], w0
    2f74:	80 00 eb    	clr.w     w1
    2f76:	01 08 78    	mov.w     w1, [w0]
    if (self->pin) {
    2f78:	1e 00 78    	mov.w     [w14], w0
    2f7a:	00 08 90    	mov.w     [w0+16], w0
    2f7c:	00 00 e0    	cp0.w     w0
    2f7e:	2f 00 32    	bra       Z, 0x2fde <.L7>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2f80:	11 3a 80    	mov.w     0x742, w1
    2f82:	f0 0b 20    	mov.w     #0xbf, w0
    2f84:	00 81 60    	and.w     w1, w0, w2
    2f86:	60 04 20    	mov.w     #0x46, w0
    2f88:	71 05 20    	mov.w     #0x57, w1
    2f8a:	23 74 20    	mov.w     #0x742, w3
    2f8c:	80 49 78    	mov.b     w0, [w3]
    2f8e:	81 49 78    	mov.b     w1, [w3]
    2f90:	82 49 78    	mov.b     w2, [w3]
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    2f92:	1e 00 78    	mov.w     [w14], w0
    2f94:	00 08 90    	mov.w     [w0+16], w0
    2f96:	70 00 90    	mov.w     [w0+14], w0
    2f98:	9e 00 78    	mov.w     [w14], w1
    2f9a:	81 08 90    	mov.w     [w1+16], w1
    2f9c:	f1 00 90    	mov.w     [w1+14], w1
    2f9e:	11 01 78    	mov.w     [w1], w2
    2fa0:	9e 00 78    	mov.w     [w14], w1
    2fa2:	81 08 90    	mov.w     [w1+16], w1
    2fa4:	a1 48 90    	mov.b     [w1+10], w1
    2fa6:	81 80 fb    	ze        w1, w1
    2fa8:	f3 03 20    	mov.w     #0x3f, w3
    2faa:	81 18 dd    	sl.w      w3, w1, w1
    2fac:	81 80 ea    	com.w     w1, w1
    2fae:	81 00 61    	and.w     w2, w1, w1
    2fb0:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2fb2:	10 3a 80    	mov.w     0x742, w0
    2fb4:	00 01 78    	mov.w     w0, w2
    2fb6:	02 60 a0    	bset.w    w2, #0x6
    2fb8:	60 04 20    	mov.w     #0x46, w0
    2fba:	71 05 20    	mov.w     #0x57, w1
    2fbc:	23 74 20    	mov.w     #0x742, w3
    2fbe:	80 49 78    	mov.b     w0, [w3]
    2fc0:	81 49 78    	mov.b     w1, [w3]
    2fc2:	82 49 78    	mov.b     w2, [w3]
        self->pin->owner = NULL;
    2fc4:	1e 00 78    	mov.w     [w14], w0
    2fc6:	00 08 90    	mov.w     [w0+16], w0
    2fc8:	80 00 eb    	clr.w     w1
    2fca:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->pin);
    2fcc:	1e 00 78    	mov.w     [w14], w0
    2fce:	00 08 90    	mov.w     [w0+16], w0
    2fd0:	36 fe 07    	rcall     0x2c3e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_clear(self->pin);
    2fd2:	1e 00 78    	mov.w     [w14], w0
    2fd4:	00 08 90    	mov.w     [w0+16], w0
    2fd6:	a5 fe 07    	rcall     0x2d22 <_pin_clear> <L0> <.LFB9> <.LFE8>
        self->pin = NULL;
    2fd8:	1e 00 78    	mov.w     [w14], w0
    2fda:	80 00 eb    	clr.w     w1
    2fdc:	01 08 98    	mov.w     w1, [w0+16]

00002fde <.L7>:
    }
}
    2fde:	00 80 fa    	ulnk      
    2fe0:	00 00 06    	return    

00002fe2 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    2fe2:	10 00 fa    	lnk       #0x10
    2fe4:	88 1f 78    	mov.w     w8, [w15++]
    2fe6:	20 07 98    	mov.w     w0, [w14+4]
    2fe8:	31 07 98    	mov.w     w1, [w14+6]
    2fea:	42 07 98    	mov.w     w2, [w14+8]
    2fec:	54 07 98    	mov.w     w4, [w14+10]
    2fee:	65 07 98    	mov.w     w5, [w14+12]
    2ff0:	73 07 98    	mov.w     w3, [w14+14]
    WORD32 temp;

    if (pin->rpnum==-1)
    2ff2:	3e 00 90    	mov.w     [w14+6], w0
    2ff4:	60 00 90    	mov.w     [w0+12], w0
    2ff6:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2ff8:	9c 00 32    	bra       Z, 0x3132 <.L18>
        return;
    if (pin->owner==NULL) {
    2ffa:	3e 00 90    	mov.w     [w14+6], w0
    2ffc:	00 08 90    	mov.w     [w0+16], w0
    2ffe:	00 00 e0    	cp0.w     w0
    3000:	33 00 3a    	bra       NZ, 0x3068 <.L12>
        self->pin = pin;
    3002:	2e 00 90    	mov.w     [w14+4], w0
    3004:	be 00 90    	mov.w     [w14+6], w1
    3006:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    3008:	3e 00 90    	mov.w     [w14+6], w0
    300a:	ae 00 90    	mov.w     [w14+4], w1
    300c:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    300e:	11 3a 80    	mov.w     0x742, w1
    3010:	f0 0b 20    	mov.w     #0xbf, w0
    3012:	00 81 60    	and.w     w1, w0, w2
    3014:	60 04 20    	mov.w     #0x46, w0
    3016:	71 05 20    	mov.w     #0x57, w1
    3018:	23 74 20    	mov.w     #0x742, w3
    301a:	80 49 78    	mov.b     w0, [w3]
    301c:	81 49 78    	mov.b     w1, [w3]
    301e:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    3020:	3e 00 90    	mov.w     [w14+6], w0
    3022:	70 00 90    	mov.w     [w0+14], w0
    3024:	be 00 90    	mov.w     [w14+6], w1
    3026:	f1 00 90    	mov.w     [w1+14], w1
    3028:	11 01 78    	mov.w     [w1], w2
    302a:	be 00 90    	mov.w     [w14+6], w1
    302c:	a1 48 90    	mov.b     [w1+10], w1
    302e:	81 80 fb    	ze        w1, w1
    3030:	f3 03 20    	mov.w     #0x3f, w3
    3032:	81 18 dd    	sl.w      w3, w1, w1
    3034:	81 80 ea    	com.w     w1, w1
    3036:	81 00 61    	and.w     w2, w1, w1
    3038:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    303a:	3e 00 90    	mov.w     [w14+6], w0
    303c:	70 00 90    	mov.w     [w0+14], w0
    303e:	be 00 90    	mov.w     [w14+6], w1
    3040:	f1 00 90    	mov.w     [w1+14], w1
    3042:	11 01 78    	mov.w     [w1], w2
    3044:	ae 00 90    	mov.w     [w14+4], w1
    3046:	d1 01 90    	mov.w     [w1+10], w3
    3048:	be 00 90    	mov.w     [w14+6], w1
    304a:	a1 48 90    	mov.b     [w1+10], w1
    304c:	81 80 fb    	ze        w1, w1
    304e:	81 18 dd    	sl.w      w3, w1, w1
    3050:	82 80 70    	ior.w     w1, w2, w1
    3052:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    3054:	10 3a 80    	mov.w     0x742, w0
    3056:	00 01 78    	mov.w     w0, w2
    3058:	02 60 a0    	bset.w    w2, #0x6
    305a:	60 04 20    	mov.w     #0x46, w0
    305c:	71 05 20    	mov.w     #0x57, w1
    305e:	23 74 20    	mov.w     #0x742, w3
    3060:	80 49 78    	mov.b     w0, [w3]
    3062:	81 49 78    	mov.b     w1, [w3]
    3064:	82 49 78    	mov.b     w2, [w3]
    3066:	05 00 37    	bra       0x3072 <.L13>

00003068 <.L12>:
    } else if (pin->owner!=(void *)self) {
    3068:	3e 00 90    	mov.w     [w14+6], w0
    306a:	80 08 90    	mov.w     [w0+16], w1
    306c:	2e 00 90    	mov.w     [w14+4], w0
    306e:	80 8f 50    	sub.w     w1, w0, [w15]
    3070:	62 00 3a    	bra       NZ, 0x3136 <.L19>

00003072 <.L13>:
        return;
    }
    if (timer) {
    3072:	4e 00 90    	mov.w     [w14+8], w0
    3074:	00 00 e0    	cp0.w     w0
    3076:	1c 00 32    	bra       Z, 0x30b0 <.L14>
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    3078:	2e 00 90    	mov.w     [w14+4], w0
    307a:	10 00 78    	mov.w     [w0], w0
    307c:	ce 00 90    	mov.w     [w14+8], w1
    307e:	e1 00 90    	mov.w     [w1+12], w1
    3080:	ca 08 dd    	sl.w      w1, #0xa, w1
    3082:	61 00 b3    	ior.w     #0x6, w1
    3084:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    3086:	2e 00 90    	mov.w     [w14+4], w0
    3088:	10 00 90    	mov.w     [w0+2], w0
    308a:	f1 01 20    	mov.w     #0x1f, w1
    308c:	01 08 78    	mov.w     w1, [w0]
        timer_setFreq(timer, freq);
    308e:	5e 01 90    	mov.w     [w14+10], w2
    3090:	ee 01 90    	mov.w     [w14+12], w3
    3092:	4e 00 90    	mov.w     [w14+8], w0
    3094:	47 fb 07    	rcall     0x2724 <_timer_setFreq> <L0> <.LFB10> <.LFE9>
        *(self->OCxRS) = *(timer->PRx);
    3096:	2e 00 90    	mov.w     [w14+4], w0
    3098:	20 00 90    	mov.w     [w0+4], w0
    309a:	ce 00 90    	mov.w     [w14+8], w1
    309c:	91 00 90    	mov.w     [w1+2], w1
    309e:	91 00 78    	mov.w     [w1], w1
    30a0:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxTMR) = 0;
    30a2:	2e 00 90    	mov.w     [w14+4], w0
    30a4:	40 00 90    	mov.w     [w0+8], w0
    30a6:	80 00 eb    	clr.w     w1
    30a8:	01 08 78    	mov.w     w1, [w0]
        timer_start(timer);
    30aa:	4e 00 90    	mov.w     [w14+8], w0
    30ac:	70 fb 07    	rcall     0x278e <_timer_start> <L0> <.LFB13> <.LFE12>
    30ae:	25 00 37    	bra       0x30fa <.L15>

000030b0 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    30b0:	2e 00 90    	mov.w     [w14+4], w0
    30b2:	10 00 78    	mov.w     [w0], w0
    30b4:	61 c0 21    	mov.w     #0x1c06, w1
    30b6:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    30b8:	2e 00 90    	mov.w     [w14+4], w0
    30ba:	10 00 90    	mov.w     [w0+2], w0
    30bc:	f1 01 20    	mov.w     #0x1f, w1
    30be:	01 08 78    	mov.w     w1, [w0]
        if (freq<(FCY/65536.))
    30c0:	18 c0 b3    	mov.b     #0x1, w8
    30c2:	02 40 22    	mov.w     #0x2400, w2
    30c4:	43 37 24    	mov.w     #0x4374, w3
    30c6:	5e 00 90    	mov.w     [w14+10], w0
    30c8:	ee 00 90    	mov.w     [w14+12], w1
    30ca:	63 f1 07    	rcall     0x1392 <___eqsf2> <___lesf2> <___ltsf2>
    30cc:	00 00 e0    	cp0.w     w0
    30ce:	01 00 35    	bra       LT, 0x30d2 <.L16>
    30d0:	00 44 eb    	clr.b     w8

000030d2 <.L16>:
    30d2:	08 04 e0    	cp0.b     w8
    30d4:	05 00 32    	bra       Z, 0x30e0 <.L17>
            *(self->OCxRS) = 0xFFFF;
    30d6:	2e 00 90    	mov.w     [w14+4], w0
    30d8:	20 00 90    	mov.w     [w0+4], w0
    30da:	80 80 eb    	setm.w    w1
    30dc:	01 08 78    	mov.w     w1, [w0]
    30de:	0d 00 37    	bra       0x30fa <.L15>

000030e0 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    30e0:	2e 00 90    	mov.w     [w14+4], w0
    30e2:	20 04 90    	mov.w     [w0+4], w8
    30e4:	5e 01 90    	mov.w     [w14+10], w2
    30e6:	ee 01 90    	mov.w     [w14+12], w3
    30e8:	00 40 22    	mov.w     #0x2400, w0
    30ea:	41 b7 24    	mov.w     #0x4b74, w1
    30ec:	10 f1 07    	rcall     0x130e <___divsf3>
    30ee:	02 00 20    	mov.w     #0x0, w2
    30f0:	03 f8 23    	mov.w     #0x3f80, w3
    30f2:	af f0 07    	rcall     0x1252 <___subsf3>
    30f4:	52 f1 07    	rcall     0x139a <___fixunssfsi>
    30f6:	00 00 78    	mov.w     w0, w0
    30f8:	00 0c 78    	mov.w     w0, [w8]

000030fa <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    30fa:	7e 00 90    	mov.w     [w14+14], w0
    30fc:	61 01 b8    	mul.uu    w0, #0x1, w2
    30fe:	2e 00 90    	mov.w     [w14+4], w0
    3100:	20 00 90    	mov.w     [w0+4], w0
    3102:	10 00 78    	mov.w     [w0], w0
    3104:	80 00 eb    	clr.w     w1
    3106:	00 9a b9    	mul.ss    w3, w0, w4
    3108:	04 02 78    	mov.w     w4, w4
    310a:	02 8b b9    	mul.ss    w1, w2, w6
    310c:	86 02 78    	mov.w     w6, w5
    310e:	05 02 42    	add.w     w4, w5, w4
    3110:	00 10 b8    	mul.uu    w2, w0, w0
    3112:	01 02 42    	add.w     w4, w1, w4
    3114:	84 00 78    	mov.w     w4, w1
    3116:	00 8f be    	mov.d     w0, [w14]
    *(self->OCxR) = temp.w[1];
    3118:	2e 00 90    	mov.w     [w14+4], w0
    311a:	30 00 90    	mov.w     [w0+6], w0
    311c:	9e 00 90    	mov.w     [w14+2], w1
    311e:	01 08 78    	mov.w     w1, [w0]
    self->pin->write = __pwmWrite;
    3120:	2e 00 90    	mov.w     [w14+4], w0
    3122:	00 08 90    	mov.w     [w0+16], w0
    3124:	e1 dd 22    	mov.w     #0x2dde, w1
    3126:	11 08 98    	mov.w     w1, [w0+18]
    self->pin->read = __pwmRead;
    3128:	2e 00 90    	mov.w     [w14+4], w0
    312a:	00 08 90    	mov.w     [w0+16], w0
    312c:	01 db 22    	mov.w     #0x2db0, w1
    312e:	21 08 98    	mov.w     w1, [w0+20]
    3130:	03 00 37    	bra       0x3138 <.L9>

00003132 <.L18>:
    3132:	00 00 00    	nop       
    3134:	01 00 37    	bra       0x3138 <.L9>

00003136 <.L19>:
    3136:	00 00 00    	nop       

00003138 <.L9>:
}
    3138:	4f 04 78    	mov.w     [--w15], w8
    313a:	00 80 fa    	ulnk      
    313c:	00 00 06    	return    

0000313e <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    313e:	14 00 fa    	lnk       #0x14
    3140:	20 07 98    	mov.w     w0, [w14+4]
    3142:	31 07 98    	mov.w     w1, [w14+6]
    3144:	42 07 98    	mov.w     w2, [w14+8]
    3146:	54 07 98    	mov.w     w4, [w14+10]
    3148:	65 07 98    	mov.w     w5, [w14+12]
    314a:	76 07 98    	mov.w     w6, [w14+14]
    314c:	07 0f 98    	mov.w     w7, [w14+16]
    314e:	13 0f 98    	mov.w     w3, [w14+18]
    WORD32 temp;

    if (pin->rpnum==-1)
    3150:	3e 00 90    	mov.w     [w14+6], w0
    3152:	60 00 90    	mov.w     [w0+12], w0
    3154:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3156:	86 00 32    	bra       Z, 0x3264 <.L25>
        return;
    if (pin->owner==NULL) {
    3158:	3e 00 90    	mov.w     [w14+6], w0
    315a:	00 08 90    	mov.w     [w0+16], w0
    315c:	00 00 e0    	cp0.w     w0
    315e:	33 00 3a    	bra       NZ, 0x31c6 <.L23>
        self->pin = pin;
    3160:	2e 00 90    	mov.w     [w14+4], w0
    3162:	be 00 90    	mov.w     [w14+6], w1
    3164:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    3166:	3e 00 90    	mov.w     [w14+6], w0
    3168:	ae 00 90    	mov.w     [w14+4], w1
    316a:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    316c:	11 3a 80    	mov.w     0x742, w1
    316e:	f0 0b 20    	mov.w     #0xbf, w0
    3170:	00 81 60    	and.w     w1, w0, w2
    3172:	60 04 20    	mov.w     #0x46, w0
    3174:	71 05 20    	mov.w     #0x57, w1
    3176:	23 74 20    	mov.w     #0x742, w3
    3178:	80 49 78    	mov.b     w0, [w3]
    317a:	81 49 78    	mov.b     w1, [w3]
    317c:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    317e:	3e 00 90    	mov.w     [w14+6], w0
    3180:	70 00 90    	mov.w     [w0+14], w0
    3182:	be 00 90    	mov.w     [w14+6], w1
    3184:	f1 00 90    	mov.w     [w1+14], w1
    3186:	11 01 78    	mov.w     [w1], w2
    3188:	be 00 90    	mov.w     [w14+6], w1
    318a:	a1 48 90    	mov.b     [w1+10], w1
    318c:	81 80 fb    	ze        w1, w1
    318e:	f3 03 20    	mov.w     #0x3f, w3
    3190:	81 18 dd    	sl.w      w3, w1, w1
    3192:	81 80 ea    	com.w     w1, w1
    3194:	81 00 61    	and.w     w2, w1, w1
    3196:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3198:	3e 00 90    	mov.w     [w14+6], w0
    319a:	70 00 90    	mov.w     [w0+14], w0
    319c:	be 00 90    	mov.w     [w14+6], w1
    319e:	f1 00 90    	mov.w     [w1+14], w1
    31a0:	11 01 78    	mov.w     [w1], w2
    31a2:	ae 00 90    	mov.w     [w14+4], w1
    31a4:	d1 01 90    	mov.w     [w1+10], w3
    31a6:	be 00 90    	mov.w     [w14+6], w1
    31a8:	a1 48 90    	mov.b     [w1+10], w1
    31aa:	81 80 fb    	ze        w1, w1
    31ac:	81 18 dd    	sl.w      w3, w1, w1
    31ae:	82 80 70    	ior.w     w1, w2, w1
    31b0:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    31b2:	10 3a 80    	mov.w     0x742, w0
    31b4:	00 01 78    	mov.w     w0, w2
    31b6:	02 60 a0    	bset.w    w2, #0x6
    31b8:	60 04 20    	mov.w     #0x46, w0
    31ba:	71 05 20    	mov.w     #0x57, w1
    31bc:	23 74 20    	mov.w     #0x742, w3
    31be:	80 49 78    	mov.b     w0, [w3]
    31c0:	81 49 78    	mov.b     w1, [w3]
    31c2:	82 49 78    	mov.b     w2, [w3]
    31c4:	05 00 37    	bra       0x31d0 <.L24>

000031c6 <.L23>:
    } else if (pin->owner!=(void *)self) {
    31c6:	3e 00 90    	mov.w     [w14+6], w0
    31c8:	80 08 90    	mov.w     [w0+16], w1
    31ca:	2e 00 90    	mov.w     [w14+4], w0
    31cc:	80 8f 50    	sub.w     w1, w0, [w15]
    31ce:	4c 00 3a    	bra       NZ, 0x3268 <.L26>

000031d0 <.L24>:
        return;
    }
    if (timer) {
    31d0:	4e 00 90    	mov.w     [w14+8], w0
    31d2:	00 00 e0    	cp0.w     w0
    31d4:	4a 00 32    	bra       Z, 0x326a <.L20>
        self->servooffset = (uint16_t)(FCY*min_width);
    31d6:	02 40 22    	mov.w     #0x2400, w2
    31d8:	43 b7 24    	mov.w     #0x4b74, w3
    31da:	7e 00 90    	mov.w     [w14+14], w0
    31dc:	8e 08 90    	mov.w     [w14+16], w1
    31de:	4d f1 07    	rcall     0x147a <___mulsf3>
    31e0:	dc f0 07    	rcall     0x139a <___fixunssfsi>
    31e2:	80 00 78    	mov.w     w0, w1
    31e4:	2e 00 90    	mov.w     [w14+4], w0
    31e6:	61 00 98    	mov.w     w1, [w0+12]
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    31e8:	7e 01 90    	mov.w     [w14+14], w2
    31ea:	8e 09 90    	mov.w     [w14+16], w3
    31ec:	3e b8 97    	mov.w     [w14-10], w0
    31ee:	ce b8 97    	mov.w     [w14-8], w1
    31f0:	30 f0 07    	rcall     0x1252 <___subsf3>
    31f2:	02 40 22    	mov.w     #0x2400, w2
    31f4:	43 b7 24    	mov.w     #0x4b74, w3
    31f6:	41 f1 07    	rcall     0x147a <___mulsf3>
    31f8:	d0 f0 07    	rcall     0x139a <___fixunssfsi>
    31fa:	80 00 78    	mov.w     w0, w1
    31fc:	2e 00 90    	mov.w     [w14+4], w0
    31fe:	71 00 98    	mov.w     w1, [w0+14]
        *(self->OCxCON1) = 0x1C0F;
    3200:	2e 00 90    	mov.w     [w14+4], w0
    3202:	10 00 78    	mov.w     [w0], w0
    3204:	f1 c0 21    	mov.w     #0x1c0f, w1
    3206:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    3208:	2e 00 90    	mov.w     [w14+4], w0
    320a:	10 00 90    	mov.w     [w0+2], w0
    320c:	ce 00 90    	mov.w     [w14+8], w1
    320e:	f1 00 90    	mov.w     [w1+14], w1
    3210:	01 70 a0    	bset.w    w1, #0x7
    3212:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxR) = 1;
    3214:	2e 00 90    	mov.w     [w14+4], w0
    3216:	30 00 90    	mov.w     [w0+6], w0
    3218:	11 00 20    	mov.w     #0x1, w1
    321a:	01 08 78    	mov.w     w1, [w0]
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    321c:	1e 08 90    	mov.w     [w14+18], w0
    321e:	61 01 b8    	mul.uu    w0, #0x1, w2
    3220:	2e 00 90    	mov.w     [w14+4], w0
    3222:	70 00 90    	mov.w     [w0+14], w0
    3224:	80 00 eb    	clr.w     w1
    3226:	00 9a b9    	mul.ss    w3, w0, w4
    3228:	04 02 78    	mov.w     w4, w4
    322a:	02 8b b9    	mul.ss    w1, w2, w6
    322c:	86 02 78    	mov.w     w6, w5
    322e:	05 02 42    	add.w     w4, w5, w4
    3230:	00 10 b8    	mul.uu    w2, w0, w0
    3232:	01 02 42    	add.w     w4, w1, w4
    3234:	84 00 78    	mov.w     w4, w1
    3236:	00 8f be    	mov.d     w0, [w14]
        *(self->OCxRS) = self->servooffset+temp.w[1];
    3238:	2e 00 90    	mov.w     [w14+4], w0
    323a:	20 00 90    	mov.w     [w0+4], w0
    323c:	ae 00 90    	mov.w     [w14+4], w1
    323e:	61 01 90    	mov.w     [w1+12], w2
    3240:	9e 00 90    	mov.w     [w14+2], w1
    3242:	81 00 41    	add.w     w2, w1, w1
    3244:	01 08 78    	mov.w     w1, [w0]
        timer_setPeriod(timer, interval);
    3246:	5e 01 90    	mov.w     [w14+10], w2
    3248:	ee 01 90    	mov.w     [w14+12], w3
    324a:	4e 00 90    	mov.w     [w14+8], w0
    324c:	d1 f9 07    	rcall     0x25f0 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
        timer_start(timer);
    324e:	4e 00 90    	mov.w     [w14+8], w0
    3250:	9e fa 07    	rcall     0x278e <_timer_start> <L0> <.LFB13> <.LFE12>
        self->pin->write = __servoWrite;
    3252:	2e 00 90    	mov.w     [w14+4], w0
    3254:	00 08 90    	mov.w     [w0+16], w0
    3256:	81 e4 22    	mov.w     #0x2e48, w1
    3258:	11 08 98    	mov.w     w1, [w0+18]
        self->pin->read = __servoRead;
    325a:	2e 00 90    	mov.w     [w14+4], w0
    325c:	00 08 90    	mov.w     [w0+16], w0
    325e:	61 e1 22    	mov.w     #0x2e16, w1
    3260:	21 08 98    	mov.w     w1, [w0+20]
    3262:	03 00 37    	bra       0x326a <.L20>

00003264 <.L25>:
    3264:	00 00 00    	nop       
    3266:	01 00 37    	bra       0x326a <.L20>

00003268 <.L26>:
    3268:	00 00 00    	nop       

0000326a <.L20>:
    }
}
    326a:	00 80 fa    	ulnk      
    326c:	00 00 06    	return    

0000326e <_init_ui>:
    326e:	00 00 fa    	lnk       #0x0
    3270:	74 c0 b3    	mov.b     #0x7, w4
    3272:	63 4e 20    	mov.w     #0x4e6, w3
    3274:	82 2d 20    	mov.w     #0x2d8, w2
    3276:	a1 2d 20    	mov.w     #0x2da, w1
    3278:	00 80 20    	mov.w     #0x800, w0
    327a:	20 00 07    	rcall     0x32bc <_led_init> <L0> <.LFB1> <.LFE0>
    327c:	00 42 eb    	clr.b     w4
    327e:	a3 4e 20    	mov.w     #0x4ea, w3
    3280:	82 2e 20    	mov.w     #0x2e8, w2
    3282:	a1 2e 20    	mov.w     #0x2ea, w1
    3284:	80 80 20    	mov.w     #0x808, w0
    3286:	1a 00 07    	rcall     0x32bc <_led_init> <L0> <.LFB1> <.LFE0>
    3288:	14 c0 b3    	mov.b     #0x1, w4
    328a:	a3 4e 20    	mov.w     #0x4ea, w3
    328c:	82 2e 20    	mov.w     #0x2e8, w2
    328e:	a1 2e 20    	mov.w     #0x2ea, w1
    3290:	00 81 20    	mov.w     #0x810, w0
    3292:	14 00 07    	rcall     0x32bc <_led_init> <L0> <.LFB1> <.LFE0>
    3294:	f4 c0 b3    	mov.b     #0xf, w4
    3296:	43 4e 20    	mov.w     #0x4e4, w3
    3298:	02 2d 20    	mov.w     #0x2d0, w2
    329a:	21 2d 20    	mov.w     #0x2d2, w1
    329c:	80 81 20    	mov.w     #0x818, w0
    329e:	ad 00 07    	rcall     0x33fa <_sw_init> <L0> <.LFB7> <.LFE6>
    32a0:	c4 c0 b3    	mov.b     #0xc, w4
    32a2:	43 4e 20    	mov.w     #0x4e4, w3
    32a4:	02 2d 20    	mov.w     #0x2d0, w2
    32a6:	21 2d 20    	mov.w     #0x2d2, w1
    32a8:	00 82 20    	mov.w     #0x820, w0
    32aa:	a7 00 07    	rcall     0x33fa <_sw_init> <L0> <.LFB7> <.LFE6>
    32ac:	c4 c0 b3    	mov.b     #0xc, w4
    32ae:	23 4e 20    	mov.w     #0x4e2, w3
    32b0:	82 2c 20    	mov.w     #0x2c8, w2
    32b2:	a1 2c 20    	mov.w     #0x2ca, w1
    32b4:	80 82 20    	mov.w     #0x828, w0
    32b6:	a1 00 07    	rcall     0x33fa <_sw_init> <L0> <.LFB7> <.LFE6>
    32b8:	00 80 fa    	ulnk      
    32ba:	00 00 06    	return    

000032bc <_led_init>:
    32bc:	0a 00 fa    	lnk       #0xa
    32be:	00 0f 78    	mov.w     w0, [w14]
    32c0:	11 07 98    	mov.w     w1, [w14+2]
    32c2:	22 07 98    	mov.w     w2, [w14+4]
    32c4:	33 07 98    	mov.w     w3, [w14+6]
    32c6:	04 4f 98    	mov.b     w4, [w14+8]
    32c8:	1e 00 78    	mov.w     [w14], w0
    32ca:	9e 00 90    	mov.w     [w14+2], w1
    32cc:	01 08 78    	mov.w     w1, [w0]
    32ce:	1e 00 78    	mov.w     [w14], w0
    32d0:	ae 00 90    	mov.w     [w14+4], w1
    32d2:	11 00 98    	mov.w     w1, [w0+2]
    32d4:	1e 00 78    	mov.w     [w14], w0
    32d6:	be 00 90    	mov.w     [w14+6], w1
    32d8:	21 00 98    	mov.w     w1, [w0+4]
    32da:	1e 00 78    	mov.w     [w14], w0
    32dc:	8e 48 90    	mov.b     [w14+8], w1
    32de:	61 40 98    	mov.b     w1, [w0+6]
    32e0:	1e 00 78    	mov.w     [w14], w0
    32e2:	20 00 90    	mov.w     [w0+4], w0
    32e4:	9e 00 78    	mov.w     [w14], w1
    32e6:	a1 00 90    	mov.w     [w1+4], w1
    32e8:	11 01 78    	mov.w     [w1], w2
    32ea:	9e 00 78    	mov.w     [w14], w1
    32ec:	e1 40 90    	mov.b     [w1+6], w1
    32ee:	81 80 fb    	ze        w1, w1
    32f0:	13 00 20    	mov.w     #0x1, w3
    32f2:	81 18 dd    	sl.w      w3, w1, w1
    32f4:	81 80 ea    	com.w     w1, w1
    32f6:	81 00 61    	and.w     w2, w1, w1
    32f8:	01 08 78    	mov.w     w1, [w0]
    32fa:	1e 00 78    	mov.w     [w14], w0
    32fc:	10 00 78    	mov.w     [w0], w0
    32fe:	9e 00 78    	mov.w     [w14], w1
    3300:	91 00 78    	mov.w     [w1], w1
    3302:	11 01 78    	mov.w     [w1], w2
    3304:	9e 00 78    	mov.w     [w14], w1
    3306:	e1 40 90    	mov.b     [w1+6], w1
    3308:	81 80 fb    	ze        w1, w1
    330a:	13 00 20    	mov.w     #0x1, w3
    330c:	81 18 dd    	sl.w      w3, w1, w1
    330e:	81 80 ea    	com.w     w1, w1
    3310:	81 00 61    	and.w     w2, w1, w1
    3312:	01 08 78    	mov.w     w1, [w0]
    3314:	1e 00 78    	mov.w     [w14], w0
    3316:	10 00 90    	mov.w     [w0+2], w0
    3318:	9e 00 78    	mov.w     [w14], w1
    331a:	91 00 90    	mov.w     [w1+2], w1
    331c:	11 01 78    	mov.w     [w1], w2
    331e:	9e 00 78    	mov.w     [w14], w1
    3320:	e1 40 90    	mov.b     [w1+6], w1
    3322:	81 80 fb    	ze        w1, w1
    3324:	13 00 20    	mov.w     #0x1, w3
    3326:	81 18 dd    	sl.w      w3, w1, w1
    3328:	81 80 ea    	com.w     w1, w1
    332a:	81 00 61    	and.w     w2, w1, w1
    332c:	01 08 78    	mov.w     w1, [w0]
    332e:	00 80 fa    	ulnk      
    3330:	00 00 06    	return    

00003332 <_led_on>:
    3332:	02 00 fa    	lnk       #0x2
    3334:	00 0f 78    	mov.w     w0, [w14]
    3336:	1e 00 78    	mov.w     [w14], w0
    3338:	10 00 78    	mov.w     [w0], w0
    333a:	9e 00 78    	mov.w     [w14], w1
    333c:	91 00 78    	mov.w     [w1], w1
    333e:	11 01 78    	mov.w     [w1], w2
    3340:	9e 00 78    	mov.w     [w14], w1
    3342:	e1 40 90    	mov.b     [w1+6], w1
    3344:	81 80 fb    	ze        w1, w1
    3346:	13 00 20    	mov.w     #0x1, w3
    3348:	81 18 dd    	sl.w      w3, w1, w1
    334a:	82 80 70    	ior.w     w1, w2, w1
    334c:	01 08 78    	mov.w     w1, [w0]
    334e:	00 80 fa    	ulnk      
    3350:	00 00 06    	return    

00003352 <_led_off>:
    3352:	02 00 fa    	lnk       #0x2
    3354:	00 0f 78    	mov.w     w0, [w14]
    3356:	1e 00 78    	mov.w     [w14], w0
    3358:	10 00 78    	mov.w     [w0], w0
    335a:	9e 00 78    	mov.w     [w14], w1
    335c:	91 00 78    	mov.w     [w1], w1
    335e:	11 01 78    	mov.w     [w1], w2
    3360:	9e 00 78    	mov.w     [w14], w1
    3362:	e1 40 90    	mov.b     [w1+6], w1
    3364:	81 80 fb    	ze        w1, w1
    3366:	13 00 20    	mov.w     #0x1, w3
    3368:	81 18 dd    	sl.w      w3, w1, w1
    336a:	81 80 ea    	com.w     w1, w1
    336c:	81 00 61    	and.w     w2, w1, w1
    336e:	01 08 78    	mov.w     w1, [w0]
    3370:	00 80 fa    	ulnk      
    3372:	00 00 06    	return    

00003374 <_led_toggle>:
    3374:	02 00 fa    	lnk       #0x2
    3376:	00 0f 78    	mov.w     w0, [w14]
    3378:	1e 00 78    	mov.w     [w14], w0
    337a:	10 00 78    	mov.w     [w0], w0
    337c:	9e 00 78    	mov.w     [w14], w1
    337e:	91 00 78    	mov.w     [w1], w1
    3380:	11 01 78    	mov.w     [w1], w2
    3382:	9e 00 78    	mov.w     [w14], w1
    3384:	e1 40 90    	mov.b     [w1+6], w1
    3386:	81 80 fb    	ze        w1, w1
    3388:	13 00 20    	mov.w     #0x1, w3
    338a:	81 18 dd    	sl.w      w3, w1, w1
    338c:	81 00 69    	xor.w     w2, w1, w1
    338e:	01 08 78    	mov.w     w1, [w0]
    3390:	00 80 fa    	ulnk      
    3392:	00 00 06    	return    

00003394 <_led_write>:
    3394:	04 00 fa    	lnk       #0x4
    3396:	00 0f 78    	mov.w     w0, [w14]
    3398:	11 07 98    	mov.w     w1, [w14+2]
    339a:	1e 00 90    	mov.w     [w14+2], w0
    339c:	00 00 e0    	cp0.w     w0
    339e:	0d 00 32    	bra       Z, 0x33ba <.L7>
    33a0:	1e 00 78    	mov.w     [w14], w0
    33a2:	10 00 78    	mov.w     [w0], w0
    33a4:	9e 00 78    	mov.w     [w14], w1
    33a6:	91 00 78    	mov.w     [w1], w1
    33a8:	11 01 78    	mov.w     [w1], w2
    33aa:	9e 00 78    	mov.w     [w14], w1
    33ac:	e1 40 90    	mov.b     [w1+6], w1
    33ae:	81 80 fb    	ze        w1, w1
    33b0:	13 00 20    	mov.w     #0x1, w3
    33b2:	81 18 dd    	sl.w      w3, w1, w1
    33b4:	82 80 70    	ior.w     w1, w2, w1
    33b6:	01 08 78    	mov.w     w1, [w0]
    33b8:	0d 00 37    	bra       0x33d4 <.L6>

000033ba <.L7>:
    33ba:	1e 00 78    	mov.w     [w14], w0
    33bc:	10 00 78    	mov.w     [w0], w0
    33be:	9e 00 78    	mov.w     [w14], w1
    33c0:	91 00 78    	mov.w     [w1], w1
    33c2:	11 01 78    	mov.w     [w1], w2
    33c4:	9e 00 78    	mov.w     [w14], w1
    33c6:	e1 40 90    	mov.b     [w1+6], w1
    33c8:	81 80 fb    	ze        w1, w1
    33ca:	13 00 20    	mov.w     #0x1, w3
    33cc:	81 18 dd    	sl.w      w3, w1, w1
    33ce:	81 80 ea    	com.w     w1, w1
    33d0:	81 00 61    	and.w     w2, w1, w1
    33d2:	01 08 78    	mov.w     w1, [w0]

000033d4 <.L6>:
    33d4:	00 80 fa    	ulnk      
    33d6:	00 00 06    	return    

000033d8 <_led_read>:
    33d8:	02 00 fa    	lnk       #0x2
    33da:	00 0f 78    	mov.w     w0, [w14]
    33dc:	1e 00 78    	mov.w     [w14], w0
    33de:	10 00 78    	mov.w     [w0], w0
    33e0:	90 00 78    	mov.w     [w0], w1
    33e2:	1e 00 78    	mov.w     [w14], w0
    33e4:	60 40 90    	mov.b     [w0+6], w0
    33e6:	00 80 fb    	ze        w0, w0
    33e8:	12 00 20    	mov.w     #0x1, w2
    33ea:	00 10 dd    	sl.w      w2, w0, w0
    33ec:	00 80 60    	and.w     w1, w0, w0
    33ee:	00 f0 a7    	btsc.w    w0, #0xf
    33f0:	00 00 ea    	neg.w     w0, w0
    33f2:	00 00 ea    	neg.w     w0, w0
    33f4:	4f 00 de    	lsr.w     w0, #0xf, w0
    33f6:	00 80 fa    	ulnk      
    33f8:	00 00 06    	return    

000033fa <_sw_init>:
    33fa:	0a 00 fa    	lnk       #0xa
    33fc:	00 0f 78    	mov.w     w0, [w14]
    33fe:	11 07 98    	mov.w     w1, [w14+2]
    3400:	22 07 98    	mov.w     w2, [w14+4]
    3402:	33 07 98    	mov.w     w3, [w14+6]
    3404:	04 4f 98    	mov.b     w4, [w14+8]
    3406:	1e 00 78    	mov.w     [w14], w0
    3408:	9e 00 90    	mov.w     [w14+2], w1
    340a:	01 08 78    	mov.w     w1, [w0]
    340c:	1e 00 78    	mov.w     [w14], w0
    340e:	ae 00 90    	mov.w     [w14+4], w1
    3410:	11 00 98    	mov.w     w1, [w0+2]
    3412:	1e 00 78    	mov.w     [w14], w0
    3414:	be 00 90    	mov.w     [w14+6], w1
    3416:	21 00 98    	mov.w     w1, [w0+4]
    3418:	1e 00 78    	mov.w     [w14], w0
    341a:	8e 48 90    	mov.b     [w14+8], w1
    341c:	61 40 98    	mov.b     w1, [w0+6]
    341e:	1e 00 78    	mov.w     [w14], w0
    3420:	20 00 90    	mov.w     [w0+4], w0
    3422:	9e 00 78    	mov.w     [w14], w1
    3424:	a1 00 90    	mov.w     [w1+4], w1
    3426:	11 01 78    	mov.w     [w1], w2
    3428:	9e 00 78    	mov.w     [w14], w1
    342a:	e1 40 90    	mov.b     [w1+6], w1
    342c:	81 80 fb    	ze        w1, w1
    342e:	13 00 20    	mov.w     #0x1, w3
    3430:	81 18 dd    	sl.w      w3, w1, w1
    3432:	81 80 ea    	com.w     w1, w1
    3434:	81 00 61    	and.w     w2, w1, w1
    3436:	01 08 78    	mov.w     w1, [w0]
    3438:	1e 00 78    	mov.w     [w14], w0
    343a:	10 00 90    	mov.w     [w0+2], w0
    343c:	9e 00 78    	mov.w     [w14], w1
    343e:	91 00 90    	mov.w     [w1+2], w1
    3440:	11 01 78    	mov.w     [w1], w2
    3442:	9e 00 78    	mov.w     [w14], w1
    3444:	e1 40 90    	mov.b     [w1+6], w1
    3446:	81 80 fb    	ze        w1, w1
    3448:	13 00 20    	mov.w     #0x1, w3
    344a:	81 18 dd    	sl.w      w3, w1, w1
    344c:	82 80 70    	ior.w     w1, w2, w1
    344e:	01 08 78    	mov.w     w1, [w0]
    3450:	00 80 fa    	ulnk      
    3452:	00 00 06    	return    

00003454 <_sw_read>:
    3454:	02 00 fa    	lnk       #0x2
    3456:	00 0f 78    	mov.w     w0, [w14]
    3458:	1e 00 78    	mov.w     [w14], w0
    345a:	10 00 78    	mov.w     [w0], w0
    345c:	90 00 78    	mov.w     [w0], w1
    345e:	1e 00 78    	mov.w     [w14], w0
    3460:	60 40 90    	mov.b     [w0+6], w0
    3462:	00 80 fb    	ze        w0, w0
    3464:	12 00 20    	mov.w     #0x1, w2
    3466:	00 10 dd    	sl.w      w2, w0, w0
    3468:	00 80 60    	and.w     w1, w0, w0
    346a:	00 f0 a7    	btsc.w    w0, #0xf
    346c:	00 00 ea    	neg.w     w0, w0
    346e:	00 00 ea    	neg.w     w0, w0
    3470:	4f 00 de    	lsr.w     w0, #0xf, w0
    3472:	00 80 fa    	ulnk      
    3474:	00 00 06    	return    

00003476 <_on1>:
    3476:	00 00 fa    	lnk       #0x0
    3478:	c1 41 80    	mov.w     0x838, w1
    347a:	d0 41 80    	mov.w     0x83a, w0
    347c:	80 8f 50    	sub.w     w1, w0, [w15]
    347e:	05 00 32    	bra       Z, 0x348a <.L2>
    3480:	c0 89 20    	mov.w     #0x89c, w0
    3482:	3a fc 07    	rcall     0x2cf8 <_pin_set> <L0> <.LFB8> <.LFE7>
    3484:	c0 41 80    	mov.w     0x838, w0
    3486:	d0 41 88    	mov.w     w0, 0x83a
    3488:	0d 00 37    	bra       0x34a4 <.L1>

0000348a <.L2>:
    348a:	80 41 80    	mov.w     0x830, w0
    348c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    348e:	0a 00 3a    	bra       NZ, 0x34a4 <.L1>
    3490:	81 41 80    	mov.w     0x830, w1
    3492:	a0 41 80    	mov.w     0x834, w0
    3494:	80 8f 50    	sub.w     w1, w0, [w15]
    3496:	06 00 32    	bra       Z, 0x34a4 <.L1>
    3498:	00 80 20    	mov.w     #0x800, w0
    349a:	5b ff 07    	rcall     0x3352 <_led_off> <L0> <.LFB3> <.LFE2>
    349c:	c0 41 80    	mov.w     0x838, w0
    349e:	d0 41 88    	mov.w     w0, 0x83a
    34a0:	80 4a 23    	mov.w     #0x34a8, w0
    34a2:	c0 41 88    	mov.w     w0, 0x838

000034a4 <.L1>:
    34a4:	00 80 fa    	ulnk      
    34a6:	00 00 06    	return    

000034a8 <_off1>:
    34a8:	00 00 fa    	lnk       #0x0
    34aa:	c1 41 80    	mov.w     0x838, w1
    34ac:	d0 41 80    	mov.w     0x83a, w0
    34ae:	80 8f 50    	sub.w     w1, w0, [w15]
    34b0:	05 00 32    	bra       Z, 0x34bc <.L5>
    34b2:	c0 89 20    	mov.w     #0x89c, w0
    34b4:	36 fc 07    	rcall     0x2d22 <_pin_clear> <L0> <.LFB9> <.LFE8>
    34b6:	c0 41 80    	mov.w     0x838, w0
    34b8:	d0 41 88    	mov.w     w0, 0x83a
    34ba:	0d 00 37    	bra       0x34d6 <.L4>

000034bc <.L5>:
    34bc:	80 41 80    	mov.w     0x830, w0
    34be:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    34c0:	0a 00 3a    	bra       NZ, 0x34d6 <.L4>
    34c2:	81 41 80    	mov.w     0x830, w1
    34c4:	a0 41 80    	mov.w     0x834, w0
    34c6:	80 8f 50    	sub.w     w1, w0, [w15]
    34c8:	06 00 32    	bra       Z, 0x34d6 <.L4>
    34ca:	00 80 20    	mov.w     #0x800, w0
    34cc:	32 ff 07    	rcall     0x3332 <_led_on> <L0> <.LFB2> <.LFE1>
    34ce:	c0 41 80    	mov.w     0x838, w0
    34d0:	d0 41 88    	mov.w     w0, 0x83a
    34d2:	60 47 23    	mov.w     #0x3476, w0
    34d4:	c0 41 88    	mov.w     w0, 0x838

000034d6 <.L4>:
    34d6:	00 80 fa    	ulnk      
    34d8:	00 00 06    	return    

000034da <_on2>:
    34da:	00 00 fa    	lnk       #0x0
    34dc:	e1 41 80    	mov.w     0x83c, w1
    34de:	f0 41 80    	mov.w     0x83e, w0
    34e0:	80 8f 50    	sub.w     w1, w0, [w15]
    34e2:	05 00 32    	bra       Z, 0x34ee <.L8>
    34e4:	20 8b 20    	mov.w     #0x8b2, w0
    34e6:	08 fc 07    	rcall     0x2cf8 <_pin_set> <L0> <.LFB8> <.LFE7>
    34e8:	e0 41 80    	mov.w     0x83c, w0
    34ea:	f0 41 88    	mov.w     w0, 0x83e
    34ec:	0d 00 37    	bra       0x3508 <.L7>

000034ee <.L8>:
    34ee:	90 41 80    	mov.w     0x832, w0
    34f0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    34f2:	0a 00 3a    	bra       NZ, 0x3508 <.L7>
    34f4:	91 41 80    	mov.w     0x832, w1
    34f6:	b0 41 80    	mov.w     0x836, w0
    34f8:	80 8f 50    	sub.w     w1, w0, [w15]
    34fa:	06 00 32    	bra       Z, 0x3508 <.L7>
    34fc:	00 81 20    	mov.w     #0x810, w0
    34fe:	29 ff 07    	rcall     0x3352 <_led_off> <L0> <.LFB3> <.LFE2>
    3500:	e0 41 80    	mov.w     0x83c, w0
    3502:	f0 41 88    	mov.w     w0, 0x83e
    3504:	c0 50 23    	mov.w     #0x350c, w0
    3506:	e0 41 88    	mov.w     w0, 0x83c

00003508 <.L7>:
    3508:	00 80 fa    	ulnk      
    350a:	00 00 06    	return    

0000350c <_off2>:
    350c:	00 00 fa    	lnk       #0x0
    350e:	e1 41 80    	mov.w     0x83c, w1
    3510:	f0 41 80    	mov.w     0x83e, w0
    3512:	80 8f 50    	sub.w     w1, w0, [w15]
    3514:	05 00 32    	bra       Z, 0x3520 <.L11>
    3516:	20 8b 20    	mov.w     #0x8b2, w0
    3518:	04 fc 07    	rcall     0x2d22 <_pin_clear> <L0> <.LFB9> <.LFE8>
    351a:	e0 41 80    	mov.w     0x83c, w0
    351c:	f0 41 88    	mov.w     w0, 0x83e
    351e:	0d 00 37    	bra       0x353a <.L10>

00003520 <.L11>:
    3520:	90 41 80    	mov.w     0x832, w0
    3522:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3524:	0a 00 3a    	bra       NZ, 0x353a <.L10>
    3526:	91 41 80    	mov.w     0x832, w1
    3528:	b0 41 80    	mov.w     0x836, w0
    352a:	80 8f 50    	sub.w     w1, w0, [w15]
    352c:	06 00 32    	bra       Z, 0x353a <.L10>
    352e:	00 81 20    	mov.w     #0x810, w0
    3530:	00 ff 07    	rcall     0x3332 <_led_on> <L0> <.LFB2> <.LFE1>
    3532:	e0 41 80    	mov.w     0x83c, w0
    3534:	f0 41 88    	mov.w     w0, 0x83e
    3536:	a0 4d 23    	mov.w     #0x34da, w0
    3538:	e0 41 88    	mov.w     w0, 0x83c

0000353a <.L10>:
    353a:	00 80 fa    	ulnk      
    353c:	00 00 06    	return    

0000353e <_main>:
    353e:	00 00 fa    	lnk       #0x0
    3540:	00 10 20    	mov.w     #0x100, w0
    3542:	20 3a 88    	mov.w     w0, 0x744
    3544:	4d f2 07    	rcall     0x19e0 <_init_uart> <L0> <.LFB15> <.LFE14>
    3546:	14 fa 07    	rcall     0x2970 <_init_pin> <L0> <.LFB3> <.LFE2>
    3548:	92 fe 07    	rcall     0x326e <_init_ui> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    354a:	e7 f7 07    	rcall     0x251a <_init_timer> <L0> <.LFB6> <.LFE5>
    354c:	40 84 20    	mov.w     #0x844, w0
    354e:	50 fb 07    	rcall     0x2bf0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    3550:	a0 85 20    	mov.w     #0x85a, w0
    3552:	4e fb 07    	rcall     0x2bf0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    3554:	c0 89 20    	mov.w     #0x89c, w0
    3556:	73 fb 07    	rcall     0x2c3e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    3558:	20 8b 20    	mov.w     #0x8b2, w0
    355a:	71 fb 07    	rcall     0x2c3e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    355c:	a2 99 29    	mov.w     #0x999a, w2
    355e:	93 e1 23    	mov.w     #0x3e19, w3
    3560:	00 bd 20    	mov.w     #0xbd0, w0
    3562:	46 f8 07    	rcall     0x25f0 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    3564:	00 bd 20    	mov.w     #0xbd0, w0
    3566:	13 f9 07    	rcall     0x278e <_timer_start> <L0> <.LFB13> <.LFE12>
    3568:	80 4a 23    	mov.w     #0x34a8, w0
    356a:	c0 41 88    	mov.w     w0, 0x838
    356c:	c0 50 23    	mov.w     #0x350c, w0
    356e:	e0 41 88    	mov.w     w0, 0x83c
    3570:	3a 28 ef    	clr.w     0x83a
    3572:	3e 28 ef    	clr.w     0x83e
    3574:	01 00 37    	bra       0x3578 <.L15>

00003576 <.L16>:
    3576:	00 00 00    	nop       

00003578 <.L15>:
    3578:	00 bd 20    	mov.w     #0xbd0, w0
    357a:	27 f9 07    	rcall     0x27ca <_timer_flag> <L0> <.LFB15> <.LFE14>
    357c:	00 00 e0    	cp0.w     w0
    357e:	fb ff 32    	bra       Z, 0x3576 <.L16>
    3580:	00 bd 20    	mov.w     #0xbd0, w0
    3582:	34 f9 07    	rcall     0x27ec <_timer_lower> <L0> <.LFB16> <.LFE15>
    3584:	80 41 80    	mov.w     0x830, w0
    3586:	a0 41 88    	mov.w     w0, 0x834
    3588:	90 41 80    	mov.w     0x832, w0
    358a:	b0 41 88    	mov.w     w0, 0x836
    358c:	40 84 20    	mov.w     #0x844, w0
    358e:	02 fc 07    	rcall     0x2d94 <_pin_read> <L0> <.LFB12> <.LFE11>
    3590:	80 41 88    	mov.w     w0, 0x830
    3592:	a0 85 20    	mov.w     #0x85a, w0
    3594:	ff fb 07    	rcall     0x2d94 <_pin_read> <L0> <.LFB12> <.LFE11>
    3596:	90 41 88    	mov.w     w0, 0x832
    3598:	c0 41 80    	mov.w     0x838, w0
    359a:	00 00 01    	call      w0
    359c:	e0 41 80    	mov.w     0x83c, w0
    359e:	00 00 01    	call      w0
    35a0:	eb ff 37    	bra       0x3578 <.L15>
Disassembly of section .dinit:

000035a2 <.dinit>:
    35a2:	30 08 00    	nop       
    35a4:	10 00 00    	nop       
    35a6:	80 00 00    	nop       
    35a8:	44 08 00    	nop       
    35aa:	b8 01 00    	nop       
    35ac:	80 00 00    	nop       
    35ae:	fc 09 00    	nop       
    35b0:	1c 01 00    	nop       
    35b2:	80 00 00    	nop       
    35b4:	40 08 00    	nop       
    35b6:	04 00 00    	nop       
    35b8:	80 00 00    	nop       
    35ba:	00 08 00    	nop       
    35bc:	30 00 00    	nop       
    35be:	80 00 00    	nop       
    35c0:	28 0c 00    	nop       
    35c2:	10 00 00    	nop       
    35c4:	82 00 00    	nop       
    35c6:	bd 37 86    	mov.w     0xc6f6, w13
    35c8:	33 bd 37    	bra       0xffffb030
    35ca:	06 35 bd    	subr.w    0x1506
    35cc:	37 86 36    	bra       LEU, 0xffff423c
    35ce:	bd 37 86    	mov.w     0xc6f6, w13
    35d0:	37 00 00    	nop       
    35d2:	ba 0b 00    	nop       
    35d4:	6e 00 00    	nop       
    35d6:	80 00 00    	nop       
    35d8:	18 0b 00    	nop       
    35da:	a2 00 00    	nop       
    35dc:	80 00 00    	nop       
    35de:	00 00 00    	nop       
Disassembly of section .isr:

000035e0 <__DefaultInterrupt>:
    35e0:	00 40 da    	break     
    35e2:	00 00 fe    	reset     
